//로컬 저장
var localOpt = {
    prever:0,
    ver:"20180724", //버전 체크
    localcheck: function() {
        var getCheck = false;
        if('localStorage' in window && window['localStorage'] !== null) {
            getCheck = true;
        }
        return getCheck;
    },
    save: function(data,times) {
        var getCheck = false;
        try{
            if(sub.debug) console.log(data, times, "afreecahelper_" + subType + "_" + subPage, localOpt.localcheck());
            if(localOpt.localcheck() == true && data && data.data != undefined && times !== "") {
                getCheck = true;
                localStorage.setItem("afreecahelper_" + subType + "_" + subPage ,JSON.stringify({ data:data, result:1, times:times }));
            }
        }
        catch(error) {
            
        }
        return getCheck;
    },
    load: function(data) {
        var getCheck = false;
        var getData = null;
        try{
            if(sub.debug) console.log(data, "afreecahelper_" + subType + "_" + subPage, localOpt.localcheck());
            if(localOpt.localcheck() == true) {
                var getLoadName = "afreecahelper_" + subType + "_" + subPage;
                var getOpt = localStorage.getItem(getLoadName);
                if(getOpt != null && getOpt !== "") {
                    var getOptData = $.parseJSON(getOpt);
                    if(getOptData != null && getOptData != undefined && getOptData.data != undefined) {
                        getCheck = true;
                        getData = getOptData;
                    } 
                }
            }
        }
        catch(error) {
            
        }
        return [getCheck, getData];
    },
    broad: {
        startime:"",
        lasttime:"",
        time: function(type, data) {
            //TODO 안쓰는듯
            var getTime = "";
            if(localOpt.localcheck() == true) {
                if(type == "save") {
                    localStorage.setItem("afreecahelper_broadtime", data);
                }
                else if(type == "load") {
                    getTime = localStorage.getItem("afreecahelper_broadtime");
                    if(getTime == null || getTime == undefined) getTime = "";
                }
            }
            return getTime;
        }
    }
}

var replace = {
    word: function(getMsg) {
        if(getMsg === "") return "";
    
        //시간
        if(getMsg.indexOf("{시간}") > -1) {
            getMsg = getMsg.replace(/{시간}/gi, getTimeValue("시간"));
        }
        if(getMsg.indexOf("{시간구분}") > -1) {
            getMsg = getMsg.replace(/{시간구분}/gi, getTimeValue("시간구분"));
        }
        if(getMsg.indexOf("{날짜}") > -1) {
            getMsg = getMsg.replace(/{날짜}/gi, getTimeValue("날짜"));
        }
        if(getMsg.indexOf("{time}") > -1) {
            getMsg = getMsg.replace(/{time}/gi, getTimeValue("time"));
        }
        if(getMsg.indexOf("{day}") > -1) {
            getMsg = getMsg.replace(/{day}/gi, getTimeValue("day"));
        }
        if(getMsg.indexOf("{요일}") > -1) {
            getMsg = getMsg.replace(/{요일}/gi, getTimeValue("요일"));
        }
        
        if(pageType == "player") {
            //아프리카tv
            if(getMsg.indexOf("{추천리스트}") > -1) {
                getMsg = getMsg.replace(/{추천리스트}/gi, player.afreecatv.datainfo.uplist.join(", "));
            }
            
            if(getMsg.indexOf("{추천수}") > -1) {
                getMsg = getMsg.replace(/{추천수}/gi, numberWithCommas(player.afreecatv.datainfo["today_up_count"]));
            }
            if(getMsg.indexOf("{전체추천수}") > -1) {
                getMsg = getMsg.replace(/{전체추천수}/gi, numberWithCommas(player.afreecatv.datainfo["total_up_count"]));
            }
            if(getMsg.indexOf("{누적시청자수}") > -1) {
                getMsg = getMsg.replace(/{누적시청자수}/gi, numberWithCommas(player.afreecatv.datainfo["total_view_count"]));
            }
            if(getMsg.indexOf("{즐겨찾기수}") > -1) {
                getMsg = getMsg.replace(/{즐겨찾기수}/gi, numberWithCommas(player.afreecatv.datainfo["total_favorite_count"]));
            }
            if(getMsg.indexOf("{팬클럽수}") > -1) {
                getMsg = getMsg.replace(/{팬클럽수}/gi, numberWithCommas(player.afreecatv.datainfo["fanclub_count"]));
            }
            if(getMsg.indexOf("{서포터수}") > -1) {
                getMsg = getMsg.replace(/{서포터수}/gi, numberWithCommas(player.afreecatv.datainfo["supporter_count"]));
            }
            if(getMsg.indexOf("{랭킹}") > -1) {
                getMsg = getMsg.replace(/{랭킹}/gi, numberWithCommas(player.afreecatv.datainfo.rank));
            }
            
            if(getMsg.indexOf("{상태}") > -1) {
                getMsg = getMsg.replace(/{상태}/gi, player.afreecatv.datainfo.connect == true ? "방송중" : "방송종료");
            }
            if(getMsg.indexOf("{제목}") > -1) {
                getMsg = getMsg.replace(/{제목}/gi, player.afreecatv.datainfo.title);
            }
            if(getMsg.indexOf("{시작시간}") > -1) {
                getMsg = getMsg.replace(/{시작시간}/gi, player.afreecatv.datainfo.start);
            }
            if(getMsg.indexOf("{방송시간}") > -1) {
                getMsg = getMsg.replace(/{방송시간}/gi, player.afreecatv.datainfo.uptime);
            }
            if(getMsg.indexOf("{시청자수}") > -1) {
                getMsg = getMsg.replace(/{시청자수}/gi, numberWithCommas(player.afreecatv.datainfo.view));
            }
                
            //트위치
            if(getMsg.indexOf("트위치") > -1) {
                if(getMsg.indexOf("{트위치시청자수}") > -1) {
                    getMsg = getMsg.replace(/{트위치시청자수}/gi, numberWithCommas(player.twitch.datainfo.view));
                }
                if(getMsg.indexOf("{트위치팔로우수}") > -1) {
                    getMsg = getMsg.replace(/{트위치팔로우수}/gi, numberWithCommas(player.twitch.datainfo.followcount));
                }
                if(getMsg.indexOf("{트위치시작시간}") > -1) {
                    getMsg = getMsg.replace(/{트위치시작시간}/gi, player.twitch.datainfo.start);
                }
                if(getMsg.indexOf("{트위치방송시간}") > -1) {
                    getMsg = getMsg.replace(/{트위치방송시간}/gi, player.twitch.datainfo.uptime);
                }
                if(getMsg.indexOf("{트위치제목}") > -1) {
                    getMsg = getMsg.replace(/{트위치제목}/gi, player.twitch.datainfo.title);
                }
            }
            
            //유튜브
            if(getMsg.indexOf("유튜브") > -1) {
                if(getMsg.indexOf("{유튜브시청자수}") > -1) {
                    getMsg = getMsg.replace(/{유튜브시청자수}/gi, numberWithCommas(player.youtube.datainfo.view));
                }
                if(getMsg.indexOf("{유튜브구독자수}") > -1) {
                    getMsg = getMsg.replace(/{유튜브구독자수}/gi, numberWithCommas(player.youtube.datainfo.subcount));
                }
                if(getMsg.indexOf("{유튜브시작시간}") > -1) {
                    getMsg = getMsg.replace(/{유튜브시작시간}/gi, player.youtube.datainfo.start);
                }
                if(getMsg.indexOf("{유튜브방송시간}") > -1) {
                    getMsg = getMsg.replace(/{유튜브방송시간}/gi, player.youtube.datainfo.uptime);
                }
                if(getMsg.indexOf("{유튜브제목}") > -1) {
                    getMsg = getMsg.replace(/{유튜브제목}/gi, player.youtube.datainfo.title);
                }
            }
            
            //카카오
            if(getMsg.indexOf("카카오") > -1) {
                if(getMsg.indexOf("{카카오시청자수}") > -1) {
                    getMsg = getMsg.replace(/{카카오시청자수}/gi, numberWithCommas(player.kakaotv.datainfo.view));
                }
                if(getMsg.indexOf("{카카오추천수}") > -1) {
                    getMsg = getMsg.replace(/{카카오추천수}/gi, numberWithCommas(player.kakaotv.datainfo.up));
                }
                if(getMsg.indexOf("{카카오구독자수}") > -1) {
                    getMsg = getMsg.replace(/{카카오구독자수}/gi, numberWithCommas(player.kakaotv.datainfo.sub));
                }
                if(getMsg.indexOf("{카카오플러스친구수}") > -1) {
                    getMsg = getMsg.replace(/{카카오플러스친구수}/gi, numberWithCommas(player.kakaotv.datainfo.plus));
                }
                if(getMsg.indexOf("{카카오시작시간}") > -1) {
                    getMsg = getMsg.replace(/{유튜브시작시간}/gi, player.kakaotv.datainfo.start);
                }
                if(getMsg.indexOf("{카카오방송시간}") > -1) {
                    getMsg = getMsg.replace(/{유튜브방송시간}/gi, player.kakaotv.datainfo.uptime);
                }
                if(getMsg.indexOf("{카카오제목}") > -1) {
                    getMsg = getMsg.replace(/{카카오제목}/gi, player.kakaotv.datainfo.title);
                }
            }
            
            //골드라이브
            if(getMsg.indexOf("골드라이브") > -1) {
                if(getMsg.indexOf("{골드라이브시청자수}") > -1) {
                    getMsg = getMsg.replace(/{카카오시청자수}/gi, numberWithCommas(player.goldlive.datainfo.view));
                }
                if(getMsg.indexOf("골드라이브추천수}") > -1) {
                    getMsg = getMsg.replace(/{카카오추천수}/gi, numberWithCommas(player.goldlive.datainfo.up));
                }
                if(getMsg.indexOf("{골드라이브즐겨찾기수}") > -1) {
                    getMsg = getMsg.replace(/{카카오구독자수}/gi, numberWithCommas(player.goldlive.datainfo.sub));
                }
                if(getMsg.indexOf("{골드라이브오제목}") > -1) {
                    getMsg = getMsg.replace(/{카카오제목}/gi, player.kakaotv.datainfo.title);
                }
            }
        }
    
        return getMsg;
    },
    apiload: function(data) {
        doTimeout("apiload_" + data.type , function() {
            if(sub.debug) console.log("apiload", data);
            if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                if(sub.debug) console.log("api socket apiload", data);
                socket.emit("apiload",data);
            }
            else if(apiSocketUse == false || apiCheck == true) {
                if(sub.debug) console.log("api socket dissconnect");
                //apiData[data.type].check = true;
                if(data.type == "broad") {
                    replace.api.broad();
                }
                else if(data.type == "users") {
                    replace.api.up();
                }
                if(data.type == "indexes") {
                    replace.api.indexes();
                }
                else if(data.type == "viewer") {
                    replace.api.viewer();
                }
                else if(data.type == "youtube") {
                    replace.api.youtube();
                }
                else if(data.type == "youtubechat" || data.type == "youtubeinfo" || data.type == "youtubealert" || data.type == "youtubesub" || data.type == "youtubespon") {
                    replace.api.youtubeapi(data);
                }
                else if(data.type == "kakaotv") {
                    replace.api.kakaotv();
                }
                else if(data.type == "kakaotvinfo") {
                    replace.api.kakaotvinfo();
                }
                else if(data.type == "facebook") {
                    replace.api.facebook();
                }
                else if(data.type == "facebookchat") {
                    replace.api.facebookchat();
                }
                else if(data.type == "goldlive") {
                    replace.api.goldlive();
                }
                else if(data.type == "goldliveinfo") {
                    replace.api.goldliveinfo();
                }
            }
        }, 1000);
    },
    api: {
        reset: function(type) {
            //console.log("★☆ reset", type);
            if(apiData[type].reset == false) return;
            apiData[type].reset = false;
            
            clearTimeout(apiData[type].interval);
            apiData[type].interval = setTimeout(function() {
                apiData[type].check = true;
                apiData[type].reset = true;
            }, 3000);
        },
        broad: function() {
            if(player.afreecatv.datainfo.id != "") {
                $.ajax({
                    type:"GET",
                    url:afreecaUrl + "broad/" + player.afreecatv.datainfo.id,
                    dataType:"json",
                    timeout:5000,
                    cache: false,
                    // headers: {
                        // 'Cache-Control': 'max-age=60'
                    // },
                    success: function(data) {
                        if(sub.debug) console.log("api broad success", data, player.afreecatv.datainfo.relaychat);
                        
                        data.replaychat = player.afreecatv.datainfo.relaychat.list;
                        var getPrevData = JSON.stringify(data);
                        
                        if(data.result == true && data.data.broad_no != undefined && ((subType == "chat" && sub[subType].data.relaychat != undefined && sub[subType].data.relaychat == true) || subType == "alert")) {
                            $.ajax({
                                type:"GET",
                                url:"http://live.afreecatv.com/api/relay_broad_list.php",
                                dataType:"jsonp",
                                timeout:5000,
                                data:{
                                    nBroadNo:data.data.broad_no
                                },
                                success: function(datachat) {
                                    player.afreecatv.datainfo.relaychat.list = [];
                                    if(datachat && datachat.relayBroadList) {
                                        $.each(datachat.relayBroadList, function(keys, values) {
                                            player.afreecatv.datainfo.relaychat.list.push(values.broad_no);
                                        });
                                    }
                                }
                            });
                        }
                        
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.afreecatv.datainfo.id,
                                type:"broad",
                                data:player.afreecatv.prevdata.broad != getPrevData ? data : false
                            });
                        }
                        
                        player.afreecatv.prevdata.broad = getPrevData;
                        replace.api.broadData(data);
                        
                        apiData.broad.result = false;
                        if(data && data.result) {
                            apiData.broad.result = data.result;
                        }
                        apiData.broad.check = true;
                        apiData.broad.reset = true;
                        clearTimeout(apiData.broad.interval);
                    },
                    error: function(data, status, error) {
                        if(sub.debug) console.log("api broad error", data, status);
                    }
                });
            }
        },
        broadData: function(data) {
            if(sub.debug) console.log("api broadData", data);
            if(data && data.result != undefined) {
                if(data.result == true) {
                    player.afreecatv.datainfo.broadno = data.data["broad_no"];
                    player.afreecatv.datainfo.view = data.data["view_cnt"] + data.data["relay_view_cnt"];
                    player.afreecatv.datainfo.title = data.data.title;
                    player.afreecatv.datainfo.start = data.data["broad_start"];
                    player.afreecatv.datainfo.uptime = replace.uptime(player.afreecatv.datainfo.start);
                    player.afreecatv.datainfo.rank = data.data.rank;
                    player.afreecatv.datainfo.broad = data;
                    
                    if(player.setup.loadcheck == true && player.afreecatv.datainfo.connect == false) {
                        player.afreecatv.datainfo.connect = true;
                        player.afreecatv.load("load");
                    }
                }
                player.afreecatv.datainfo.connect = data.result;
            }
        },
        up: function(checktype) {
            if(player.afreecatv.datainfo.id != "") {
                $.ajax({
                    type:"GET",
                    url:afreecaUrl + "up/users/" + player.afreecatv.datainfo.id,
                    dataType:"json",
                    timeout:5000,
                    cache: false,
                    // headers: {
                        // 'Cache-Control': 'max-age=60'
                    // },
                    success: function(data) {
                        if(sub.debug) console.log("api users success", data);
                        var getPrevData = JSON.stringify(data);
                        if(checktype != true && apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.afreecatv.datainfo.id,
                                type:"users",
                                data:player.afreecatv.prevdata.users != getPrevData ? data : false
                            });
                        }
                        
                        player.afreecatv.prevdata.users = getPrevData;
                        replace.api.upData(data);
                        
                        apiData.users.check = true;
                        apiData.users.reset = true;
                        clearTimeout(apiData.users.interval);
                    },
                    error: function(data, status, error) {
                        if(sub.debug) console.log("api users error", data, status);
                    }
                });
            }
        },
        upData: function(data) {
            if(sub.debug) console.log("api upData", data);
            if(data.length == 0) {
                player.afreecatv.datainfo.upfirst = false;
                return;
            }
            
            var getNickList = [];
            $.each(data, function(key, value) {
                if(value["view_nick"] != undefined && value["view_nick"] != "") {
                    getNickList.push(value["view_nick"]);
                }
            });
            
            //최대10명
            player.afreecatv.datainfo.uplist = getNickList;
            //console.log("추천10명", player.afreecatv.datainfo.uplist);
            if(player.afreecatv.datainfo.upfirst == true) {
                player.afreecatv.datainfo.uplast = player.afreecatv.datainfo.uplist[0];
            }
            else if(player.afreecatv.datainfo.uplist.length > 0) {
                if(subType == "alert") {
                    if(player.afreecatv.datainfo.uplast != "") {
                        var getLastIdx = $.inArray(player.afreecatv.datainfo.uplast, player.afreecatv.datainfo.uplist);
                        if(getLastIdx > -1) {
                            player.afreecatv.datainfo.uplist = player.afreecatv.datainfo.uplist.slice(0, getLastIdx);
                        }
                        //console.log(player.afreecatv.datainfo.uplast, getLastIdx, player.afreecatv.datainfo.uplist);
                    }
                    if(player.afreecatv.datainfo.uplist.length > 0) {
                        player.afreecatv.datainfo.uplast = player.afreecatv.datainfo.uplist[0];
                        sub.alert.add({
                            type:"afup",
                            uid:"",
                            uname:player.afreecatv.datainfo.uplist
                        }, true);
                    }
                }
            }
            player.afreecatv.datainfo.upfirst = false;
        },
        indexes: function(checktype) {
            if(player.afreecatv.datainfo.id != "") {
                $.ajax({
                    type:"GET",
                    url:afreecaUrl + "bj/indexes/" + player.afreecatv.datainfo.id,
                    dataType:"json",
                    timeout:5000,
                    cache: false,
                    // headers: {
                        // 'Cache-Control': 'max-age=60'
                    // },
                    success: function(data) {
                        if(sub.debug) console.log("api indexes success", data);
                        var getPrevData = JSON.stringify(data);
                        if(checktype != true && apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.afreecatv.datainfo.id,
                                type:"indexes",
                                data:player.afreecatv.prevdata.indexes != getPrevData ? data : false
                            });
                        }
                        
                        player.afreecatv.prevdata.indexes = getPrevData;
                        replace.api.indexesData(data);
                        
                        apiData.indexes.check = true;
                        apiData.indexes.reset = true;
                        clearTimeout(apiData.indexes.interval);
                    },
                    error: function(data, status, error) {
                        if(sub.debug) console.log("api indexes error", data, status);
                    }
                });
            }
        },
        indexesData: function(data) {
            if(sub.debug) console.log("api indexesData", data);
            if(data && data["today_up_count"] != undefined) {
                player.afreecatv.datainfo["today_up_count"] = data["today_up_count"] != null && !isNaN(data["today_up_count"]) ? data["today_up_count"] : 0;
                player.afreecatv.datainfo["total_up_count"] = data["total_up_count"] != null && !isNaN(data["total_up_count"]) ? data["total_up_count"] : 0;
                player.afreecatv.datainfo["today_favorite_count"] = data["today_favorite_count"] != null && !isNaN(data["today_favorite_count"]) ? data["today_favorite_count"] : 0;
                player.afreecatv.datainfo["total_favorite_count"] = data["total_favorite_count"] != null && !isNaN(data["total_favorite_count"]) ? data["total_favorite_count"] : 0;
                player.afreecatv.datainfo["total_view_count"] = data["total_view_count"] != null && !isNaN(data["total_view_count"]) ? data["total_view_count"] : 0;
                player.afreecatv.datainfo["fanclub_count"] = data["fanclub_count"] != null && !isNaN(data["fanclub_count"]) ? data["fanclub_count"] : 0;
                player.afreecatv.datainfo["supporter_count"] = data["supporter_count"] != null && !isNaN(data["supporter_count"]) ? data["supporter_count"] : 0;
                
                if(subType == "goal") {
                    if(sub.goal.data.type == "up" || sub.goal.data.type == "fan" || sub.goal.data.type == "fav") {
                        sub.goal.getinfo(false);
                    }
                }
            }
        },
        viewer: function(checktype) {
            if(player.afreecatv.datainfo.id != "") {
                $.ajax({
                    type:"GET",
                    url:afreecaUrl + "viewer/" + player.afreecatv.datainfo.broadno,
                    dataType:"json",
                    timeout:5000,
                    cache: false,
                    // headers: {
                        // 'Cache-Control': 'max-age=60'
                    // },
                    success: function(data) {
                        if(sub.debug) console.log("api viewer success", data);
                        
                        var getPrevData = JSON.stringify(data);
                        if(checktype != true && apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.afreecatv.datainfo.id,
                                type:"viewer",
                                data:player.afreecatv.prevdata.viewer != getPrevData ? data : false
                            });
                        }
                        player.afreecatv.prevdata.viewer = getPrevData;
                        replace.api.viewerData(data);
                        
                        apiData.viewer.check = true;
                        apiData.viewer.reset = true;
                        clearTimeout(apiData.viewer.interval);
                    },
                    error: function(data, status, error) {
                        if(sub.debug) console.log("api viewer error", data, status);
                    }
                });
            }
        },
        viewerData: function(data) {
            if(sub.debug) console.log("api viewerData", data);
            if(data && data["view_cnt"] != undefined && data["relay_view_cnt"] != undefined) {
                player.afreecatv.datainfo.view = parseInt(data["view_cnt"], 10) + parseInt(data["relay_view_cnt"], 10);
                if(subType == "goal" && sub.goal.data.type == "view") {
                    sub.goal.getinfo(false);
                }
            }
        },
        
        youtube: function() {
            if(player.youtube.datainfo.id != "") {                
                if(player.youtube.datainfo.viewid !== "") {
                    $.ajax({
                        url: "lib/youtubeheartbeat.php?videoid=" + player.youtube.datainfo.viewid,
                        timeout:5000,
                        dataType:"json",
                        success: function(data) {
                            if(sub.debug) console.log("beat youtube success", data);
                            
                            if(data && data.liveStreamability != undefined && data.liveStreamability.liveStreamabilityRenderer != undefined && data.liveStreamability.liveStreamabilityRenderer.videoId != undefined) {
                                if(player.youtube.datainfo.viewid != data.liveStreamability.liveStreamabilityRenderer.videoId) {
                                    player.youtube.datainfo.viewid = data.liveStreamability.liveStreamabilityRenderer.videoId;
                                    player.youtube.datainfo.viewkey = "";
                                    replace.api.youtube();
                                    return;
                                }
                            }
                            
                            if(data && data.status != undefined) {
                                if((data.status == "ok" && player.youtube.datainfo.connect === false) || (data.status == "live_stream_offline" && player.youtube.datainfo.connect === true)) {
                                    player.youtube.datainfo.viewid = "";
                                    player.youtube.datainfo.viewkey = "";
                                    replace.api.youtube();
                                }
                            }
                            else {
                                player.youtube.datainfo.viewid = "";
                                player.youtube.datainfo.viewkey = "";
                            }
                        },
                        error: function(data) {
                            player.youtube.datainfo.viewid = "";
                            player.youtube.datainfo.viewkey = "";
                        }
                    });
                }
                else {
                    //var youtubePath = 'https://www.googleapis.com/youtube/v3/liveBroadcasts?part=snippet,status&broadcastType=persistent&mine=true';
                    var youtubePath = 'https://www.googleapis.com/youtube/v3/liveBroadcasts?part=snippet,status&broadcastType=all&mine=true';
                    gapi.client.request({
                        'path': youtubePath,
                        'headers': {
                            authorization: 'Bearer ' + loginInfo.yttoken
                        }
                    }).then(function(data) {
                        if(sub.debug) console.log("api youtube success", data);
                        
                        var getData = {
                            id:"",
                            liveid:"",
                            result:false,
                            data:{
                                start:"",
                                title:""
                            }
                        }
                        
                        var getLiveCheck = false;
                        if(data && data.result && data.result.items) {
                            $.each(data.result.items, function(key, value) {
                                if(value.status && value.status.lifeCycleStatus && (value.status.lifeCycleStatus == "live" || value.status.lifeCycleStatus == "ready")) {
                                    getData.id = value.id;
                                    if(value.snippet) {
                                        if(value.snippet.publishedAt) {
                                            getData.data.start = value.snippet.publishedAt;
                                        }
                                        if(value.snippet.liveChatId) {
                                            getData.liveid = value.snippet.liveChatId;
                                        }
                                        if(value.snippet.title) {
                                            getData.data.title = value.snippet.title;
                                        }
                                    }
                                    if(value.status.lifeCycleStatus == "live") {
                                        getLiveCheck = true;
                                        return false;
                                    }
                                }
                            });
                            
                            if(getLiveCheck === true && getData.id != "" && getData.liveid != "") {
                                getData.result = true;
                            }
                        }
                        
                        var getPrevData = JSON.stringify(getData);
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.youtube.datainfo.id,
                                type:"youtube",
                                data:player.youtube.prevdata.broad != getPrevData ? getData : false
                            });
                        }
                        
                        player.youtube.prevdata.broad = getPrevData;
                        replace.api.youtubeData(getData);
                        
                        apiData.youtube.check = true;
                        apiData.youtube.reset = true;
                        clearTimeout(apiData.youtube.interval);
                    }, function(data) {
                        if(sub.debug) console.log("api youtube error", data);
                        if(data && data.result && data.result.error && data.result.error.code == 401) {
                            doTimeout("youtube_refresh_run" , function() {
                                player.youtube.refresh();
                            }, 1000);
                        }
                    });
                }
                
            }
        },
        
        youtubeData: function(data) {
            if(sub.debug) console.log("api youtubeData", data);
            apiData.youtube.result = data.result;
            
            if(data && data.data) {
                if(player.youtube.datainfo.connect != data.result || player.youtube.datainfo.viewid != data.id) {
                    //방송시작
                    player.youtube.token = "";
                    player.youtube.subtoken = "";
                    player.youtube.datainfo.viewid = "";
                    player.youtube.datainfo.viewkey = "";
                    player.youtube.firstload = true;
                }
                
                player.youtube.datainfo.connect = data.result;
                player.youtube.datainfo.liveid = data.liveid;
                player.youtube.datainfo.viewid = data.id;
                player.youtube.datainfo.title = data.data.title;
                player.youtube.datainfo.start = data.data.start.replace("T"," ").replace(".000Z","").replace(".Z","").replace("Z","");
                player.youtube.datainfo.uptime = replace.uptime(player.youtube.datainfo.start);
            }
        },
        
        youtubeapi: function(apidata) {
            if(sub.debug) console.log("api youtubeData", apidata);
            if(player.youtube.datainfo.id != "") {
                //채팅
                if(apidata.type == "youtubechat") {
                    var youtubePath = 'https://www.googleapis.com/youtube/v3/liveChat/messages?part=authorDetails,snippet&liveChatId=' + player.youtube.datainfo.liveid + '&key=' + youtubeApi;
                    if(player.youtube.token != "") {
                        youtubePath += "&pageToken=" + player.youtube.token;
                    }
                    
                    gapi.client.request({
                        'path': youtubePath,
                        'headers': {
                            authorization: 'Bearer ' + loginInfo.yttoken
                        }
                    }).then(function(data) {
                        if(sub.debug) console.log("api youtubeapi chat success", data);
                        
                        var getData = {
                            result:false,
                            data: {
                                token: "",
                                time: "",
                                items:[]
                            }
                        }
                            
                        if(data && data.result) {
                            if(data.result.nextPageToken != undefined) {
                                getData.data.token = data.result.nextPageToken;
                            }
                            if(data.result.items != undefined) {
                                getData.data.items = data.result.items;
                                getData.result = true;
                            }
                        }
                        
                        var getPrevData = JSON.stringify(getData);
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.youtube.datainfo.id,
                                type:apidata.type,
                                data:player.youtube.prevdata.chat != getPrevData ? getData : false
                            });
                        }
                        
                        player.youtube.prevdata.chat = getPrevData;
                        replace.api.youtubeapiData(apidata, getData);
                        
                        apiData[apidata.type].check = true;
                        apiData[apidata.type].reset = true;
                        clearTimeout(apiData[apidata.type].interval);
                    }, function(data) {
                        // if(data && data.result != undefined) {
                            // var errorData = {
                                // login:loginInfo,
                                // error:data.result
                            // }
                            // $.ajax({
                                // type:"POST",
                                // url:logUrl + "lib/aflog.php",
                                // data:{
                                    // type:"youtubechaterror",
                                    // log:JSON.stringify(errorData)
                                // }
                            // });
                        // }
                        
                        if(sub.debug) console.log("api youtube chat error", data);
                        if(data && data.result && data.result.error) {
                            if(data.result.error.code == 401) {
                                doTimeout("youtube_refresh_run" , function() {
                                    player.youtube.refresh();
                                }, 1000);
                            }
                            else if(data.result.error.code == 400) {
                                player.youtube.token = "";
                                player.youtube.firstload = true;
                            }
                        }
                    });
                }
                else if(apidata.type == "youtubeinfo") {
                    var youtubePath = 'https://www.googleapis.com/youtube/v3/channels?part=statistics&id=' + player.youtube.data.ytchid + '&key=' + youtubeApi;
                    
                    gapi.client.request({
                        'path': youtubePath
                    }).then(function(data) {
                        if(sub.debug) console.log("api youtubeapi info success", data);
                        var getData = {
                            result:false,
                            data:{
                                subscriberCount: 0,
                                viewCount: 0
                            }
                        }
                            
                        if(data && data.result) {
                            if(data.result.items && data.result.items.length > 0 && data.result.items[0].statistics) {
                                getData.data.subscriberCount = data.result.items[0].statistics.subscriberCount;
                                getData.data.viewCount = data.result.items[0].statistics.viewCount;
                                getData.result = true;
                            }
                        }
                        
                        var getPrevData = JSON.stringify(getData);
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.youtube.datainfo.id,
                                type:apidata.type,
                                data:player.youtube.prevdata.info != getPrevData ? getData : false
                            });
                        }
                        
                        player.youtube.prevdata.info = getPrevData;
                        replace.api.youtubeapiData(apidata, getData);
                        
                        apiData[apidata.type].check = true;
                        apiData[apidata.type].reset = true;
                        clearTimeout(apiData[apidata.type].interval);
                    }, function(data) {
                        if(sub.debug) console.log("api youtubeapi info error", data);
                        if(data && data.result && data.result.error && data.result.error.code == 401) {
                            doTimeout("youtube_refresh_run" , function() {
                                player.youtube.refresh();
                            }, 1000);
                        }
                    });
                }
                else if(apidata.type == "youtubealert") {
                    var youtubePath = 'https://www.googleapis.com/youtube/v3/superChatEvents?part=snippet&maxResults=10&liveChatId=' + player.youtube.datainfo.liveid + '&key=' + youtubeApi;
                    
                    gapi.client.request({
                        'path': youtubePath,
                        'headers': {
                            authorization: 'Bearer ' + loginInfo.yttoken
                        }
                    }).then(function(data) {
                        if(sub.debug) console.log("api youtubeapi alert success", data);
                        
                        var getData = {
                            result:false,
                            data:{
                                items:[]
                            }
                        }
                        
                        if(data && data.result) {
                            if(data.result.items && data.result.items.length > 0) {
                                getData.data.items = data.result.items;
                                getData.result = true;
                            }
                        }
                        
                        var getPrevData = JSON.stringify(getData);
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.youtube.datainfo.id,
                                type:apidata.type,
                                data:player.youtube.prevdata.alert != getPrevData ? getData : false
                            });
                        }
                        
                        player.youtube.prevdata.alert = getPrevData;
                        replace.api.youtubeapiData(apidata, getData);
                        
                        apiData[apidata.type].check = true;
                        apiData[apidata.type].reset = true;
                        clearTimeout(apiData[apidata.type].interval);
                    }, function(data) {
                        if(sub.debug) console.log("api youtubeapi alert error", data);
                        if(data && data.result && data.result.error && data.result.error.code == 401) {
                            doTimeout("youtube_refresh_run" , function() {
                                player.youtube.refresh();
                            }, 1000);
                        }
                    });
                }
                else if(apidata.type == "youtubesub") {
                    //var youtubePath = 'https://www.googleapis.com/youtube/v3/subscriptions?part=subscriberSnippet&myRecentSubscribers=true&maxResults=10&key=' + youtubeApi;
                    var youtubePath = 'https://www.googleapis.com/youtube/v3/subscriptions?part=snippet&mySubscribers=true&maxResults=10&key=' + youtubeApi;
                    if(player.youtube.subtoken != "") {
                        youtubePath += "&pageToken=" + player.youtube.subtoken;
                    }
                    
                    gapi.client.request({
                        'path': youtubePath,
                        'headers': {
                            authorization: 'Bearer ' + loginInfo.yttoken
                        }
                    }).then(function(data) {
                        if(sub.debug) console.log("api youtubeapi sub success", data);
                        
                        var getData = {
                            result:false,
                            data:{
                                token:"",
                                items:[]
                            }
                        }
                            
                        if(data && data.result) {
                            if(data.result.nextPageToken != undefined) {
                                getData.data.token = data.result.nextPageToken;
                            }
                            if(data.result.items && data.result.items.length > 0) {
                                getData.data.items = data.result.items;
                                getData.result = true;
                            }
                        }
                        
                        var getPrevData = JSON.stringify(getData);
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.youtube.datainfo.id,
                                type:apidata.type,
                                data:player.youtube.prevdata.sub != getPrevData ? getData : false
                            });
                        }
                        
                        player.youtube.prevdata.sub = getPrevData;
                        replace.api.youtubeapiData(apidata, getData);
                        
                        apiData[apidata.type].check = true;
                        apiData[apidata.type].reset = true;
                        clearTimeout(apiData[apidata.type].interval);
                    }, function(data) {
                        if(sub.debug) console.log("api youtubeapi sub error", data);
                        if(data && data.result && data.result.error && data.result.error.code == 401) {
                            doTimeout("youtube_refresh_run" , function() {
                                player.youtube.refresh();
                            }, 1000);
                        }
                    });
                }
                else if(apidata.type == "youtubespon") {
                    var youtubePath = 'https://www.googleapis.com/youtube/v3/sponsors?part=id,snippet&maxResults=10';
                    // if(player.youtube.sponsortoken != "") {
                        // youtubePath += "&pageToken=" + player.youtube.sponsortoken;
                    // }
                    
                    gapi.client.request({
                        'path': youtubePath,
                        'headers': {
                            authorization: 'Bearer ' + loginInfo.yttoken
                        }
                    }).then(function(data) {
                        if(sub.debug) console.log("api youtubeapi spon success", data);
                        
                        var getData = {
                            result:false,
                            data:{
                                token:"",
                                items:[]
                            }
                        }
                            
                        if(data && data.result) {
                            if(data.result.nextPageToken != undefined) {
                                getData.data.token = data.result.nextPageToken;
                            }
                            if(data.result.items && data.result.items.length > 0) {
                                getData.data.items = data.result.items;
                                getData.result = true;
                            }
                        }
                        
                        var getPrevData = JSON.stringify(getData);
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.youtube.datainfo.id,
                                type:apidata.type,
                                data:player.youtube.prevdata.spon != getPrevData ? getData : false
                            });
                        }
                        
                        player.youtube.prevdata.spon = getPrevData;
                        replace.api.youtubeapiData(apidata, getData);
                        
                        apiData[apidata.type].check = true;
                        apiData[apidata.type].reset = true;
                        clearTimeout(apiData[apidata.type].interval);
                    }, function(data) {
                        if(sub.debug) console.log("api youtubeapi spon error", data);
                        if(data && data.result && data.result.error && data.result.error.code == 400) {
                            //스폰서 미지원
                            doTimeout("youtube_sponsor", false);
                            return;
                        }
                        else if(data && data.result && data.result.error && data.result.error.code == 401) {
                            doTimeout("youtube_refresh_run" , function() {
                                player.youtube.refresh();
                            }, 1000);
                        }
                    });
                }
            }
        },
        youtubeapiData: function(apidata,data) {
            if(sub.debug) console.log("api youtubeapiData", apidata, data);
            apiData[apidata.type].result = data.result;
            
            //결과
            if(data && data.data) {
                if(apidata.type == "youtubechat") {
                    // if(loginInfo.ytchid == "UCM10ElkOw-oNcdFXmVlWerA" || loginInfo.ytchid == "UC6ldBY4j2lQWT5pdr-dFw9A" || loginInfo.ytchid == "UClTY1A-Hw4_l0ILAUCYl1Mg") {
                        // $.ajax({
                            // type:"POST",
                            // url:logUrl + "lib/aflog.php",
                            // data:{
                                // type:"youtubelog_" + loginInfo.ytchid,
                                // log:JSON.stringify(data)
                            // }
                        // });
                    // }
                    
                    if(data.result && data.result == true) {
                        if(data.data.token && data.data.token != "") player.youtube.token = data.data.token;
                    }
                    if(player.youtube.firstload == false && data.data.items && data.data.items.length > 0) {
                        sub.chat.msgylivechat(data.data.items);
                    }
                    player.youtube.firstload = false;
                }
                else if(apidata.type == "youtubeinfo") {
                    if(data.result && data.result == true) {
                        var getGoalType = "";
                        if(player.youtube.datainfo.goaltype == "ytsub" || player.youtube.datainfo.goaltype == "sub") var getGoalType = "subscriberCount";
                        else if(player.youtube.datainfo.goaltype == "ytplay") var getGoalType = "viewCount";
                        
                        player.youtube.datainfo.subcount = data.data.subscriberCount;
                        player.youtube.datainfo.viewcount = data.data.viewCount;
                        if(subType == "goal" && data.data[getGoalType]) {
                            sub.goal.add(data.data[getGoalType]);
                        }
                    }
                }
                else if(apidata.type == "youtubealert") {
                    if(data.data.items && data.data.items.length > 0) {
                        var getYoutubeAlert = [];
                        $.each(data.data.items.reverse(), function(key, value) {
                            if(value.snippet != undefined && value.snippet.supporterDetails != undefined) {
                                if($.inArray(value.id,player.youtube.alertlist) == -1) {
                                    player.youtube.alertlist.push(value.id);
                                    getYoutubeAlert.push(value);
                                }
                            }
                        });
                        
                        if(player.youtube.alertload == false) {
                            sub[subType].msgy(getYoutubeAlert);
                        }
                    }
                    player.youtube.alertload = false;
                }
                else if(apidata.type == "youtubesub") {
                    if(data.data.token && data.data.token != "") player.youtube.subtoken = data.data.token;
                    if(data.data.items && data.data.items.length > 0) {
                        sub.alert.msgys(data.data.items);
                    }
                    player.youtube.subfirstload = false;
                }
                else if(apidata.type == "youtubespon") {
                    //if(data.data.token && data.data.token != "") player.youtube.sponsortoken = data.data.token;
                    if(data.data.items && data.data.items.length > 0) {
                        sub.alert.msgysp(data.data.items);
                    }
                    player.youtube.sponsorfirstload = false;
                }
            }
        },
        kakaotv: function() {
            if(player.kakaotv.datainfo.id != "") {
                $.ajax({
                    url:player.kakaotv.datainfo.serverurl,
                    timeout:5000,
                    dataType:"json",
                    data:{
                        type:"kakaotvinfo",
                        id:player.kakaotv.datainfo.id,
                        live:"lives"
                    },
                    success: function(data) {
                        if(sub.debug) console.log("api kakaotv success", data);
                        
                        var getResultData = {
                            result:false,
                            data:{
                            	start:"",
                                title:"",
                                view:0,
                                up:0
                            }
                        }
                        
                        if(data) {
                            var getData = null;
                            if(data.data != undefined && data.data.id != undefined) getData = data.data;
                            else if(data.id != undefined) getData = data;
                            
                            if(getData != null && getData.live != undefined) {
                                if(getData.live.status != undefined && getData.live.status == "ONAIR") {
                                    getResultData.result = true;
                                }
                                getResultData.data.view = parseInt(getData.live.ccuCount, 10);
                                getResultData.data.up = parseInt(getData.live.likeCount, 10);
                                getResultData.data.title = getData.live.title;
                                getResultData.data.start = getData.live.startTime;
                            }
                        }
                        
                        var getPrevData = JSON.stringify(getResultData);
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.kakaotv.datainfo.id,
                                type:"kakaotv",
                                data:player.kakaotv.prevdata.broad != getPrevData ? getResultData : false
                            });
                        }
                        
                        player.kakaotv.prevdata.broad = getPrevData;
                        replace.api.kakaotvData(getResultData);
                        
                        apiData.kakaotv.check = true;
                        apiData.kakaotv.reset = true;
                        clearTimeout(apiData.kakaotv.interval);
                    },
                    error: function(data, status, error) {
                        if(sub.debug) console.log("api kakaotv error", data, status);
                    }
                });
            }
        },
        kakaotvData: function(data) {
            if(sub.debug) console.log("api kakaotvData", data);
            apiData.kakaotv.result = data.result;
            if(data && data.data) {
                player.kakaotv.datainfo.connect = data.result;
                player.kakaotv.datainfo.title = data.data.title;
                player.kakaotv.datainfo.view = data.data.view;
                player.kakaotv.datainfo.up = data.data.up;
                player.kakaotv.datainfo.start = data.data.start;
                player.kakaotv.datainfo.uptime = replace.uptime(player.kakaotv.datainfo.start);
            }
            else {
                player.kakaotv.datainfo.connect = false;
                player.kakaotv.datainfo.title = "";
                player.kakaotv.datainfo.view = 0;
                player.kakaotv.datainfo.up = 0;
            }
            
            if(player.kakaotv.datainfo.connect === false && player.kakaotv.datainfo.online === true && player.kakaotv.socket !== null) {
            	player.kakaotv.socket.close();
            }
        },
        kakaotvinfo: function() {
            if(player.kakaotv.datainfo.id != "") {
                $.ajax({
                    url:player.kakaotv.datainfo.serverurl,
                    timeout:5000,
                    dataType:"json",
                    data:{
                        type:"kakaotvstats",
                        id:player.kakaotv.datainfo.id,
                        live:""
                    },
                    success: function(data) {
                        if(sub.debug) console.log("api kakaotvinfo success", data);
                        
                        var getResultData = {
                            result:false,
                            data:{
                                view:0,
                                sub:0,
                                plus:0,
                                up:0
                            }
                        }
                        
                        if(data) {
                            var getData = null;
                            if(data.data != undefined && data.data.id != undefined) getData = data.data;
                            else if(data.id != undefined) getData = data;
                            
                            if(getData != null) {
                                if(getData.subscriberCount) {
                                    getResultData.data.sub = parseInt(getData.subscriberCount, 10);
                                }
                                if(getData.friendCount) {
                                    getResultData.data.plus = parseInt(getData.friendCount, 10);
                                }
                            }
                        }
                        
                        var getPrevData = JSON.stringify(getResultData);
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.kakaotv.datainfo.id,
                                type:"kakaotvinfo",
                                data:player.kakaotv.prevdata.info != getPrevData ? getResultData : false
                            });
                        }
                        
                        player.kakaotv.prevdata.info = getPrevData;
                        replace.api.kakaotvinfoData(getResultData);
                        
                        apiData.kakaotvinfo.check = true;
                        apiData.kakaotvinfo.reset = true;
                        clearTimeout(apiData.kakaotvinfo.interval);
                    },
                    error: function(data, status, error) {
                        if(sub.debug) console.log("api kakaotvinfo error", data, status);
                    }
                });
            }
        },
        kakaotvinfoData: function(data) {
            if(sub.debug) console.log("api kakaotvinfoData", data);
            apiData.kakaotvinfo.result = data.result;
            if(data && data.data) {
                player.kakaotv.datainfo.sub = data.data.sub;
                player.kakaotv.datainfo.plus = data.data.plus;
                
                if(subType == "goal") {
                    if(player.kakaotv.datainfo.type == "kaview") sub.goal.add(player.kakaotv.datainfo.view);
                    else if(player.kakaotv.datainfo.type == "kaup") sub.goal.add(player.kakaotv.datainfo.up);
                    else if(player.kakaotv.datainfo.type == "kasub") sub.goal.add(player.kakaotv.datainfo.sub);
                    else if(player.kakaotv.datainfo.type == "kaplus") sub.goal.add(player.kakaotv.datainfo.plus);
                }
            }
        },
        facebook: function() {
            if(player.facebook.datainfo.connect == false || player.facebook.datainfo.videoid == "") {
                FB.api(
                    "/" + player.facebook.datainfo.id + "/posts",
                    function(data) {
                        if(sub.debug) console.log("api facebookapi success", data);
                        var getVideoList = [];
                        if(data && data.data && data.data.length > 0) {
                            $.each(data.data, function(key, value) {
                                if(value.id && value.id != "" && value.type && value.type == "video" && value.is_published && value.is_published == true) {
                                    getVideoList.push(value.id.split("_")[1]);
                                }
                            });
                        }
                        
                        replace.api.facebookload(getVideoList);
                    },
                    //{access_token: loginInfo.fatoken}
                    {
                        limit:10,
                        fields:"id,object_id,source,type,is_published,created_time",
                        access_token:facebookTokenId
                    }
                );
            }
            else if(player.facebook.datainfo.connect == true && player.facebook.datainfo.videoid != "") {
                replace.api.facebookload([player.facebook.datainfo.videoid]);
            }
            else {
                replace.api.facebookload([]);
            }
        },
        facebookload: function(data) {
            if(sub.debug) console.log("facebookload", data);
            player.facebook.datainfo.connect = false;
            player.facebook.datainfo.postid = "";
            player.facebook.datainfo.videoid = "";
            var getVideoData = null;
            
            if(data && data.length > 0) {
                var getVideoCheck = false;
                $.each(data, function(key, value) {
                    if(player.facebook.datainfo.exceptlist[value] == undefined) {
                        $.ajax({
                            url:"https://graph.facebook.com/v2.10/" + value,
                            timeout:5000,
                            async:false,
                            data:{
                                //access_token:loginInfo.fatoken,
                                access_token:facebookTokenId,
                                fields:"live_status,status,title"
                            },
                            success:function(datas) {
                                if(sub.debug) console.log("api facebookapi videolist", datas);
                                if(datas && datas.live_status && datas.live_status == "LIVE") {
                                    getVideoData = datas;
                                    getVideoCheck = true;
                                    if(player.facebook.datainfo.connect == false || player.facebook.datainfo.postid == "") {
                                        player.facebook.datainfo.connect = true;
                                        player.facebook.datainfo.postid = datas.id;
                                        player.facebook.datainfo.videoid = value;
                                        player.facebook.datainfo.title = datas.title;
                                    }
                                }
                                else {
                                    player.facebook.datainfo.exceptlist[value] = "except";
                                }
                            }
                        });
                    }
                    
                    if(getVideoCheck == true) {
                        return false;
                    }
                });
            }
            
            replace.api.facebookrun(getVideoData);
        },
        facebookrun: function(data) {
            var getData = {
                result:false,
                connect:player.facebook.datainfo.connect,
                postid:player.facebook.datainfo.postid,
                videoid:player.facebook.datainfo.videoid,
                title:player.facebook.datainfo.title,
                data:data
            }
            
            var getPrevData = JSON.stringify(getData);
            if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                socket.emit("apisave",{
                    id:player.facebook.datainfo.id,
                    type:"facebook",
                    data:player.facebook.prevdata.broad != getPrevData ? getData : false
                });
            }
            
            player.facebook.prevdata.broad = getPrevData;
            replace.api.facebookData(getData);
            
            apiData.facebook.check = true;
            apiData.facebook.reset = true;
            clearTimeout(apiData.facebook.interval);
        },
        facebookData: function(data) {
            if(sub.debug) console.log("api facebookData", data);
            apiData.facebook.result = data.result;
            
            if(data && data.data && data.data.live_status && data.data.live_status == "LIVE") {
                player.facebook.datainfo.connect = data.connect;
                player.facebook.datainfo.postid = data.postid;
                player.facebook.datainfo.videoid = data.videoid;
                player.facebook.datainfo.title = data.title;
            }
            else {
                player.facebook.datainfo.connect = false;
                player.facebook.datainfo.postid = "";
                player.facebook.datainfo.videoid = "";
                player.facebook.datainfo.title = "";
            }
        },
        facebookchat: function() {
            if(player.facebook.datainfo.postid != "") {
                FB.api(
                    "/" + player.facebook.datainfo.postid + "/comments/?order=reverse_chronological&fields=id,message,created_time,from" + (player.facebook.datainfo.time != "" ? "&since=" + player.facebook.datainfo.time : ""),
                    function(data) {
                        if(sub.debug) console.log("api facebookapi chat success", player.facebook.datainfo.time, data);
                        
                        var getData = {
                            result:false,
                            data: {
                                //lastmsg:"",
                                time: "",
                                items:[]
                            }
                        }

                        if(data && data.data && data.data.length > 0) {
                            var getComment = [];
                            $.each(data.data.reverse(), function(key, value) {
                                if(value.message && value.message != "") {
                                    var getChatTime = value["created_time"].replace(/-/g,"/").replace(/[TZ]/g," ").split("+")[0];
                                    player.facebook.datainfo.time = value["created_time"];
                                    var getFromId = value.from != undefined ? value.from.id : value.id;
                                    var getFromName = value.from != undefined ? value.from.name : value.id;
                                    if(player.facebook.datainfo.profileimg[getFromId] == undefined) {
                                        player.facebook.datainfo.profileimg[getFromId] = "";
                                        FB.api(
                                            "/" + getFromId + "/picture?type=small",
                                            function(datas) {
                                                if(datas && datas.data && datas.data.url) {
                                                    player.facebook.datainfo.profileimg[getFromId] = datas.data.url;
                                                }
                                            },
                                            {access_token: loginInfo.fatoken}
                                        );
                                    }
                                    
                                    getComment.push({
                                        time:getChatTime,
                                        profile:player.facebook.datainfo.profileimg[getFromId],
                                        id:getFromId,
                                        name:getFromName,
                                        message:value.message
                                    });
                                }
                            });
                            
                            if(getComment.length > 0) {
                                getData.data.items = getComment;
                                //getData.data.lastmsg = player.facebook.datainfo.lastmsg;
                                getData.data.time = player.facebook.datainfo.time
                                getData.result = true;
                            }
                        }
                        
                        var getPrevData = JSON.stringify(getData);
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.facebook.datainfo.id,
                                type:"facebookchat",
                                data:player.facebook.prevdata.chat != getPrevData ? getData : false
                            });
                        }
                        
                        player.facebook.prevdata.chat = getPrevData;
                        replace.api.facebookchatData(getData);
                        
                        apiData.facebookchat.check = true;
                        apiData.facebookchat.reset = true;
                        clearTimeout(apiData.facebookchat.interval);
                    },
                    {access_token: loginInfo.fatoken}
                );
            }
        },
        facebookchatData: function(data) {
            if(sub.debug) console.log("api facebookchatData", data);
            apiData.facebookchat.result = data.result;
            
            //결과
            if(data && data.data && data.result == true) {
                // if(data.data.lastmsg && data.data.lastmsg.length > 0) {
                    // player.facebook.datainfo.lastmsg = data.data.lastmsg;
                // }
                if(data.data.time && data.data.time != "") {
                    player.facebook.datainfo.time = data.data.time;
                }
            }
            
            if(player.facebook.datainfo.connectfirst == false && data.data.items && data.data.items.length > 0) {
                sub[subType].msgf(data.data.items);
            }
            player.facebook.datainfo.connectfirst = false;
        },
        //TODO 골드라이브
        goldlive: function() {
            
            if(player.goldlive.datainfo.id != "") {
                $.ajax({
                    url:"lib/broadinfo.php",
                    dataType:"json",
                    data:{
                        type:"goldlivestats",
                        id:player.goldlive.datainfo.id,
                        idtype:loginInfo.gdinfo,
                        email:loginInfo.id,
                        idx:idxNum
                    },
                    dataType:"json",
                    timeout:5000,
                    cache: false,
                    // headers: {
                        // 'Cache-Control': 'max-age=60'
                    // },
                    success: function(data) {
                        if(sub.debug) console.log("api goldlive success", data);
                        
                        var getPrevData = JSON.stringify(data);
                        
                        if(apiSocketUse == true && socket != undefined && socket.connected == true) {
                            socket.emit("apisave",{
                                id:player.goldlive.datainfo.id,
                                type:"goldlive",
                                data:player.goldlive.prevdata.broad != getPrevData ? data : false
                            });
                        }
                        
                        player.goldlive.prevdata.broad = getPrevData;
                        replace.api.goldliveData(data);
                        
                        apiData.goldlive.result = false;
                        if(data && data.result) {
                            apiData.goldlive.result = data.result;
                        }
                        apiData.goldlive.check = true;
                        apiData.goldlive.reset = true;
                        clearTimeout(apiData.goldlive.interval);
                    },
                    error: function(data, status, error) {
                        if(sub.debug) console.log("api goldlive error", data, status);
                    }
                });
            }
        },
        goldliveData: function(data) {
            if(sub.debug) console.log("api goldliveData", data);
            if(data && data.result != undefined) {
                if(data.result == true) {
                    player.goldlive.datainfo.broad = data;
                    
                    if(player.setup.loadcheck == true && player.goldlive.datainfo.connect == false) {
                        player.goldlive.datainfo.connect = true;
                        player.goldlive.load("load");
                    }
                    
                    if(data && data.info && data.info.rslt_set) {
                        player.goldlive.datainfo.view = data.info.rslt_set.viewer_cnt;
                        player.goldlive.datainfo.up = data.info.rslt_set.recommend_cnt;
                        player.goldlive.datainfo.sub = data.info.rslt_set.bj_favorite_cnt;
                        
                        if(subType == "goal") {
                            if(player.goldlive.datainfo.type == "gdview") sub.goal.add(player.goldlive.datainfo.view);
                            else if(player.goldlive.datainfo.type == "gdup") sub.goal.add(player.goldlive.datainfo.up);
                            else if(player.goldlive.datainfo.type == "gdsub") sub.goal.add(player.goldlive.datainfo.sub);
                        }
                    }
                    
                }
                player.goldlive.datainfo.connect = data.result;
            }
        }
    },
    logrun: function(type,log) {
        if(debugLog == "log") {
            $.ajax({
                type:"GET",
                url:logUrl + "lib/getlog.php",
                data:{
                    type:type,
                    log:log
                }
            });
        }
    },
    url: function(str) {
        var getStr = str;
        if(getStr.indexOf("afreeca.dothome") > -1) {
            getStr =  fileUrl + "default/" + getStr.split("/").pop();
        }
        return getStr;
    },
    money: {
        init: function() {
            $.ajax({
                url:"lib/exchange.php?type=load",
                timeout:5000,
                success: function(data) {
                    if(sub.debug) console.log(data);
                    if(data && data.rates != undefined) {
                        fx.base = data.base;
                        fx.rates = data.rates;
                    }
                }
            });
        },
        convert: function(money,from,to) {
            if(to == "" || to == undefined) to = "KRW";
            var getType = "";
            var getInt = 0;
            
            try{
                if(from != undefined) {
                    if(from != to) var getMoney = fx.convert(money.toString().replace(/[^0-9.]/g,""), { from:from, to:to });
                    else var getMoney = money.toString().replace(/[^0-9.]/g,"");
                }
                else {
                    var getMoney = money.toString().replace(/[^0-9.]/g,"");
                }
            }
            catch(error) {
                var getMoney = "";
            }
            
            if(sub.debug) console.log("환율 변환", money,from,to,getMoney);
            if(getMoney == undefined || getMoney == null || getMoney == "" || isNaN(getMoney)) getMoney = money;
            else {
                //100원단위 버림
                var getChange = Math.floor(getMoney.toString().split(".")[0]/100) * 100;
                getInt = getChange;
                if(getChange > 99999) getType = "type07";
                else if(getChange > 49999) getType = "type06";
                else if(getChange > 19999) getType = "type05";
                else if(getChange > 9999) getType = "type04";
                else if(getChange > 4999) getType = "type03";
                else if(getChange > 1999) getType = "type02";
                //getMoney =  getChange.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "원";
                getMoney =  getChange.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            }
            return [getMoney, getType, getInt, to];
        }
    },
    lasttime: {
        start: false,
        time: 0,
        check: function(type) {
            doTimeout("lasttime_check", function() {
                //현재 시간 저장
                if(sub.debug) console.log("lasttime check");
                if(player.afreecatv.datainfo.connect == true || player.youtube.datainfo.connect == true || player.twitch.datainfo.connect == true || player.kakaotv.datainfo.connect == true || player.navertv.datainfo.connect == true || player.facebook.datainfo.connect == true) {
                    replace.lasttime.start = true;
                    var getTime = new Date().getTime();
                    setCookie("lasttime_" + subType + "_" + subPage,getTime,365);
                    replace.lasttime.time = getTime;
                    
                    if(socket != undefined && socket.connected == true) {
                        //socket.emit("nstatusdata", { idx:realIdx, type:"lasttime", statustype:"save", lasttime:getTime });
                        socket.emit("statsdata", { idx:realIdx, type:subType, sub:subPage, stype:"lasttime", ptype:"", data:{lasttime:getTime} });
                    }
                }
                else if(replace.lasttime.start == true){
                    replace.lasttime.start = false;
                }
                replace.lasttime.check(false);
            }, (1000 * 60 * 5) + randomRange(0, 5000));
        }
    },
    video: {
        url: function(text) {
            var getText = text;
            var getUrl = getText.match(urlRegex);
            var getVideo = "";
            $.each(getUrl, function(key, value) {
                var getLink = value.replace(KoRegex,"");
                if(key == 0) getVideo = getLink;
                getText = getText.replace(getLink, "");
            });
            
            if(sub.debug) console.log("video replace", text ,getText, getVideo);
            return [getText, $.trim(getVideo)]; 
        },
        check: function(data) {
            if(pageType == "setup") {
                var loadData = sub.alert.loaddata;
            }
            else {
                var loadData = sub.alert.data;
            }
            
            if(sub.debug) console.log("video check", data, loadData, data.chat);
            var getVideo = {};
            
            if(data.chat != "") {
                //if((loadData.videoafreecatv != undefined && loadData.videoafreecatv == true) || (loadData.videotwitch != undefined && loadData.videotwitch == true) || (loadData.videoyoutube != undefined && loadData.videoyoutube == true) || (loadData.videokakaotv != undefined && loadData.videokakaotv == true)) {
                if((loadData.videotwitch != undefined && loadData.videotwitch == true) || (loadData.videoyoutube != undefined && loadData.videoyoutube == true)) {
                    
                    var videoCheck = false;
                    //아프리카
                    //트위치
                    // else if(loadData.videotwitch != undefined && loadData.videotwitch == true && (data.chat.indexOf("clips.twitch.tv/") > -1 || data.chat.indexOf("tgd.kr/clips/") > -1)) {
                        // getVideo.type = "twitch";
                        // videoCheck = true;
                        // if(data.chat.indexOf("https://clips.twitch.tv/") == -1) {
                            // data.chat = data.chat.replace("clips.twitch.tv/", "https://clips.twitch.tv/");
                        // }
                        // if(data.chat.indexOf("https://tgd.kr/clips/") == -1) {
                            // data.chat = data.chat.replace("tgd.kr/clips/", "https://tgd.kr/clips/");
                        // }
                    // }
                    if(loadData.videotwitch != undefined && loadData.videotwitch == true && data.chat.indexOf("clips.twitch.tv/") > -1) {
                        getVideo.type = "twitch";
                        videoCheck = true;
                        if(data.chat.indexOf("https://clips.twitch.tv/") == -1) {
                            data.chat = data.chat.replace("clips.twitch.tv/", "https://clips.twitch.tv/");
                        }
                    }
                    //유튜브
                    else if(loadData.videoyoutube != undefined && loadData.videoyoutube == true && (data.chat.indexOf("www.youtube.com/watch?v=") > -1 || data.chat.indexOf("youtu.be/") > -1 || data.chat.indexOf("www.youtube.com/embed/") > -1)) {
                        getVideo.type = "youtube";
                        videoCheck = true;
                        if(data.chat.indexOf("https://www.youtube.com/watch?v=") == -1) {
                            data.chat = data.chat.replace("www.youtube.com/watch?v=", "https://www.youtube.com/watch?v=");
                        }
                        if(data.chat.indexOf("https://youtu.be/") == -1) {
                            data.chat = data.chat.replace("youtu.be/", "https://youtu.be/");
                        }
                        if(data.chat.indexOf("https://www.youtube.com/embed/") == -1) {
                            data.chat = data.chat.replace("www.youtube.com/embed/", "https://www.youtube.com/embed/");
                        }
                    }
                    //아프리카
                    // else if(loadData.videoafreecatv != undefined && loadData.videoafreecatv == true && (data.chat.indexOf("vod.afreecatv.com/") > -1 || data.chat.indexOf("v.afree.ca/") > -1)) {
                        // getVideo.type = "afreecatv";
                        // videoCheck = true;
                        // if(data.chat.indexOf("http://vod.afreecatv.com/") == -1) {
                            // data.chat = data.chat.replace("vod.afreecatv.com/", "http://vod.afreecatv.com/");
                        // }
                        // if(data.chat.indexOf("http://v.afree.ca/") == -1) {
                            // data.chat = data.chat.replace("v.afree.ca/", "http://v.afree.ca/");
                        // }
                    // }
                    //카카오
                    // else if(loadData.videokakaotv != undefined && loadData.videokakaotv == true && (data.chat.indexOf("tv.kakao.com/v/") > -1 || (data.chat.indexOf("tv.kakao.com/channel/") > -1 && data.chat.indexOf("/cliplink/") > -1))) {
                        // getVideo.type = "kakaotv";
                        // videoCheck = true;
                        // if(data.chat.indexOf("http://tv.kakao.com/v/") == -1) {
                            // data.chat = data.chat.replace("tv.kakao.com/v", "http://tv.kakao.com/v/");
                        // }
                        // if(data.chat.indexOf("http://tv.kakao.com/channel/") == -1) {
                            // data.chat = data.chat.replace("tv.kakao.com/channel/", "http://tv.kakao.com/channel/");
                        // }
                    // }
                    
                    if(videoCheck == true) {
                        var getVideoUrl = replace.video.url(data.chat);
                        if(getVideoUrl[1] != "") {
                            if(getVideo.type == "twitch") {
                                data.chat = getVideoUrl[0] + "<br><span class='video_text'>[<span class='icon_twitch'></span><span class='nick'>트위치 동영상</span>]</span>";
                            }
                            else if(getVideo.type == "youtube") {
                                data.chat = getVideoUrl[0] + "<br><span class='video_text'>[<span class='icon_youtube'></span><span class='nick'>유튜브 동영상</span>]</span>";
                            }
                            // else if(getVideo.type == "afreecatv") {
                                // data.chat = getVideoUrl[0] + "<br><span class='video_text'>[<span class='icon_afreecatv'></span><span class='nick'>아프리카 동영상</span>]</span>";
                            // }
                            // else if(getVideo.type == "kakaotv") {
                                // data.chat = getVideoUrl[0] + "<br><span class='video_text'>[<span class='icon_kakaotv'></span><span class='nick'>카카오TV 동영상</span>]</span>";
                            // }
                            getVideo.url = getVideoUrl[1];
                        }
                    }
                }
            }
            
            return getVideo;
        },
        media: function(target, data) {
            if(sub.debug) console.log("video media", target, data);
            var getVideo = data.data.video;
            var getMediaData = { type:getVideo.type, src:getVideo.url, alert:data, video:{}, start:0 };
            var getVideoId = "";
            //TODO 아프리카 방식 m3u8 로 바뀜 다시 확인
            
            if(getVideo.type == "youtube") {
                if(getVideo.url.indexOf("/watch?v=") > -1) {
                    getVideoId = getVideo.url.split("v=")[1];
                }
                else if(getVideo.url.indexOf("youtu.be/") > -1 || getVideo.url.indexOf("youtube.com/embed/") > -1) {
                    getVideoId = getVideo.url.split("/").pop();
                }
            }
            else if(getVideo.type == "twitch") {
                if(getVideo.url.indexOf("clips.twitch.tv") > -1) {
                    getVideoId = getVideo.url.split("clips.twitch.tv/")[1];
                }
            }
            else if(getVideo.type == "afreecatv") {
                if(getVideo.url.indexOf("vod.afreecatv.com") > -1) {
                    getVideoId = getVideo.url.split("vod.afreecatv.com/PLAYER/STATION/")[1];
                }
                else if(getVideo.url.indexOf("v.afree.ca") > -1) {
                    getVideoId = getVideo.url.split("v.afree.ca/ST/")[1];
                }
            }
            else if(getVideo.type == "kakaotv") {
                if(getVideo.url.indexOf("tv.kakao.com/v") > -1) {
                    getVideoId = getVideo.url.split("tv.kakao.com/v/")[1];
                }
                else if(getVideo.url.indexOf("tv.kakao.com/channel") > -1) {
                    getVideoId = getVideo.url.split("tv.kakao.com/channel/")[1];
                }
            }
            
            if(getVideoId != "") {
                if(getVideoId !== "") {
                    getVideoId = getVideoId.split("#")[0];
                    getVideoId = getVideoId.split("?")[0];
                }
                
                if(getVideo.url.indexOf("?t=") > -1 || getVideo.url.indexOf("?start=") > -1 || getVideo.url.indexOf("&t=") > -1 || getVideo.url.indexOf("&start=") > -1) {
                    var getStartTime = getVideo.url.match(/[t|start]=([^&]*)/);
                    console.log("video load start", getStartTime[1]);
                    if(getStartTime.length > 1 && getStartTime[1] !== "") {
                        getMediaData.start = getStartTime[1];
                        var getStartMin = 0;
                        if(getStartTime[1].indexOf("m") > -1) {
                            getStartMin = getStartTime[1].split("m")[0];
                            if(getStartMin !== "" && !isNaN(getStartMin)) {
                                getStartMin = parseInt(getStartMin, 10) * 60;
                            }
                        }
                        getMediaData.start = parseInt(getMediaData.start.replace("s", ""), 10) + getStartMin;
                    }
                }
                $.ajax({
                    type:"GET",
                    url:"lib/videocheck.php",
                    data:{
                        type:getVideo.type,
                        id:getVideoId
                    },
                    timeout:5000,
                    dataType:"json",
                    success: function(datas) {
                        if(datas && datas.data) {
                            getMediaData.video = datas;
                            if(subType == "alertlist") {
                                sub.alertlist.video.load(target, getMediaData);
                            }
                        }
                    }
                });
            }
        }
    },
    timestrconvert: function(date) {
        var getTimeSec = (new Date().getTime() / 1000) - (Date.parse(date).getTime() / 1000);
        
        var getStr = date;
        if(getTimeSec < 60) {
            getStr = "방금";
        }
        else if(getTimeSec >= 60 && getTimeSec < 3600) {
            getStr = Math.floor(getTimeSec/60) + "분 전";
        }
        else if(getTimeSec >= 3600 && getTimeSec < 86400) {
            getStr = Math.floor(getTimeSec/3600) + "시간 전";
        }
        else if(getTimeSec >= 86400 && getTimeSec < 2419200) {
            getStr = Math.floor(getTimeSec/86400) + "일 전";
        }
        return getStr;
    },
    uptime: function(time) {
        var getStartDate = new Date(time);
        var getCurrentDate = new Date();
        var getUptime = (getCurrentDate - getStartDate) / 1000;
        
        var getUptimeDay = Math.floor(getUptime/86400);
        var getUptimeHour = Math.floor((getUptime%86400)/3600);
        var getUptimeMin = Math.floor(((getUptime%86400)%3600)/60);
        var getUptimeSec = Math.floor((getUptime%86400)%3600)%60;
        
        var getUptimeStr = [];
        if(getUptimeDay > 0) {
            getUptimeStr.push((getUptimeDay < 10 ? "0" : "") + getUptimeDay + "일");
        }
        if(getUptimeHour > 0) {
            getUptimeStr.push((getUptimeHour < 10 ? "0" : "") + getUptimeHour + "시간");
        }
        if(getUptimeMin > 0) {
            getUptimeStr.push((getUptimeMin < 10 ? "0" : "") + getUptimeMin + "분");
        }
        if(getUptimeSec > 0) {
            getUptimeStr.push((getUptimeSec < 10 ? "0" : "") + getUptimeSec + "초");
        }
        return getUptimeStr.join(" ");
    }
}

function ajaxSendMsg(data) {
    $.each(serverList,function(key, value) {
        if(value != "") {
            $.ajax({
                url:"http://" + value + ":" + webPort,
                dataType:"json",
                data:data
            });
        }
    });
}


//방송 설정 값
var socket = null;
var csocket = null;
var apiData = {
    broad: { interval:null, reset:true, check:true, time:0, result:false, rtime:15000 },
    indexes: { interval:null, reset:true, check:true, time:0, rtime:15000 },
    users: { interval:null, reset:true, check:true, time:0, rtime:15000 },
    viewer: { interval:null, reset:true, check:true, time:0, rtime:15000 },
    youtube: { interval:null, reset:true, check:true, time:0, result:false, rtime:20000 },
    youtubechat: { interval:null, reset:true, check:true, time:0, result:false, rtime:5000 },
    youtubealert: { interval:null, reset:true, check:true, time:0, result:false, rtime:5000 },
    youtubeinfo: { interval:null, reset:true, check:true, time:0, result:false, rtime:20000 },
    youtubesub: { interval:null, reset:true, check:true, time:0, result:false, rtime:15000 },
    youtubespon: { interval:null, reset:true, check:true, time:0, result:false, rtime:15000 },
    kakaotv: { interval:null, reset:true, check:true, time:0, result:false, rtime:20000 },
    kakaotvinfo: { interval:null, reset:true, check:true, time:0, result:false, rtime:20000 },
    facebook: { interval:null, reset:true, check:true, time:0, result:false, rtime:20000 },
    facebookchat: { interval:null, reset:true, check:true, time:0, result:false, rtime:5000 },
    goldlive: { interval:null, reset:true, check:true, time:0, result:false, rtime:20000 }
};
var apiCheck = false;
var broadSaveData = [];

//카카오tv 이모티콘 목록
var kakaotvEmoticon = {
    "2200001":80,
    "2200002":80,
    "2212206":40,
    "2212219":40
}
var kakaotvEmoticonList = {};

//채팅 저장 구분 아이콘
var chatLogDataType = {
    afreecatv:"[A]",
    twitch:"[T]",
    youtube:"[Y]",
    kakaotv:"[K]"
};
var chatAdminList = ["notice", "police", "bj", "mng", "admin", "staff", "global_mod", "broadcaster", "owner", "moderator", "pd", "ad"];
var chatBjList = ["bj", "broadcaster", "owner", "pd"];
var chatLogData = [];

//트위치 채팅 값
var chatTwitchData = {
    badgecheck:true,
    badge:{},
    grade: {
        // broadcaster:"https://static-cdn.jtvnw.net/badges/v1/5527c58c-fb7d-422d-b71b-f309dcb85cc1/1",
        // staff:"https://static-cdn.jtvnw.net/badges/v1/d97c37bd-a6f5-4c38-8f57-4e4bef88af34/1",
        // admin:"https://static-cdn.jtvnw.net/badges/v1/9ef7e029-4cdf-4d4d-a0d5-e2b3fb2583fe/1",
        // global_mod:"https://static-cdn.jtvnw.net/badges/v1/9384c43e-4ce7-4e94-b2a1-b93656896eba/1",
        // moderator:"https://static-cdn.jtvnw.net/badges/v1/3267646d-33f0-4b17-b3df-f923a41db1d0/1",
        // partner:"https://static-cdn.jtvnw.net/badges/v1/d12a2e27-16f6-41d0-ab77-b780518f00a3/1",
        // premium:"https://static-cdn.jtvnw.net/badges/v1/a1dd5073-19c3-4911-8cb4-c464a7bc1510/1",
        // turbo:"https://static-cdn.jtvnw.net/badges/v1/bd444ec6-8f34-4bf9-91f4-af1e3428d80f/1",
        // subscriber:"https://static-cdn.jtvnw.net/badges/v1/19dd8673-124d-4f44-830c-b0f4f9d78635/1",
        // bits:"https://static-cdn.jtvnw.net/badges/v1/09d93036-e7ce-431c-9a9e-7044297133f2/1"
        broadcaster:"http://static-cdn.jtvnw.net/badges/v1/5527c58c-fb7d-422d-b71b-f309dcb85cc1/1",
        staff:"http://static-cdn.jtvnw.net/badges/v1/d97c37bd-a6f5-4c38-8f57-4e4bef88af34/1",
        admin:"http://static-cdn.jtvnw.net/badges/v1/9ef7e029-4cdf-4d4d-a0d5-e2b3fb2583fe/1",
        global_mod:"http://static-cdn.jtvnw.net/badges/v1/9384c43e-4ce7-4e94-b2a1-b93656896eba/1",
        moderator:"http://static-cdn.jtvnw.net/badges/v1/3267646d-33f0-4b17-b3df-f923a41db1d0/1",
        partner:"http://static-cdn.jtvnw.net/badges/v1/d12a2e27-16f6-41d0-ab77-b780518f00a3/1",
        premium:"http://static-cdn.jtvnw.net/badges/v1/a1dd5073-19c3-4911-8cb4-c464a7bc1510/1",
        turbo:"http://static-cdn.jtvnw.net/badges/v1/bd444ec6-8f34-4bf9-91f4-af1e3428d80f/1",
        subscriber:"http://static-cdn.jtvnw.net/badges/v1/19dd8673-124d-4f44-830c-b0f4f9d78635/1",
        bits:"http://static-cdn.jtvnw.net/badges/v1/09d93036-e7ce-431c-9a9e-7044297133f2/1",
        "clip-champ":"https://static-cdn.jtvnw.net/badges/v1/f38976e0-ffc9-11e7-86d6-7f98b26a9d79/1",
        "bits-charity":"https://static-cdn.jtvnw.net/badges/v1/b561fb2d-2ce5-4eae-a4ff-d01eea0199de/1",
        "bits-leader":"https://static-cdn.jtvnw.net/badges/v1/8cd8857e-0c6e-11e8-817e-43b3708f4307/1",
        "sub-gifter":"https://static-cdn.jtvnw.net/badges/v1/4592e9ea-b4ca-4948-93b8-37ac198c0433/1",
        vip:"https://static-cdn.jtvnw.net/badges/v1/b817aba4-fad8-49e2-b88a-7cc744dfa6ec/1"
    },
    "bits-leader": {
        "1": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/8cd8857e-0c6e-11e8-817e-43b3708f4307/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/8cd8857e-0c6e-11e8-817e-43b3708f4307/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/8cd8857e-0c6e-11e8-817e-43b3708f4307/3",
          "description": " ",
          "title": "Bits Leader 1",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "2": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/8d374460-0c6e-11e8-8edf-db32960c541d/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/8d374460-0c6e-11e8-8edf-db32960c541d/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/8d374460-0c6e-11e8-8edf-db32960c541d/3",
          "description": " ",
          "title": "Bits Leader 2",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "3": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/8d8f58a8-0c6e-11e8-b2b0-9b39baa15cdd/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/8d8f58a8-0c6e-11e8-b2b0-9b39baa15cdd/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/8d8f58a8-0c6e-11e8-b2b0-9b39baa15cdd/3",
          "description": " ",
          "title": "Bits Leader 3",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        }
    },
    bits: {
        "1": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2f475b59411c/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2f475b59411c/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/73b5c3fb-24f9-4a82-a852-2f475b59411c/3",
          "description": " ",
          "title": "cheer 1",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "100": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/09d93036-e7ce-431c-9a9e-7044297133f2/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/09d93036-e7ce-431c-9a9e-7044297133f2/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/09d93036-e7ce-431c-9a9e-7044297133f2/3",
          "description": " ",
          "title": "cheer 100",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "1000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/0d85a29e-79ad-4c63-a285-3acd2c66f2ba/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/0d85a29e-79ad-4c63-a285-3acd2c66f2ba/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/0d85a29e-79ad-4c63-a285-3acd2c66f2ba/3",
          "description": " ",
          "title": "cheer 1000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "10000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/68af213b-a771-4124-b6e3-9bb6d98aa732/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/68af213b-a771-4124-b6e3-9bb6d98aa732/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/68af213b-a771-4124-b6e3-9bb6d98aa732/3",
          "description": " ",
          "title": "cheer 10000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "100000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/96f0540f-aa63-49e1-a8b3-259ece3bd098/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/96f0540f-aa63-49e1-a8b3-259ece3bd098/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/96f0540f-aa63-49e1-a8b3-259ece3bd098/3",
          "description": " ",
          "title": "cheer 100000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "1000000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/494d1c8e-c3b2-4d88-8528-baff57c9bd3f/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/494d1c8e-c3b2-4d88-8528-baff57c9bd3f/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/494d1c8e-c3b2-4d88-8528-baff57c9bd3f/3",
          "description": " ",
          "title": "cheer 1000000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "1250000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/ce217209-4615-4bf8-81e3-57d06b8b9dc7/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/ce217209-4615-4bf8-81e3-57d06b8b9dc7/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/ce217209-4615-4bf8-81e3-57d06b8b9dc7/3",
          "description": " ",
          "title": "cheer 1250000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "1500000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/c4eba5b4-17a7-40a1-a668-bc1972c1e24d/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/c4eba5b4-17a7-40a1-a668-bc1972c1e24d/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/c4eba5b4-17a7-40a1-a668-bc1972c1e24d/3",
          "description": " ",
          "title": "cheer 1500000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "1750000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/183f1fd8-aaf4-450c-a413-e53f839f0f82/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/183f1fd8-aaf4-450c-a413-e53f839f0f82/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/183f1fd8-aaf4-450c-a413-e53f839f0f82/3",
          "description": " ",
          "title": "cheer 1750000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "200000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/4a0b90c4-e4ef-407f-84fe-36b14aebdbb6/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/4a0b90c4-e4ef-407f-84fe-36b14aebdbb6/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/4a0b90c4-e4ef-407f-84fe-36b14aebdbb6/3",
          "description": " ",
          "title": "cheer 200000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "2000000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/7ea89c53-1a3b-45f9-9223-d97ae19089f2/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/7ea89c53-1a3b-45f9-9223-d97ae19089f2/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/7ea89c53-1a3b-45f9-9223-d97ae19089f2/3",
          "description": " ",
          "title": "cheer 2000000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "25000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/64ca5920-c663-4bd8-bfb1-751b4caea2dd/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/64ca5920-c663-4bd8-bfb1-751b4caea2dd/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/64ca5920-c663-4bd8-bfb1-751b4caea2dd/3",
          "description": " ",
          "title": "cheer 25000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "2500000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/cf061daf-d571-4811-bcc2-c55c8792bc8f/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/cf061daf-d571-4811-bcc2-c55c8792bc8f/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/cf061daf-d571-4811-bcc2-c55c8792bc8f/3",
          "description": " ",
          "title": "cheer 2500000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "300000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/ac13372d-2e94-41d1-ae11-ecd677f69bb6/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/ac13372d-2e94-41d1-ae11-ecd677f69bb6/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/ac13372d-2e94-41d1-ae11-ecd677f69bb6/3",
          "description": " ",
          "title": "cheer 300000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "3000000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/5671797f-5e9f-478c-a2b5-eb086c8928cf/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/5671797f-5e9f-478c-a2b5-eb086c8928cf/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/5671797f-5e9f-478c-a2b5-eb086c8928cf/3",
          "description": " ",
          "title": "cheer 3000000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "3500000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/c3d218f5-1e45-419d-9c11-033a1ae54d3a/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/c3d218f5-1e45-419d-9c11-033a1ae54d3a/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/c3d218f5-1e45-419d-9c11-033a1ae54d3a/3",
          "description": " ",
          "title": "cheer 3500000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "400000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/a8f393af-76e6-4aa2-9dd0-7dcc1c34f036/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/a8f393af-76e6-4aa2-9dd0-7dcc1c34f036/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/a8f393af-76e6-4aa2-9dd0-7dcc1c34f036/3",
          "description": " ",
          "title": "cheer 400000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "4000000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/79fe642a-87f3-40b1-892e-a341747b6e08/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/79fe642a-87f3-40b1-892e-a341747b6e08/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/79fe642a-87f3-40b1-892e-a341747b6e08/3",
          "description": " ",
          "title": "cheer 4000000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "4500000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/736d4156-ac67-4256-a224-3e6e915436db/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/736d4156-ac67-4256-a224-3e6e915436db/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/736d4156-ac67-4256-a224-3e6e915436db/3",
          "description": " ",
          "title": "cheer 4500000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "5000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/57cd97fc-3e9e-4c6d-9d41-60147137234e/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/57cd97fc-3e9e-4c6d-9d41-60147137234e/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/57cd97fc-3e9e-4c6d-9d41-60147137234e/3",
          "description": " ",
          "title": "cheer 5000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "50000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/62310ba7-9916-4235-9eba-40110d67f85d/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/62310ba7-9916-4235-9eba-40110d67f85d/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/62310ba7-9916-4235-9eba-40110d67f85d/3",
          "description": " ",
          "title": "cheer 50000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "500000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/f6932b57-6a6e-4062-a770-dfbd9f4302e5/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/f6932b57-6a6e-4062-a770-dfbd9f4302e5/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/f6932b57-6a6e-4062-a770-dfbd9f4302e5/3",
          "description": " ",
          "title": "cheer 500000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "5000000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/3f085f85-8d15-4a03-a829-17fca7bf1bc2/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/3f085f85-8d15-4a03-a829-17fca7bf1bc2/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/3f085f85-8d15-4a03-a829-17fca7bf1bc2/3",
          "description": " ",
          "title": "cheer 5000000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "600000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/4d908059-f91c-4aef-9acb-634434f4c32e/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/4d908059-f91c-4aef-9acb-634434f4c32e/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/4d908059-f91c-4aef-9acb-634434f4c32e/3",
          "description": " ",
          "title": "cheer 600000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "700000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/a1d2a824-f216-4b9f-9642-3de8ed370957/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/a1d2a824-f216-4b9f-9642-3de8ed370957/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/a1d2a824-f216-4b9f-9642-3de8ed370957/3",
          "description": " ",
          "title": "cheer 700000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "75000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/ce491fa4-b24f-4f3b-b6ff-44b080202792/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/ce491fa4-b24f-4f3b-b6ff-44b080202792/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/ce491fa4-b24f-4f3b-b6ff-44b080202792/3",
          "description": " ",
          "title": "cheer 75000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "800000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/5ec2ee3e-5633-4c2a-8e77-77473fe409e6/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/5ec2ee3e-5633-4c2a-8e77-77473fe409e6/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/5ec2ee3e-5633-4c2a-8e77-77473fe409e6/3",
          "description": " ",
          "title": "cheer 800000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        },
        "900000": {
          "image_url_1x": "https://static-cdn.jtvnw.net/badges/v1/088c58c6-7c38-45ba-8f73-63ef24189b84/1",
          "image_url_2x": "https://static-cdn.jtvnw.net/badges/v1/088c58c6-7c38-45ba-8f73-63ef24189b84/2",
          "image_url_4x": "https://static-cdn.jtvnw.net/badges/v1/088c58c6-7c38-45ba-8f73-63ef24189b84/3",
          "description": " ",
          "title": "cheer 900000",
          "click_action": "visit_url",
          "click_url": "https://bits.twitch.tv"
        }
    },
    cheer:[
        [10000,"#f43021","red"],
        [5000,"#0099fe","blue"],
        [1000,"#1db2a5","green"],
        [100,"#9c3ee8","purple"],
        [1,"#979797","gray"]
    ],
    cheercheck:true,
    cheercustom:{}
}

//아프리카 이모티콘
var emoticonUrl = "http://www.afreecatv.com/images/chat/emoticon/small/";

var emoticonListDefault = {"/샤방/":"1","/윽/":"2","/휘파람/":"3","/짜증/":"4","/헉/":"5","/하이/":"6","/개좋아/":"7","/개도발/":"8","/개털림/":"9","/개감상/":"10","/개화나/":"11","/개이득/":"12","/개번쩍/":"13","/짱좋아/":"94","/피식/":"95","/헐/":"96","/감상중/":"97","/화나/":"98","/하하/":"99","/ㅠㅠ/":"100","/주작/":"14","/꿀잼/":"15","/업/":"16","/갑/":"17","/묻/":"18","/심쿵/":"19","/스겜/":"20","/추천/":"21","/인정/":"22","/사이다/":"23","/더럽/":"24","/극혐/":"25","/매너챗/":"26","/강퇴/":"27","/드루와/":"28","/아잉/":"29","/기겁/":"30","/우울/":"31","/쳇/":"32","/ㅋㅋ/":"33","/졸려/":"34","/최고/":"35","/엉엉/":"36","/후훗/":"37","/부끄/":"38","/제발/":"39","/덜덜/":"40","/좋아/":"41","/반함/":"42","/멘붕/":"43","/버럭/":"44","/우엑/":"45","/뽀뽀/":"46","/심각/":"47","/쥘쥘/":"48","/헤헤/":"50","/훌쩍/":"49","/코피/":"51","/철컹철컹/":"52","/섬뜩/":"53","/꺄/":"54","/굿/":"55","/글썽/":"56","/황당/":"57","/정색/":"58","/피곤/":"59","/사랑/":"60","/좌절/":"61","/사탕/":"62","/RIP/":"63","/건빵/":"64","/사과/":"65","/귤/":"93","/겁나좋군/":"66","/근육남/":"67","/박수/":"68","/소주/":"71","/짱/":"72","/꽃/":"73","/왕/":"74","/썰렁/":"75","/무지개/":"76","/태극기/":"77","/절교/":"78","/하트/":"79","/불/":"80","/별/":"81","/폭탄/":"82","/폭죽/":"83","/보석/":"84","/금/":"85","/돈/":"86","/맥주/":"87","/입술/":"88","/콜!/":"89","/번쩍/":"90","/19/":"91","/즐거워/":"92","/케이크/":"69","/약/":"70","/SK/":"baseball/1","/두산/":"baseball/2","/LG/":"baseball/3","/롯데/":"baseball/4","/삼성/":"baseball/5","/한화/":"baseball/6","/기아/":"baseball/7","/넥센/":"baseball/8","/NC/":"baseball/9","/KT/":"baseball/10","/SK마/":"baseball/11","/두산마/":"baseball/12","/LG마/":"baseball/13","/롯데마/":"baseball/14","/삼성마/":"baseball/15","/한화마/":"baseball/16","/기아마/":"baseball/17","/넥센마/":"baseball/18","/NC마/":"baseball/19","/KT마/":"baseball/20","/메가폰/":"baseball/21","/신문/":"baseball/22","/봉투/":"baseball/23","/확인요/":"gudok/S101","/미션/":"gudok/S102","/ㅇㅋ/":"gudok/S103","/티키타카/":"gudok/S104","/ㄱㄴㅇ/":"gudok/S105","/동의/":"gudok/S106","/굿밤/":"gudok/S107","/맴찢/":"gudok/S108","/나이따/":"gudok/S109","/ㄱㄱ/":"gudok/S110","/조오치/":"gudok/S111","/ㄴㅇㅂㅈ/":"gudok/S112","/데헷/":"gudok/S113","/런/":"gudok/S114","/각/":"gudok/S115","/실화/":"gudok/S116","/ㅇㅈ/":"gudok/S117","/ㅇㄱㄹㅇ/":"gudok/S118"};
var emoticonList = {"/샤방/":"http://www.afreecatv.com/images/chat/emoticon/small/1.png","/윽/":"http://www.afreecatv.com/images/chat/emoticon/small/2.png","/휘파람/":"http://www.afreecatv.com/images/chat/emoticon/small/3.png","/짜증/":"http://www.afreecatv.com/images/chat/emoticon/small/4.png","/헉/":"http://www.afreecatv.com/images/chat/emoticon/small/5.png","/하이/":"http://www.afreecatv.com/images/chat/emoticon/small/6.png","/개좋아/":"http://www.afreecatv.com/images/chat/emoticon/small/7.png","/개도발/":"http://www.afreecatv.com/images/chat/emoticon/small/8.png","/개털림/":"http://www.afreecatv.com/images/chat/emoticon/small/9.png","/개감상/":"http://www.afreecatv.com/images/chat/emoticon/small/10.png","/개화나/":"http://www.afreecatv.com/images/chat/emoticon/small/11.png","/개이득/":"http://www.afreecatv.com/images/chat/emoticon/small/12.png","/개번쩍/":"http://www.afreecatv.com/images/chat/emoticon/small/13.png","/짱좋아/":"http://www.afreecatv.com/images/chat/emoticon/small/94.png","/피식/":"http://www.afreecatv.com/images/chat/emoticon/small/95.png","/헐/":"http://www.afreecatv.com/images/chat/emoticon/small/96.png","/감상중/":"http://www.afreecatv.com/images/chat/emoticon/small/97.png","/화나/":"http://www.afreecatv.com/images/chat/emoticon/small/98.png","/하하/":"http://www.afreecatv.com/images/chat/emoticon/small/99.png","/ㅠㅠ/":"http://www.afreecatv.com/images/chat/emoticon/small/100.png","/주작/":"http://www.afreecatv.com/images/chat/emoticon/small/14.png","/꿀잼/":"http://www.afreecatv.com/images/chat/emoticon/small/15.png","/업/":"http://www.afreecatv.com/images/chat/emoticon/small/16.png","/갑/":"http://www.afreecatv.com/images/chat/emoticon/small/17.png","/묻/":"http://www.afreecatv.com/images/chat/emoticon/small/18.png","/심쿵/":"http://www.afreecatv.com/images/chat/emoticon/small/19.png","/스겜/":"http://www.afreecatv.com/images/chat/emoticon/small/20.png","/추천/":"http://www.afreecatv.com/images/chat/emoticon/small/21.png","/인정/":"http://www.afreecatv.com/images/chat/emoticon/small/22.png","/사이다/":"http://www.afreecatv.com/images/chat/emoticon/small/23.png","/더럽/":"http://www.afreecatv.com/images/chat/emoticon/small/24.png","/극혐/":"http://www.afreecatv.com/images/chat/emoticon/small/25.png","/매너챗/":"http://www.afreecatv.com/images/chat/emoticon/small/26.png","/강퇴/":"http://www.afreecatv.com/images/chat/emoticon/small/27.png","/드루와/":"http://www.afreecatv.com/images/chat/emoticon/small/28.png","/아잉/":"http://www.afreecatv.com/images/chat/emoticon/small/29.png","/기겁/":"http://www.afreecatv.com/images/chat/emoticon/small/30.png","/우울/":"http://www.afreecatv.com/images/chat/emoticon/small/31.png","/쳇/":"http://www.afreecatv.com/images/chat/emoticon/small/32.png","/ㅋㅋ/":"http://www.afreecatv.com/images/chat/emoticon/small/33.png","/졸려/":"http://www.afreecatv.com/images/chat/emoticon/small/34.png","/최고/":"http://www.afreecatv.com/images/chat/emoticon/small/35.png","/엉엉/":"http://www.afreecatv.com/images/chat/emoticon/small/36.png","/후훗/":"http://www.afreecatv.com/images/chat/emoticon/small/37.png","/부끄/":"http://www.afreecatv.com/images/chat/emoticon/small/38.png","/제발/":"http://www.afreecatv.com/images/chat/emoticon/small/39.png","/덜덜/":"http://www.afreecatv.com/images/chat/emoticon/small/40.png","/좋아/":"http://www.afreecatv.com/images/chat/emoticon/small/41.png","/반함/":"http://www.afreecatv.com/images/chat/emoticon/small/42.png","/멘붕/":"http://www.afreecatv.com/images/chat/emoticon/small/43.png","/버럭/":"http://www.afreecatv.com/images/chat/emoticon/small/44.png","/우엑/":"http://www.afreecatv.com/images/chat/emoticon/small/45.png","/뽀뽀/":"http://www.afreecatv.com/images/chat/emoticon/small/46.png","/심각/":"http://www.afreecatv.com/images/chat/emoticon/small/47.png","/쥘쥘/":"http://www.afreecatv.com/images/chat/emoticon/small/48.png","/헤헤/":"http://www.afreecatv.com/images/chat/emoticon/small/50.png","/훌쩍/":"http://www.afreecatv.com/images/chat/emoticon/small/49.png","/코피/":"http://www.afreecatv.com/images/chat/emoticon/small/51.png","/철컹철컹/":"http://www.afreecatv.com/images/chat/emoticon/small/52.png","/섬뜩/":"http://www.afreecatv.com/images/chat/emoticon/small/53.png","/꺄/":"http://www.afreecatv.com/images/chat/emoticon/small/54.png","/굿/":"http://www.afreecatv.com/images/chat/emoticon/small/55.png","/글썽/":"http://www.afreecatv.com/images/chat/emoticon/small/56.png","/황당/":"http://www.afreecatv.com/images/chat/emoticon/small/57.png","/정색/":"http://www.afreecatv.com/images/chat/emoticon/small/58.png","/피곤/":"http://www.afreecatv.com/images/chat/emoticon/small/59.png","/사랑/":"http://www.afreecatv.com/images/chat/emoticon/small/60.png","/좌절/":"http://www.afreecatv.com/images/chat/emoticon/small/61.png","/사탕/":"http://www.afreecatv.com/images/chat/emoticon/small/62.png","/RIP/":"http://www.afreecatv.com/images/chat/emoticon/small/63.png","/건빵/":"http://www.afreecatv.com/images/chat/emoticon/small/64.png","/사과/":"http://www.afreecatv.com/images/chat/emoticon/small/65.png","/귤/":"http://www.afreecatv.com/images/chat/emoticon/small/93.png","/겁나좋군/":"http://www.afreecatv.com/images/chat/emoticon/small/66.png","/근육남/":"http://www.afreecatv.com/images/chat/emoticon/small/67.png","/박수/":"http://www.afreecatv.com/images/chat/emoticon/small/68.png","/소주/":"http://www.afreecatv.com/images/chat/emoticon/small/71.png","/짱/":"http://www.afreecatv.com/images/chat/emoticon/small/72.png","/꽃/":"http://www.afreecatv.com/images/chat/emoticon/small/73.png","/왕/":"http://www.afreecatv.com/images/chat/emoticon/small/74.png","/썰렁/":"http://www.afreecatv.com/images/chat/emoticon/small/75.png","/무지개/":"http://www.afreecatv.com/images/chat/emoticon/small/76.png","/태극기/":"http://www.afreecatv.com/images/chat/emoticon/small/77.png","/절교/":"http://www.afreecatv.com/images/chat/emoticon/small/78.png","/하트/":"http://www.afreecatv.com/images/chat/emoticon/small/79.png","/불/":"http://www.afreecatv.com/images/chat/emoticon/small/80.png","/별/":"http://www.afreecatv.com/images/chat/emoticon/small/81.png","/폭탄/":"http://www.afreecatv.com/images/chat/emoticon/small/82.png","/폭죽/":"http://www.afreecatv.com/images/chat/emoticon/small/83.png","/보석/":"http://www.afreecatv.com/images/chat/emoticon/small/84.png","/금/":"http://www.afreecatv.com/images/chat/emoticon/small/85.png","/돈/":"http://www.afreecatv.com/images/chat/emoticon/small/86.png","/맥주/":"http://www.afreecatv.com/images/chat/emoticon/small/87.png","/입술/":"http://www.afreecatv.com/images/chat/emoticon/small/88.png","/콜!/":"http://www.afreecatv.com/images/chat/emoticon/small/89.png","/번쩍/":"http://www.afreecatv.com/images/chat/emoticon/small/90.png","/19/":"http://www.afreecatv.com/images/chat/emoticon/small/91.png","/즐거워/":"http://www.afreecatv.com/images/chat/emoticon/small/92.png","/케이크/":"http://www.afreecatv.com/images/chat/emoticon/small/69.png","/약/":"http://www.afreecatv.com/images/chat/emoticon/small/70.png","/SK/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/1.png","/두산/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/2.png","/LG/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/3.png","/롯데/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/4.png","/삼성/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/5.png","/한화/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/6.png","/기아/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/7.png","/넥센/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/8.png","/NC/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/9.png","/KT/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/10.png","/SK마/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/11.png","/두산마/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/12.png","/LG마/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/13.png","/롯데마/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/14.png","/삼성마/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/15.png","/한화마/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/16.png","/기아마/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/17.png","/넥센마/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/18.png","/NC마/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/19.png","/KT마/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/20.png","/메가폰/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/21.png","/신문/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/22.png","/봉투/":"http://www.afreecatv.com/images/chat/emoticon/small/baseball/23.png","/확인요/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S101.png","/미션/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S102.png","/ㅇㅋ/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S103.png","/티키타카/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S104.png","/ㄱㄴㅇ/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S105.png","/동의/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S106.png","/굿밤/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S107.png","/맴찢/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S108.png","/나이따/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S109.png","/ㄱㄱ/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S110.png","/조오치/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S111.png","/ㄴㅇㅂㅈ/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S112.png","/데헷/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S113.png","/런/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S114.png","/각/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S115.png","/실화/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S116.png","/ㅇㅈ/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S117.png","/ㅇㄱㄹㅇ/":"http://www.afreecatv.com/images/chat/emoticon/small/gudok/S118.png"};
var emoticonRegex = new RegExp("/(샤방|윽|휘파람|짜증|헉|하이|개좋아|개도발|개털림|개감상|개화나|개이득|개번쩍|짱좋아|피식|헐|감상중|화나|하하|ㅠㅠ|주작|꿀잼|업|갑|묻|심쿵|스겜|추천|인정|사이다|더럽|극혐|매너챗|강퇴|드루와|아잉|기겁|우울|쳇|ㅋㅋ|졸려|최고|엉엉|후훗|부끄|제발|덜덜|좋아|반함|멘붕|버럭|우엑|뽀뽀|심각|쥘쥘|헤헤|훌쩍|코피|철컹철컹|섬뜩|꺄|굿|글썽|황당|정색|피곤|사랑|좌절|사탕|RIP|건빵|사과|귤|겁나좋군|근육남|박수|소주|짱|꽃|왕|썰렁|무지개|태극기|절교|하트|불|별|폭탄|폭죽|보석|금|돈|맥주|입술|콜!|번쩍|19|즐거워|케이크|약|SK|두산|LG|롯데|삼성|한화|기아|넥센|NC|KT|SK마|두산마|LG마|롯데마|삼성마|한화마|기아마|넥센마|NC마|KT마|메가폰|신문|봉투|확인요|미션|ㅇㅋ|티키타카|ㄱㄴㅇ|동의|굿밤|맴찢|나이따|ㄱㄱ|조오치|ㄴㅇㅂㅈ|데헷|런|각|실화|ㅇㅈ|ㅇㄱㄹㅇ|)/", "g");

var iconUserList = {
    quick:'<img src="http://www.afreecatv.com/images/new_app/chat/ic_quick.gif" alt="퀵뷰 사용자" title="퀵뷰 사용자" class="ic">',
    fan:'<img src="http://www.afreecatv.com/images/new_app/chat/ic_fanclub.gif" alt="팬클럽" title="팬클럽" class="ic">',
    sup:'<img src="http://www.afreecatv.com/images/new_app/chat/ic_support.gif" alt="서포터" title="서포터" class="ic">',
    top:'<img src="http://www.afreecatv.com/images/new_app/chat/ic_hot.gif" alt="열혈팬" title="열혈팬" class="ic">',
    mng:'<img src="http://www.afreecatv.com/images/new_app/chat/ic_manager.gif" alt="매니저" title="매니저" class="ic">',
    bj:'<img src="http://www.afreecatv.com/images/new_app/chat/ic_bj.gif" alt="BJ" title="BJ" class="ic">',
    mb:'<img src="http://www.afreecatv.com/images/new_app/chat/ic_mobile.png" alt="모바일" title="모바일" class="ic">',
    pc:"",
    m:'<img src="http://www.afreecatv.com/images/new_app/chat/ic_mobile.png" alt="모바일" title="모바일" class="ic">',
    follow:'<img src="http://www.afreecatv.com/images/new_app/chat/ic_gudok.png" alt="구독자" title="구독자" class="ic">'
}

var iconChatList = {
    bj: { m:"img/afchat/ic_chat_bj_m.png", w:"img/afchat/ic_chat_bj_f.png" },
    mng: { m:"img/afchat/ic_chat_mng_m.png", w:"img/afchat/ic_chat_mng_f.png" },
    top: { m:"img/afchat/ic_chat_top_m.png", w:"img/afchat/ic_chat_top_f.png" },
    fan: { m:"img/afchat/ic_chat_fan_m.png", w:"img/afchat/ic_chat_fan_f.png" },
    follow: { m:"img/afchat/ic_chat_gudok_m.png", w:"img/afchat/ic_chat_gudok_f.png" },
    non: { m:"img/afchat/ic_chat_m.png", w:"img/afchat/ic_chat_f.png" }
}

var USERLEVEL_bak = {
    'ADMIN' : 0x01            // 관리자 (강퇴, 벙어리 대상이 될 수 없음) : 운영자
    , 'HIDDEN' : (0x01 << 1)     // 아이디 숨김 (사용자 목록에서 볼 수 없음) : 서버에서만 사용. 비트가 세팅되어 있으면  클라이언트에는 아예 보내지 않음.
    , 'BJ' : (0x01 << 2)     // BJ : 방장
    , 'DUMB' : (0x01 << 3)     // 벙어리 (채팅금지) : 벙어리 지정된 놈.
    , 'GUEST' : (0x01 << 4)     // 비회원 : 아이디 없는 놈. 서버에서만 사용하고 클라이언트에는 아예 안보냄.
    , 'FANCLUB' : (0x01 << 5)     // 팬클럽 회원
    , 'AUTOMANAGER' : (0x01 << 6)     // 자동 메니저로 지정된 놈
    , 'MANAGERLIST' : (0X01 << 7)     // 자동 매니저 리스트에 등록된놈
    , 'SUBBJ' : (0x01 << 8)     // 부방장 : 매니저
    , 'FEMALE' : (0x01 << 9)     // 여자 (아니면 모두 남자로 처리) 
    , 'AUTODUMB' : (0x01 << 10)    // 자동 벙어리 (서버에서 지정) : 서버에서 일정량 이상의 채팅 내용이 오면 벙어리로 지정한다. 클라이언트에서는 신경 안써도 됨.
    , 'DUMB_BLIND' : (0x01 << 11)    // 벙어리로 인한 블라인드 : 벙어리로 인해 블라인드 지정된 놈.
    , 'DOBAE_BLIND' : (0x01 << 12)    // 도배로 인한 블라인드 처리 : 도배로 인한 블라인드 지정된 놈.
    , 'EXITUSER' : (0x01 << 13)    // 나간사람. 서버엔 영향 없기 때문에 클라이언트 정의 : 무시해도 됨.
    , 'MOBILE' : (0x01 << 14)    // 모바일 user
    , 'TOPFAN' : (0x01 << 15)    // 열혈팬 여부
    , 'REALNAME' : (0x01 << 16)    // 실명인증여부 : 실명 인증되어 있는 놈이면 로그인 할 때 플래그를 세팅해서 보내야 한다.
    , 'NODIRECT' : (0x01 << 17)    // 1:1 직접 채팅 금지 : 귓말 금지
    , 'GLOBAL_APP' : (0x01 << 18)   // 글로벌 모바일앱 유저
    , 'QUICKVIEW' : (0x01 << 19)    // 퀵뷰 사용 여부
    , 'SPTR_STICKER' : (0x01 << 20) // 스티커 서포터 여부
    , 'CHROMECAST' : (0x01 << 21)   // 크롬캐스트 유저
}

var USERLEVEL = {
    ADMIN: 1,
    HIDDEN: 2,
    BJ: 4,
    DUMB: 8,
    GUEST: 16,
    FANCLUB: 32,
    AUTOMANAGER: 64,
    MANAGERLIST: 128,
    MANAGER: 256,
    FEMALE: 512,
    AUTODUMB: 1024,
    DUMB_BLIND: 2048,
    DOBAE_BLIND: 4096,
    DOBAE_BLIND2: 1 << 24,
    EXITUSER: 8192,
    MOBILE: 16384,
    TOPFAN: 32768,
    REALNAME: 65536,
    NODIRECT: 1 << 17,
    GLOBAL_APP: 1 << 18,
    QUICKVIEW: 1 << 19,
    SPTR_STICKER: 1 << 20,
    CHROMECAST: 1 << 21,
    FOLLOWER: 1 << 28,
    NOTIVODBALLOON: 1 << 30,
    NOTITOPFAN: 1 << 31,
    GLOBAL_PC: 1,
    CLAN: 2,
    TOPCLAN: 4,
    TOP20: 8,
    GAMEGOD: 16,
    GAMEIMO: 32,
    NOSUPERCHAT: 64,
    NORECVCHAT: 128,
    FLASH: 256,
    LGGAME: 512,
    EMPLOYEE: 1024,
    CLEANATI: 2048,
    POLICE: 4096,
    ADMINCHAT: 8192,
    PC: 16384,
    SPECIFY: 32768,
    NEW_STUDIO: 65536,
    HTML5: 1 << 17
}

function compareFlag(level, chkFlag) {
    return ((level & chkFlag) > 0) ? true : false;
}

function doTimeout(name, func, timeout) {
    var getDoName = "do_" + name;
    if(typeof window[getDoName] !== "undefined") {
        clearTimeout(window[getDoName]);
    }
    if(typeof func === "function") {
        window[getDoName] = setTimeout(func,timeout);
    }
}

//공통 함수
function randomRange(n1, n2) {
    return Math.floor( (Math.random() * (n2 - n1 + 1)) + n1 );
}

function numberWithCommas(x) {
    if(x == null || x == undefined) return "";
    var parts = x.toString().split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return parts.join(".");
}

var timeWeek = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'];
function getTimeValue(type) {
    var getVal = "";
    var getNow = new Date();
    // if(type == "시간") {
        // getVal = ((getNow.getHours() < 10)?"0":"") + getNow.getHours() +"시 "+ ((getNow.getMinutes() < 10)?"0":"") + getNow.getMinutes() + "분";
    // }
    // else if(type == "날짜") {
        // getVal = (((getNow.getMonth() + 1) < 10)?"0":"") + (getNow.getMonth() + 1) + "월 " + ((getNow.getDate() < 10)?"0":"") + getNow.getDate() + "일";
    // }
    // if(type == "time") {
        // getVal = ((getNow.getHours() < 10)?"0":"") + getNow.getHours() +":"+ ((getNow.getMinutes() < 10)?"0":"") + getNow.getMinutes();
    // }
    // else if(type == "day") {
        // getVal = (((getNow.getMonth() + 1) < 10)?"0":"") + (getNow.getMonth() + 1) + "-" + ((getNow.getDate() < 10)?"0":"") + getNow.getDate();
    // }
    if(type == "시간") {
        getVal = getNow.getHours() +"시 "+ getNow.getMinutes() + "분";
    }
    else if(type == "시간구분") {
        var getHour = getNow.getHours();
        var getAMPM = getHour >= 12 ? "오후" : "오전";
        getHour = getHour > 12 ? getHour - 12 : getHour;
        getVal = getAMPM + " " + getHour +"시 "+ getNow.getMinutes() + "분";
    }
    else if(type == "날짜") {
        getVal = (getNow.getMonth() + 1) + "월 " + getNow.getDate() + "일";
    }
    if(type == "time") {
        getVal = getNow.getHours() +":"+ getNow.getMinutes();
    }
    else if(type == "day") {
        getVal = (getNow.getMonth() + 1) + "-" + getNow.getDate();
    }
    else if(type == "요일") {
        var getDay = getNow.getDay();
        getVal = timeWeek[getDay];
    }
    return getVal;
}

function utilPrintf() {
    if (!arguments || arguments.length < 1 || !RegExp)
    {
        return;
    }
    var str = arguments[0];
    var re = /([^%]*)%('.|0|\x20)?(-)?(\d+)?(\.\d+)?(%|b|c|d|u|f|o|s|x|X)(.*)/;
    var a = b = [], numSubstitutions = 0, numMatches = 0;
    while (a = re.exec(str))
    {
        var leftpart = a[1], pPad = a[2], pJustify = a[3], pMinLength = a[4];
        var pPrecision = a[5], pType = a[6], rightPart = a[7];

        numMatches++;
        if (pType == '%')
        {
            subst = '%';
        } else
        {
            numSubstitutions++;
            if (numSubstitutions >= arguments.length)
            {
                //alert('Error! Not enough function arguments (' + (arguments.length - 1) + ', excluding the string)\nfor the number of substitution parameters in string (' + numSubstitutions + ' so far).');
            }
            var param = arguments[numSubstitutions];
            var pad = '';
            if (pPad && pPad.substr(0, 1) == "'")
                pad = leftpart.substr(1, 1);
            else if (pPad)
                pad = pPad;
            var justifyRight = true;
            if (pJustify && pJustify === "-")
                justifyRight = false;
            var minLength = -1;
            if (pMinLength)
                minLength = parseInt(pMinLength);
            var precision = -1;
            if (pPrecision && pType == 'f')
                precision = parseInt(pPrecision.substring(1));
            var subst = param;
            if (pType == 'b')
                subst = parseInt(param).toString(2);
            else if (pType == 'c')
                subst = String.fromCharCode(parseInt(param));
            else if (pType == 'd')
                subst = parseInt(param) ? parseInt(param) : 0;
            else if (pType == 'u')
                subst = Math.abs(param);
            else if (pType == 'f')
                subst = (precision > -1) ? Math.round(parseFloat(param) * Math.pow(10, precision)) / Math.pow(10, precision) : parseFloat(param);
            else if (pType == 'o')
                subst = parseInt(param).toString(8);
            else if (pType == 's')
                subst = param;
            else if (pType == 'x')
                subst = ('' + parseInt(param).toString(16)).toLowerCase();
            else if (pType == 'X')
                subst = ('' + parseInt(param).toString(16)).toUpperCase();
        }
        str = leftpart + subst + rightPart;
    }
    return str;
}

function setCookie( name, value, expiredays ) {   
    var todayDate = new Date();   
    todayDate.setDate( todayDate.getDate() + expiredays );   
    document.cookie = name + "=" + escape( value ) + "; path=/; expires=" + todayDate.toGMTString() + ";"   
} 

function delCookie(name) {
    document.cookie = name + "=; path=/; expires=Wed; 01 Jan 1970;";   
}

function getCookie( name ) {  
    var nameOfCookie = name + "=";  
    var x = 0;  
    while ( x <= document.cookie.length ) {  
        var y = (x+nameOfCookie.length);  
        if ( document.cookie.substring( x, y ) == nameOfCookie ) {  
            if ( (endOfCookie=document.cookie.indexOf( ";", y )) == -1 )  
            endOfCookie = document.cookie.length;  
            return unescape( document.cookie.substring( y, endOfCookie ) );  
        }  
        x = document.cookie.indexOf( " ", x ) + 1;  
        if ( x == 0 ) break;  
   }  
   return "";  
}  

var html5AudioCheck = false;
function html5AudioSupport() {
    var t = document.createElement("audio");
    return !(!t.canPlayType || !t.canPlayType("audio/mpeg;").replace(/no/, ""))
}

if(consoleCheck != "log") {
    //로그 기록시 로딩 후 10초 뒤에 아래 로그 명령 실행 하게 하기
    //window.console = { log: function() {} };
    // var add_console = window.console.log;
    // window.console.log = function() {
        // if(consoleCheck) add_console.apply(this,arguments);
    // }
    
    var errorArray = [];
    window.onerror = function (errorMsg, url, lineNumber, column, errorObj) {
        console.log(errorMsg, url, lineNumber, column, errorObj);
        
        if(errorMsg != undefined && errorMsg != "" && $.inArray(errorMsg, errorArray) > -1) return;
        errorArray.push(errorMsg);
        
        if(lineNumber == 1 || lineNumber.toString() == "1") return;
        if(errorMsg.indexOf("SetVolume") > -1 || errorMsg.indexOf("GetPlayState") > -1 || errorMsg.indexOf("OnSceneLoad") > -1 || errorMsg.indexOf("SetEvent") > -1 || errorMsg.indexOf("UpdateLocalProperty") > -1) return;
        if(errorMsg.indexOf("SourcesListHighlight") > -1 || errorMsg.indexOf("SourcesListUpdate") > -1 || errorMsg.indexOf("SourcesListSelect") > -1 || errorMsg.indexOf("site_domain") > -1 || errorMsg.indexOf("SetBackGroundColor") > -1) return;
        if(errorMsg.indexOf("skip_src_check") > -1 || errorMsg.indexOf("setPointerCapture") > -1 || errorMsg.indexOf("releasePointerCapture") > -1 || errorMsg.indexOf("OnAsyncCallback") > -1 || errorMsg.indexOf("gapi is not defined") > -1) return;
        if(errorMsg.indexOf("- 0 - Script error") > -1 || errorMsg.indexOf("'match' of undefined") > -1 || errorMsg.indexOf("- 5 - Uncaught TypeError: Cannot read property 'length' of null") > -1 || errorMsg.indexOf("- 5 - 정의되지 않음 또는 null 참조인 'match' 속성을") > -1 || errorMsg.indexOf("Unexpected token") > -1) return;
        if(errorMsg.indexOf("KISA Privacy") > -1) return;
        
        var getLog = realKey + " - " + loginInfo.bjid + " - " + pageType + "_" + subType + "_" + subPage +  " - " + lineNumber + " - " +errorMsg;
        $.ajax({
            url:logUrl + "lib/error.php",
            async:true,
            data:{ log:getLog }
        });
        return true;
    }
}

var urlRegex = /(https?:\/\/[^\s]+)/g;
var KoRegex = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/g;
var imgRegex = /<img[^>]*>/g;

//언어 코드
// var voiceLang = ["eng","spa","fra","deu","ita","ell","hun","rus","nld","swe","jpn","kor","zh-cn","zh-tw","chn","hin","arb","ces","dan","fin","ind","nob","pol","por","ron","tha"];
// var voiceCode = ["en","es","fr","de","it","el","hu","ru","nl","sv","ja","ko","zh-cn","zh-tw","zh","hi","ar","cs","da","fi","id","nb","pl","pt","ro","th"];
var voiceLang = ["eng", "zh-cn", "zh-tw", "cmn", "spa", "rus", "ben", "hin", "por", "ind", "jpn", "fra", "deu", "jav", "kor", "tel", "vie", "mar", "ita", "tam", "tur", "urd", "guj", "pol", "ukr", "fas", "kan", "mal", "mya", "ori", "sun", "ron", "pan", "amh", "hau", "bos", "hrv", "nld", "srp", "tha", "yor", "ibo", "nep", "tgl", "hun", "sin", "ell", "ces", "run", "bel", "nya", "kin", "zul", "bul", "swe", "lin", "som", "kaz", "uig", "hat", "khm", "aka", "sna", "tat", "xho", "hye", "afr", "bod", "tir", "fin", "slk", "tuk", "dan", "nob", "sag", "nno", "heb", "tgk", "cat", "sot", "kat", "glg", "lao", "lit", "tsn", "lug", "bam", "wol", "kir", "mkd", "ewe", "slv", "epo", "ven", "ssw", "iii", "lav", "tso", "est", "ndo"];
var voiceCode = ["en", "zh-cn", "zh-tw", "zh", "es", "ru", "bn", "hi", "pt", "id", "ja", "fr", "de", "jv", "ko", "te", "vi", "mr", "it", "ta", "tr", "ur", "gu", "pl", "uk", "fa", "kn", "ml", "my", "or", "su", "ro", "pa", "am", "ha", "bs", "hr", "nl", "sr", "th", "yo", "ig", "ne", "tl", "hu", "si", "el", "cs", "rn", "be", "ny", "rw", "zu", "bg", "sv", "ln", "so", "kk", "ug", "ht", "km", "ak", "sn", "tt", "xh", "hy", "af", "bo", "ti", "fi", "sk", "tk", "da", "nb", "sg", "nn", "he", "tg", "ca", "st", "ka", "gl", "lo", "lt", "tn", "lg", "bm", "wo", "ky", "mk", "ee", "sl", "eo", "ve", "ss", "ii", "lv", "ts", "et", "ng"];

var starStoryArray = [1,2,3,4,5,6,7,8,9,10,11,12,14,18,19,21,22,23,24,25,27,28,30,33,35,42,44,47,49,50,52,54,55,59,66,68,72,73,75,76,77,79,82,88,90,92,93,96,97,99,100,101,102,103,104,108,109,111,112,114,119,159,175,200,214,218,222,225,230,242,248,252,282,300,303,314,333,337,365,396,423,424,444,445,447,486,500,505,515,520,522,529,555,666,772,775,777,802,821,824,825,935,982,992,999,1000,1003,1004,1041,1052,1111,1212,1217,1225,1231,1253,1414,1472,1588,1717,1818,2000,2018,2154,2222,2454,2514,2626,2828,2848,2929,2975,3000,3333,4424,4949,5000,5050,5290,5825,5875,5959,7142,7272,7290,7777,7788,7942,8253,9090,9797,9977,9999,10002,10105,11010,12486,12535,17535,20000,30000]
var starCategoryArray = {};
var starSignArray = {};

var goldLiveData = {
    url:"http://player.goldlive.co.kr"
}

function playerChatSetup(type, data, reload) {
    if(sub.debug) console.log(type, data);
    var getTokenCheck = false;
    var getToken = "";
    var getRefresh = "";
    var getName = "";
    
    if(type == "twitch") {
        if(data.data && data.data.access_token && data.data.access_token != "") {
            getTokenCheck = true;
            loginInfo.twauth = data.data.access_token;
            getToken = loginInfo.twauth;
            if(localOpt.localcheck() == true) {
                localStorage.setItem("token_twitch", getToken);
            }
            if(subType == "chat") sub.chat.inputdata.twitch = true;
        }
        if(data.data && data.data.refresh_token && data.data.refresh_token != "") {
            loginInfo.twrefresh = data.data.refresh_token;
            getRefresh = loginInfo.twrefresh;
        }
        
        if(getTokenCheck === false) {
            //alert("트위치 로그인 정보가 잘못됐습니다. 다시 로그인해주세요.");
        }
    }
    else if(type == "youtube") {
        if(data.data && data.data.access_token && data.data.access_token != "") {
            getTokenCheck = true;
            loginInfo.yttoken = data.data.access_token;
            getToken = loginInfo.yttoken;
            if(localOpt.localcheck() == true) {
                localStorage.setItem("token_youtube", getToken);
            }
            if(subType == "chat") sub.chat.inputdata.youtube = true;
        }
        if(data.data && data.data.refresh_token && data.data.refresh_token != "") {
            loginInfo.ytcode = data.data.refresh_token;
            getRefresh = loginInfo.ytcode;
        }
        if(data.user && data.user.name && data.user.name != "") {
            loginInfo.ytname = data.user.name;
            getName = loginInfo.ytname;
        }
        
        if(getTokenCheck === false) {
            //alert("유튜브 로그인 정보가 잘못됐습니다. 다시 로그인해주세요.");
        }
    }
    
    if(getTokenCheck === true) {
        $.ajax({
            url:"lib/broadinfo.php",
            dataType:"json",
            timeout:5000,
            data:{
                type:"chatinputlogin",
                subtype:type,
                token:getToken,
                refresh:getRefresh,
                name:getName,
                email:realKey,
                key:idxNum
            },
            success: function(datas) {
                if(sub.debug) console.log("chat input save", datas);
                
                if(reload === true) {
                    if(type == "twitch") {
                        location.reload();
                    }
                    else if(type == "youtube") {
                        $("#input_chat_box .chat_input_alert .input_alert.youtube").removeClass("show");
                        $("#popup_chat_setup .btn_close").trigger("click");
                    }
                }
            }
        });
    }
}

var comm = {
    init: function() {
        
        //서버 시간체크
        comm.apiload.timecheck();
    },
    apiload: {
        timecheck: function() {
            $.ajax({
                url:"lib/timecheck.php",
                dataType:"json",
                timeout:5000,
                success:function(data) {
                    if(sub.debug) console.log("apiload timecheck", data);
                    if(data) {
                        if(data.time != undefined && !isNaN(data.time) && data.time > 0) {
                            comm.apiload.timeval.time = [parseInt(data.time, 10), parseInt(data.time, 10) + 500];
                            comm.apiload.timeval.yt = parseInt(data.yttime, 10);
                        }
                        if(data.apisocketuse != undefined) {
                            apiSocketUse = data.apisocketuse === false ? false: true;
                        }
                        if(data.statsdatause != undefined) {
                            comm.statsdata.connect = data.statsdatause === false ? false: true;
                        }
                    }
                },
                error:function() {
                }
            });
                
            doTimeout("comm_apiload_timecheck", function() {
                comm.apiload.timecheck();
            }, 1000 * 60 * 10);
        },
        timeval: {
            time: [1500, 2500],
            yt: 5000
        },
        time: function(type) {
            var times = comm.apiload.timeval.time;
            var yttime = comm.apiload.timeval.yt;
            if(sub.debug) console.log("apiload time", times, yttime, apiSocketUse, type);
            if(type != undefined && type !== "") {
            	if(type == "afstats" || type == "kastats" || type == "fastats" || type == "gdstats") {
            		var getTime = apiSocketUse == true ? (randomRange(times[0], times[0] + 500) * 10) : (randomRange(times[1], times[1] + 500) * 10);
            		if(type == "afstats" && player.afreecatv.datainfo.connect == true) getTime += 20000;
            		else if(type == "kastats" && player.kakaotv.datainfo.connect == true) getTime += 20000;
            		else if(type == "fastats" && player.facebook.datainfo.connect == true) getTime += 20000;
            		else if(type == "gdstats" && player.goldlive.datainfo.connect == true) getTime += 20000;
	                return getTime;
	            }
	            else if(type == "view") {
	                return apiSocketUse == true ? (randomRange(times[0] + 500, times[0] + 1000) * 10) : (randomRange(times[1] + 500, times[1] + 1000) * 10);
	            }
	            else if(type == "ytstats") {
	                if(player.youtube.datainfo.connect == true) return (apiSocketUse == true ? yttime : (yttime + 10000)) + 50000;
	                else return (apiSocketUse == true ? yttime : (yttime + 10000))  + 20000;
	            }
	            else if(type == "ytchat") {
	                return apiSocketUse == true ? yttime : (yttime + 10000);
	            }
	            else if(type == "ytalert") {
	                return (apiSocketUse == true ? yttime : (yttime + 10000)) + 5000;
	            }
	            else if(type == "ytsub") {
	                return (apiSocketUse == true ? yttime : (yttime + 10000)) + 30000;
	            }
	            else if(type == "ytinfo") {
	                return (apiSocketUse == true ? yttime : (yttime + 10000)) + 15000;
	            }
	            else return apiSocketUse == true ? (randomRange(times[0], times[0] + 500) * 10) : (randomRange(times[1], times[1] + 500) * 10);
            }
            else return apiSocketUse == true ? (randomRange(times[0], times[0] + 500) * 10) : (randomRange(times[1], times[1] + 500) * 10);
        }
    },
    data: {
        whitelist: {}
    },
    savedata: {
        save: function(name, data) {
            var getTime = new Date().getTime();
            var getName = "afreecahelper_" + subType + "_" + subPage + "_" + name;
            var getData = JSON.stringify({ data:data, time:getTime });
            if(localOpt.localcheck() == true) {
                localStorage.setItem(getName, getData);
            }
            else {
                setCookie(getName, getData, 7);
            }
            
            if(sub.debug) console.log("comm savedata save", getName, getData);
        },
        load: function(name) {
            var getData = null;
            var getTime = new Date().getTime();
            var getName = "afreecahelper_" + subType + "_" + subPage + "_" + name;
            if(localOpt.localcheck() == true) {
                getData = localStorage.getItem(getName);
            }
            else {
                getData = getCookie(getName);
            }
            if(getData != null && getData !== "") {
                getData = $.parseJSON(getData, getData.time);
                if(sub[subType].data.autoreset != undefined && sub[subType].data.autoreset === true && getData.time != undefined && !isNaN(getData.time)) {
                    var timeNow = new Date().getTime() - 3600000;
                    var prevTime = parseInt(getData.time, 10);
                    if(sub.debug) console.log("status time", getData.time, prevTime, timeNow);
                    if(prevTime < timeNow) return;
                }
            }
                
            if(sub.debug) console.log("comm savedata load", getName, getData);
            return getData;
        }
    },
    statsdata: {
        connect:true,
        load: function(data) {
            if(sub.debug) console.log("statsdata load", data);
            if(data && data.type != undefined && data.sub != undefined && data.stype != undefined && data.ptype != undefined && data.data != undefined) {
                if(data.type !== subType || Number(data.sub) !== Number(subPage)) return;
                
                var getStatsData = data.data;
                if(data.type == "subtitle") {
                    if(getStatsData.value != undefined) {
                    	var getSubtitleData = $.parseJSON(getStatsData.value);
                    	if(getSubtitleData.subtitle != undefined) {
                    		starSave = getSubtitleData.subtitle;
                            if(starSave == null || starSave === "") starSave = {};
                            $.each(starSave, function(key, value) {
                                if(value.data != undefined && value.data.length > 0) {
                                    $.each(value.data, function(keys, values) {
                                        if(values.value2 == undefined) {
                                            starSave[key].data[keys].value2 = parseInt(values.value * 100, 10);
                                        }
                                    });
                                }
                            });
                    	}
                    	if(getSubtitleData.recent != undefined) {
                    		starArray = getSubtitleData.recent;
                            if(starArray == null || starArray === "") starArray = [];
                            $.each(starArray, function(key, value) {
                                if(value.length == 4) {
                                    starArray[key][4] = parseInt(value[1] * 100, 10);
                                }
                            });
                    	}
                        sub.subtitle.staralign();
                    }
                }
                else if(data.type == "goal") {
                    if(getStatsData.value != undefined) {
                        sub.goal.opt.curval = parseInt(getStatsData.value, 10);
                        if(data.data.uname != undefined) {
                            sub.goal.opt.curname = getStatsData.uname;
                        }
                        if(data.data.lname != undefined) {
                            sub.goal.opt.lastname = getStatsData.lname;
                        }
                        sub.goal.add(0, getStatsData.type == "starm");
                    }
                }
            }
        }
    },
    whitelist: function() {
        if(subType == "alert" || subType == "alertlist") {
            $.ajax({
                type:"POST",
                url:datasaveLink + "whitelist.php",
                dataType:"json",
                timeout:5000,
                data:{
                    type:"load",
                    myid:myKey,
                    myidx:idxNum,
                    page:subType,
                    sub:subPage
                },
                success: function(data) {
                    if(data && data.data != undefined && data.data !== "") {
                        var videoWhiteList = $.parseJSON(data.data);
                        comm.data.whitelist = videoWhiteList;
                        if(subType == "alert") {
                            if(videoWhiteList.white != undefined && videoWhiteList.white.length > 0) {
                                var getWhiteList = $(".main_alertbox .alert_video_whitelist .input_add_list").eq(0);
                                var getWhiteForm = getWhiteList.find(".list_box").eq(0).clone();
                                $.each(videoWhiteList.white, function(key, value) {
                                    if(key > 0) {
                                        getWhiteList.append(getWhiteForm.clone());
                                    }
                                    getWhiteList.find(".list_box").last().find(".select").val(value[0]).end().find(".input_text").val(value[1]);
                                });
                            }
                            if(videoWhiteList.black != undefined && videoWhiteList.black.length > 0) {
                                var getWhiteList = $(".main_alertbox .alert_video_whitelist .input_add_list").eq(1);
                                var getWhiteForm = getWhiteList.find(".list_box").eq(0).clone();
                                $.each(videoWhiteList.black, function(key, value) {
                                    if(key > 0) {
                                        getWhiteList.append(getWhiteForm.clone());
                                    }
                                    getWhiteList.find(".list_box").last().find(".select").val(value[0]).end().find(".input_text").val(value[1]);
                                });
                            }
                        }
                        else if(subType == "alertlist") {
                            sub.alertlist.video.whitelist.index();
                        }
                    }
                }
            });
        }
    },
    translate: {
        pattern: /[가-힣ㄱ-ㅎㅏ-ㅣ]/g,
        engPattern: /[a-zA-Z]+$/g,
        check: function(type, text, voicedata) {
            if(pageType == "setup") {
                var loadData = sub[subType].loaddata;
            }
            else {
                var loadData = sub[subType].data;
            }
            
            var getCheckType = "check";
            
            if(subType == "chat" && loadData.translate != undefined && loadData.translate == true && text.indexOf("[") === 0) {
                if(sub.debug) console.log("translate translate check", type, text);
                var getMatch = text.match(/^\[(.*?)\]/);
                if(getMatch != null && getMatch.length > 1 && getMatch[1] !== "" && $.inArray(getMatch[1], voiceCode) > -1) {
                    if(sub.debug) console.log("translate match", getMatch[1]);
                    getCheckType = getMatch[1];
                    text = text.replace(getMatch[0],"");
                }
            }
            
            comm.translate.pattern.lastIndex = 0;
            var getLangCheck = comm.translate.pattern.test(text);
            if(sub.debug) console.log("translate", type, text, getLangCheck); 
            
            if(getCheckType == "check") {
                //영문 체크
                if(getLangCheck == false) {
                    comm.translate.engPattern.lastIndex = 0;
                    var getTextMsg = $("<div>" + text + "</div>").text();
                    var getCheckMsg = getTextMsg.replace(/(?:https?|ftp):\/\/[\n\S]+/ig,"").replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,"").replace(/[0-9`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/g, "").replace(/(.)(?=.*\1)/g,"");
                    var getEngCheck = comm.translate.engPattern.test(getCheckMsg);
                    if(sub.debug) console.log("translate eng", getCheckMsg, getEngCheck);
                    
                    //영문일 경우
                    if((getEngCheck == false && getCheckMsg.length > 0) || (getEngCheck == true && getCheckMsg.length > 2)) {
                        if(type != "chatvoice") {
                            sub[subType].opt.transidx += 1;
                            var getTransIdx = "transidx_" + sub[subType].opt.transidx;
                        }
                        
                        var getTransMsg = getTextMsg.replace(/(?:https?|ftp):\/\/[\n\S]+/ig,"").replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,"");
                        if(sub.debug) console.log("translate eng", getTransMsg);
                        if(type == "chatko") {
                            voicedata.addClass(getTransIdx);
                            comm.translate.trans("auto", "ko", getTransMsg, getTransIdx, type, voicedata);
                            return;
                        }
                        else if(type == "alert" || type == "chatvoice") {
                            function transAjaxLoad(datas) {
                                var getLang = "eng";
                                var getCode = "en";
                                if(datas && datas.result && datas.result.length > 0) {
                                    $.each(datas.result,function(key,value) {
                                        var subVoiceLang = $.inArray(value[0], voiceLang);
                                        if(subVoiceLang > -1) {
                                            getLang = value[0];
                                            getCode = voiceCode[subVoiceLang];
                                            return false;
                                        }
                                    });
                                    if(sub.debug) console.log("translate", getLang);
                                    if(getLang != "eng") {
                                        $.each(datas.result,function(key,value) {
                                            if(value[0] == "eng" && value[1] > 0.8) {
                                                var subVoiceLang = $.inArray(value[0], voiceLang);
                                                if(subVoiceLang > -1) {
                                                    getLang = value[0];
                                                    getCode = voiceCode[subVoiceLang];
                                                    return false;
                                                }
                                            }
                                        });
                                    }
                                    else if(getLang == "cmn") { //중국어 일본어 체크
                                        if(datas.length > 1 && datas.result[1][0] == "jpn") {
                                            getLang = "jpn";
                                            getCode = voiceCode[10];
                                        }
                                    }
                                    else if(getLang === "") {
                                        getLang = "eng";
                                        getCode = "en";
                                    }
                                    if(sub.debug) console.log("translate chat lang", getLang, getCode);
                                    
                                    if(subType == "alert") {
                                        if(getCode != "ko" && loadData.translate != undefined && loadData.translate == true) {
                                            voicedata.target.find(".text.chat").addClass(getTransIdx);
                                            
                                            var getTransMsg = getTextMsg.replace(/(?:https?|ftp):\/\/[\n\S]+/ig,"").replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,"");
                                            comm.translate.trans("auto", "ko", getTransMsg, getTransIdx, type, voicedata);
                                        }
                                    }
                                }
                                
                                if(subType == "alert") {
                                    if(getCode != "ko") {
                                        voicedata.rate = voicedata.rate * 0.9;
                                        voicedata.lang = getCode;
                                    }
                                    sub.alert.voiceRun(voicedata);
                                }
                                else if(subType == "chat") {
                                    if(getCode != "ko") {
                                        voicedata.rate = voicedata.rate * 0.9;
                                        voicedata.url = "https://www.google.com/speech-api/v1/synthesize?ie=UTF-8&text=" + voicedata.text + "&lang=" + getCode + "&speed=" + voicedata.rate;
                                    }
                                    sub.chat.voiceload(voicedata);
                                }
                            }
                            
                            if(getEngCheck === true && loadData.speechkorea != undefined && loadData.speechkorea == true) {
                                if(sub.debug) console.log("translate ko only");
                                sub.chat.voiceload(voicedata);
                                return;
                            }
                            else if(getEngCheck === true && getTransMsg.split(" ").length == 1) {
                                if(sub.debug) console.log("translate only eng");
                                transAjaxLoad();
                                return;
                            }
                            
                            try{
                                $.ajax({
                                    url:webIp,
                                    dataType:"json",
                                    data:{
                                        type:"lang",
                                        value:getTransMsg
                                    },
                                    timeout:5000,
                                    success:function(datas) {
                                        if(sub.debug) console.log("translate alert ajax", datas);
                                        transAjaxLoad(datas);
                                    },
                                    error:function() {
                                        if(subType == "alert") {
                                            sub.alert.voiceRun(voicedata);
                                        }
                                        else if(subType == "chat") {
                                            sub.chat.voiceload(voicedata);
                                        }
                                    }
                                });
                                return;
                            }
                            catch(error) {
                                // $.ajax({
                                    // type:"POST",
                                    // url:logUrl + "lib/aflog.php",
                                    // data:{
                                        // type:"commcheck",
                                        // log:JSON.stringify(error)
                                    // }
                                // });
                            }
                        }
                    }
                }
                if(subType == "alert") {
                    sub.alert.voiceRun(voicedata);
                }
                else if(type == "chatvoice") {
                    sub.chat.voiceload(voicedata);
                }
            }
            else if(subType == "alert") {
                sub.alert.voiceRun(voicedata);
            }
            else if(subType == "chat") {
                var getCode = getCheckType;
                var getLang = "";
                if(sub.debug) console.log("translate trans", getCode);
                
                if(getCode != "") {
                    if(type == "chatko") {
                        sub[subType].opt.transidx += 1;
                        var getTransIdx = "transidx_" + sub[subType].opt.transidx;
                        voicedata.addClass(getTransIdx);
                    }
                    comm.translate.trans("ko", getCode, text, getTransIdx, type, voicedata);
                }
            }
        },
        trans: function(from, to, text, idx, type, voicedata) {
            try{
                $.ajax({
                    url:"https://translate.googleapis.com/translate_a/single",
                    data:{
                        client: 'gtx',
                        sl: from,
                        tl: to,
                        dt: 't',
                        q: text
                    },
                    dataType:"json",
                    success:function(transdata) {
                        if(sub.debug) console.log("translate ajax", from, to, idx, text, type, transdata);
                        if(transdata && transdata.length > 0 && transdata[0].length > 0 && transdata[0][0].length > 0 && transdata[0][0][0] !== "") {
                            var getTransValue = transdata[0][0][0];
                            if($.trim(text) !== $.trim(getTransValue)) {
                                if(subType == "alert") {
                                    var getchatTarget = $("#item_alert_area .text_box .text.chat." + idx);
                                    if(getchatTarget.length > 0) {
                                        getchatTarget.append("<br><span class='translate'>(" + getTransValue + "</span>)");
                                    }
                                }
                                else if(subType == "chat") {
                                    if(type == "chatko") {
                                        var getchatTarget = $("#item_chat .chat_list li." + idx + " p.text");
                                        if(getchatTarget.length > 0) {
                                            var getScrollCheck = sub.chat.opt.scroll == true ? true : false;
                                            getchatTarget.append("<br>(" + getTransValue + ")");
                                            if(getScrollCheck == true) {
                                                sub.chat.scroll.bottom(true,true);
                                            }
                                        }
                                    }
                                    else if(type == "chatvoice") {
                                        voicedata.rate = voicedata.rate * 0.9;
                                        voicedata.url = "https://www.google.com/speech-api/v1/synthesize?ie=UTF-8&text=" + encodeURIComponent(getTransValue) + "&lang=" + to + "&speed=" + voicedata.rate;
                                    }
                                }
                            }
                        }
                        
                        if(type == "chatvoice") {
                            sub.chat.voiceload(voicedata);
                        }
                    },
                    error:function(transdata) {
                        //TODO 번역 오류 (차단 등)
                        // $.ajax({
                            // type:"POST",
                            // url:logUrl + "lib/aflog.php",
                            // data:{
                                // type:"commtranserror",
                                // log:JSON.stringify(transdata)
                            // }
                        // });
                    }
                });
            }
            catch(error) {
                $.ajax({
                    type:"POST",
                    url:logUrl + "lib/aflog.php",
                    data:{
                        type:"commtrans",
                        log:JSON.stringify(error)
                    }
                });
            }
        }
    },
    afreeca: {
        imgurl: {
            star:"http://res-cf.afreecatv.com/new_player/items/",
            sticker:"http://www.afreecatv.com/new_player/items/",
            choco:"http://www.afreecatv.com/images/new_app/player/Item/choco/"
        },
        socket: {
            login: function(e, t, n) {
                var i = new Array;
                i.push(a), i.push(e), i.push(a), i.push(comm.afreeca.socket.stringToUint(t)), i.push(a), i.push(n), i.push(a);
                var r = comm.afreeca.socket.makeBuffer(i),
                    s = comm.afreeca.socket.makeBuffer(comm.afreeca.socket.makeHeader(comm.afreeca.ChatServiceType.SVC_LOGIN, r.byteLength, 0)),
                    l = comm.afreeca.socket.mergePacket(s, r);
                return l;
            },
            joinch: function(e, t, n, i, r) {
                var s = new Array;
                s.push(a), s.push(e), s.push(a), s.push(t), s.push(a), s.push(n), s.push(a), s.push(comm.afreeca.socket.stringToUint(i)), s.push(a), s.push(r), s.push(a);
                var l = comm.afreeca.socket.makeBuffer(s),
                    u = comm.afreeca.socket.makeBuffer(comm.afreeca.socket.makeHeader(comm.afreeca.ChatServiceType.SVC_JOINCH, l.byteLength, 0)),
                    c = comm.afreeca.socket.mergePacket(u, l);
                return c;
            },
            parseMessage: function(e, broadno) {
                var t = e.slice(0, 14),
                    n = e.slice(14, e.byteLength),
                    i = comm.afreeca.socket.readInt(t.slice(2, 6)),
                    r = (comm.afreeca.socket.readInt(t.slice(6, 12)), comm.afreeca.socket.readInt(t.slice(12, 14))),
                    o = comm.afreeca.socket.readBody(n, r),
                    a = {
                        serviceCode: i,
                        retCode: r,
                        packet: o
                    };
                if (r > 0) return !1;
                player.afreecatv.received(a, broadno);
            },
            readInt: function(e) {
                for (var t = new Int8Array(e), n = "", i = 0; i < e.byteLength; i++) n += String.fromCharCode(t[i]);
                return Number(n);
            },
            readBody: function(e, t) {
                for (var n = new Uint8Array(e), i = [], r = 0, o = 0, s = 1; s < e.byteLength; s++) n[s] != a.charCodeAt() ? (void 0 === i[r] && (i[r] = new Array), i[r][o] = n[s], o++) : (void 0 === i[r] && (i[r] = new Array), r++, o = 0);
                for (var s = 0; s < i.length; s++) i[s] = comm.afreeca.socket.uintToString(new Uint8Array(i[s]), t);
                return i;
            },
            readBuffer: function(e) {
                var t = new FileReader,
                    n = null;
                t.onload = function() {
                    n = this.result, comm.afreeca.socket.parseMessage(n)
                }.bind(this), t.readAsArrayBuffer(e)
            },
            uintToString: function(e, t) {
                var n = String.fromCharCode.apply(null, e);
                try {
                    var i = decodeURIComponent(escape(n));
                } catch (e) {
                    var i = escape(n);
                }
                return i;
            },
            getLog: function(e) {
                var t = e,
                    n = String.fromCharCode(6);
                n += String.fromCharCode(38), n += String.fromCharCode(6);
                var i = String.fromCharCode(6);
                i += String.fromCharCode(61), i += String.fromCharCode(6);
                var r = "log" + String.fromCharCode(17);
                return Object.keys(t).forEach(function(e) {
                    r += n + e + i + t[e]
                }), r += String.fromCharCode(18)
            },
            getAddInfo: function(e) {
                var t = "";
                return Object.keys(e).forEach(function(n) {
                    t += n + String.fromCharCode(17) + e[n] + String.fromCharCode(18)
                }), t
            },
            stringToUint: function(e) {
                try {
                    var e = unescape(encodeURIComponent(e))
                } catch (t) {
                    var e = unescape(e)
                }
                for (var t = e.split(""), n = [], i = 0; i < t.length; i++) n.push(t[i].charCodeAt(0));
                return new Uint8Array(n)
            },
            makeBuffer: function(e) {
                for (var t = 0, n = 0, i = null, r = 0; r < e.length; r++) {
                    if (void 0 == e[r] && (e[r] = new Uint8Array(0)), !(e[r] instanceof Uint8Array)) {
                        for (var o = new ArrayBuffer(e[r].toString().length), a = new Uint8Array(o), s = 0; s < e[r].toString().length; s++) a[s] = e[r].toString().charCodeAt(s);
                        e[r] = a;
                    }
                    n += e[r].byteLength;
                }
                i = new Uint8Array(n);
                for (var r = 0; r < e.length; r++) i.set(e[r], t), t += e[r].byteLength;
                return i;
            },
            makeHeader: function(e, t, n) {
                var i = new Array;
                return i.push(s), i.push(l), i.push(Number(e).padLeft(4)), i.push(Number(t).padLeft(6)), i.push(Number(n).padLeft(2)), i;
            },
            mergePacket: function(e, t) {
                if (!e && !t) throw "Please specify valid arguments for parameters header and body.";
                if (!t || 0 === t.byteLength) return e;
                if (!e || 0 === e.byteLength) return t;
                if (Object.prototype.toString.call(e) !== Object.prototype.toString.call(t)) throw "The types of the two arguments passed for parameters header and body do not match.";
                var n = new e.constructor(e.byteLength + t.byteLength);
                return n.set(e), n.set(t, e.byteLength), n.buffer;
            },
            keepAlive: function() {
                var e = new Array;
                e.push(a);
                var t = comm.afreeca.socket.makeBuffer(e),
                    n = comm.afreeca.socket.makeBuffer(comm.afreeca.socket.makeHeader(comm.afreeca.ChatServiceType.SVC_KEEPALIVE, t.byteLength, 0)),
                    i = comm.afreeca.socket.mergePacket(n, t);
                return i;
            },
            message: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                var s = new Array;
                s.push(a), s.push(comm.afreeca.socket.stringToUint(e)), s.push(a), s.push(t), s.push(a);
                var l = comm.afreeca.socket.makeBuffer(s),
                    u = comm.afreeca.socket.makeBuffer(comm.afreeca.socket.makeHeader(comm.afreeca.ChatServiceType.SVC_CHATMESG, l.byteLength, 0)),
                    c = comm.afreeca.socket.mergePacket(u, l);
                //return c;
                csocket.send(c);
            }
        },
        ChatServiceType: {
            SVC_KEEPALIVE: 0,
            SVC_LOGIN: 1,
            SVC_JOINCH: 2,
            SVC_QUITCH: 3,
            SVC_CHUSER: 4,
            SVC_CHATMESG: 5,
            SVC_SETCHNAME: 6,
            SVC_SETBJSTAT: 7,
            SVC_SETDUMB: 8,
            SVC_DIRECTCHAT: 9,
            SVC_NOTICE: 10,
            SVC_KICK: 11,
            SVC_SETUSERFLAG: 12,
            SVC_SETSUBBJ: 13,
            SVC_SETNICKNAME: 14,
            SVC_SVRSTAT: 15,
            SVC_RELOADHOST: 16,
            SVC_CLUBCOLOR: 17,
            SVC_SENDBALLOON: 18,
            SVC_ICEMODE: 19,
            SVC_SENDFANLETRTRER: 20,
            SVC_SENDCHEERSONG: 21,
            SVC_BURNINGMODE: 22,
            SVC_BURNINGLEVEL: 23,
            SVC_RELOADBURNLEVEL: 24,
            SVC_BLINDKICK: 25,
            SVC_MANAGERCHAT: 26,
            SVC_APPENDDATA: 27,
            SVC_BASEBALLEVENT: 28,
            SVC_PAIDITEM: 29,
            SVC_TOPFAN: 30,
            SVC_SNSMESSAGE: 31,
            SVC_SNSMODE: 32,
            SVC_SENDBALLOONSUB: 33,
            SVC_SENDFANLETRTRERSUB: 34,
            SVC_TOPFANSUB: 35,
            SVC_BJSTICKERITEM: 36,
            SVC_CHOCOLATE: 37,
            SVC_CHOCOLATESUB: 38,
            SVC_TOPCLAN: 39,
            SVC_TOPCLANSUB: 40,
            SVC_SUPERCHAT: 41,
            SVC_UPDATETICKET: 42,
            SVC_NOTIGAMERANKER: 43,
            SVC_STARCOIN: 44,
            SVC_SENDQUICKVIEW: 45,
            SVC_ITEMSTATUS: 46,
            SVC_ITEMUSING: 47,
            SVC_USEQUICKVIEW: 48,
            SVC_ICEMODERELAY: 49,
            SVC_NOTIFY_POLL: 50,
            SVC_CHATBLOCKMODE: 51,
            SVC_BDM_ADDBLACKINFO: 52,
            SVC_SETBROADINFO: 53,
            SVC_BAN_WORD: 54,
            SVC_SENDHOPEBALLOON: 56,
            SVC_SENDHOPEBALLOONSUB: 57,
            SVC_SENDADMINNOTICE: 58,
            SVC_FREECAT_OWNER_JOIN: 65,
            SVC_BUYGOODS: 70,
            SVC_BUYGOODSSUB: 71,
            SVC_SENDPROMOTION: 72,
            SVC_NOTIFY_VR: 74,
            SVC_NOTIFY_MOBBROAD_PAUSE: 75,
            SVC_KICK_AND_CANCEL: 76,
            SVC_KICK_USERLIST: 77,
            SVC_ADMIN_CHUSER: 78,
            SVC_CLIDOBAEINFO: 79,
            SVC_VOD_BALLOON: 86,
            SVC_ADCON_EFFECT: 87,
            SVC_SVC_KICK_MSG_STATE: 90,
            SVC_FOLLOW_ITEM: 91,
            SVC_ITEM_SELL_EFFECT: 92,
            SVC_FOLLOW_ITEM_EFFECT: 93,
            SVC_TRANSLATION_STATE: 94,
            SVC_TRANSLATION: 95,
            SVC_GIFT_TICKET: 102,
            SVC_VIDEO_BALLOON: 105,
            SVC_VIDEOBALLOON: 105
        },
        ChatQuitStatus: {
            CLOSED: 0,
            NORMAL: 1,
            KCIK: 2,
            DUMB: 3,
            OVERCHAT: 4,
            BLIND: 5,
            ADMKICK: 6
        }
    },
    currency: {
        convert: function(msg) {
            var unitArray = ["", 0];
            if(msg != undefined && msg !== "") {
                var getSymbol = msg.toString().replace(/[0-9.,]/g, "");
                var getUnit = "KRW";
                $.each(comm.currency.list, function(key, value) {
                    if(value.symbol == getSymbol || value.symbol_native == getSymbol) {
                        getUnit = key;
                        return false;
                    }
                });
                unitArray = [getUnit !== "" ? getUnit : "KRW", parseInt(msg.toString().split(".")[0].toString().replace(/[^0-9]/g, ""), 10)];
            }
            if(sub.debug) console.log("환율 변환", msg, unitArray);
            return unitArray;
        },
        list: {
            "USD": {
                "symbol": "$",
                "name": "US Dollar",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "USD",
                "name_plural": "US dollars"
            },
            "CAD": {
                "symbol": "CA$",
                "name": "Canadian Dollar",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "CAD",
                "name_plural": "Canadian dollars"
            },
            "EUR": {
                "symbol": "€",
                "name": "Euro",
                "symbol_native": "€",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "EUR",
                "name_plural": "euros"
            },
            "AED": {
                "symbol": "AED",
                "name": "United Arab Emirates Dirham",
                "symbol_native": "د.إ.‏",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "AED",
                "name_plural": "UAE dirhams"
            },
            "AFN": {
                "symbol": "Af",
                "name": "Afghan Afghani",
                "symbol_native": "؋",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "AFN",
                "name_plural": "Afghan Afghanis"
            },
            "ALL": {
                "symbol": "ALL",
                "name": "Albanian Lek",
                "symbol_native": "Lek",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "ALL",
                "name_plural": "Albanian lekë"
            },
            "AMD": {
                "symbol": "AMD",
                "name": "Armenian Dram",
                "symbol_native": "դր.",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "AMD",
                "name_plural": "Armenian drams"
            },
            "ARS": {
                "symbol": "AR$",
                "name": "Argentine Peso",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "ARS",
                "name_plural": "Argentine pesos"
            },
            "AUD": {
                "symbol": "AU$",
                "name": "Australian Dollar",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "AUD",
                "name_plural": "Australian dollars"
            },
            "AZN": {
                "symbol": "man.",
                "name": "Azerbaijani Manat",
                "symbol_native": "ман.",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "AZN",
                "name_plural": "Azerbaijani manats"
            },
            "BAM": {
                "symbol": "KM",
                "name": "Bosnia-Herzegovina Convertible Mark",
                "symbol_native": "KM",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "BAM",
                "name_plural": "Bosnia-Herzegovina convertible marks"
            },
            "BDT": {
                "symbol": "Tk",
                "name": "Bangladeshi Taka",
                "symbol_native": "৳",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "BDT",
                "name_plural": "Bangladeshi takas"
            },
            "BGN": {
                "symbol": "BGN",
                "name": "Bulgarian Lev",
                "symbol_native": "лв.",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "BGN",
                "name_plural": "Bulgarian leva"
            },
            "BHD": {
                "symbol": "BD",
                "name": "Bahraini Dinar",
                "symbol_native": "د.ب.‏",
                "decimal_digits": 3,
                "rounding": 0,
                "code": "BHD",
                "name_plural": "Bahraini dinars"
            },
            "BIF": {
                "symbol": "FBu",
                "name": "Burundian Franc",
                "symbol_native": "FBu",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "BIF",
                "name_plural": "Burundian francs"
            },
            "BND": {
                "symbol": "BN$",
                "name": "Brunei Dollar",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "BND",
                "name_plural": "Brunei dollars"
            },
            "BOB": {
                "symbol": "Bs",
                "name": "Bolivian Boliviano",
                "symbol_native": "Bs",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "BOB",
                "name_plural": "Bolivian bolivianos"
            },
            "BRL": {
                "symbol": "R$",
                "name": "Brazilian Real",
                "symbol_native": "R$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "BRL",
                "name_plural": "Brazilian reals"
            },
            "BWP": {
                "symbol": "BWP",
                "name": "Botswanan Pula",
                "symbol_native": "P",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "BWP",
                "name_plural": "Botswanan pulas"
            },
            "BYR": {
                "symbol": "BYR",
                "name": "Belarusian Ruble",
                "symbol_native": "BYR",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "BYR",
                "name_plural": "Belarusian rubles"
            },
            "BZD": {
                "symbol": "BZ$",
                "name": "Belize Dollar",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "BZD",
                "name_plural": "Belize dollars"
            },
            "CDF": {
                "symbol": "CDF",
                "name": "Congolese Franc",
                "symbol_native": "FrCD",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "CDF",
                "name_plural": "Congolese francs"
            },
            "CHF": {
                "symbol": "CHF",
                "name": "Swiss Franc",
                "symbol_native": "CHF",
                "decimal_digits": 2,
                "rounding": 0.05,
                "code": "CHF",
                "name_plural": "Swiss francs"
            },
            "CLP": {
                "symbol": "CL$",
                "name": "Chilean Peso",
                "symbol_native": "$",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "CLP",
                "name_plural": "Chilean pesos"
            },
            "CNY": {
                "symbol": "CN¥",
                "name": "Chinese Yuan",
                "symbol_native": "CN¥",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "CNY",
                "name_plural": "Chinese yuan"
            },
            "COP": {
                "symbol": "CO$",
                "name": "Colombian Peso",
                "symbol_native": "$",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "COP",
                "name_plural": "Colombian pesos"
            },
            "CRC": {
                "symbol": "₡",
                "name": "Costa Rican Colón",
                "symbol_native": "₡",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "CRC",
                "name_plural": "Costa Rican colóns"
            },
            "CVE": {
                "symbol": "CV$",
                "name": "Cape Verdean Escudo",
                "symbol_native": "CV$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "CVE",
                "name_plural": "Cape Verdean escudos"
            },
            "CZK": {
                "symbol": "Kč",
                "name": "Czech Republic Koruna",
                "symbol_native": "Kč",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "CZK",
                "name_plural": "Czech Republic korunas"
            },
            "DJF": {
                "symbol": "Fdj",
                "name": "Djiboutian Franc",
                "symbol_native": "Fdj",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "DJF",
                "name_plural": "Djiboutian francs"
            },
            "DKK": {
                "symbol": "Dkr",
                "name": "Danish Krone",
                "symbol_native": "kr",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "DKK",
                "name_plural": "Danish kroner"
            },
            "DOP": {
                "symbol": "RD$",
                "name": "Dominican Peso",
                "symbol_native": "RD$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "DOP",
                "name_plural": "Dominican pesos"
            },
            "DZD": {
                "symbol": "DA",
                "name": "Algerian Dinar",
                "symbol_native": "د.ج.‏",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "DZD",
                "name_plural": "Algerian dinars"
            },
            "EEK": {
                "symbol": "Ekr",
                "name": "Estonian Kroon",
                "symbol_native": "kr",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "EEK",
                "name_plural": "Estonian kroons"
            },
            "EGP": {
                "symbol": "EGP",
                "name": "Egyptian Pound",
                "symbol_native": "ج.م.‏",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "EGP",
                "name_plural": "Egyptian pounds"
            },
            "ERN": {
                "symbol": "Nfk",
                "name": "Eritrean Nakfa",
                "symbol_native": "Nfk",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "ERN",
                "name_plural": "Eritrean nakfas"
            },
            "ETB": {
                "symbol": "Br",
                "name": "Ethiopian Birr",
                "symbol_native": "Br",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "ETB",
                "name_plural": "Ethiopian birrs"
            },
            "GBP": {
                "symbol": "£",
                "name": "British Pound Sterling",
                "symbol_native": "£",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "GBP",
                "name_plural": "British pounds sterling"
            },
            "GEL": {
                "symbol": "GEL",
                "name": "Georgian Lari",
                "symbol_native": "GEL",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "GEL",
                "name_plural": "Georgian laris"
            },
            "GHS": {
                "symbol": "GH₵",
                "name": "Ghanaian Cedi",
                "symbol_native": "GH₵",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "GHS",
                "name_plural": "Ghanaian cedis"
            },
            "GNF": {
                "symbol": "FG",
                "name": "Guinean Franc",
                "symbol_native": "FG",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "GNF",
                "name_plural": "Guinean francs"
            },
            "GTQ": {
                "symbol": "GTQ",
                "name": "Guatemalan Quetzal",
                "symbol_native": "Q",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "GTQ",
                "name_plural": "Guatemalan quetzals"
            },
            "HKD": {
                "symbol": "HK$",
                "name": "Hong Kong Dollar",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "HKD",
                "name_plural": "Hong Kong dollars"
            },
            "HNL": {
                "symbol": "HNL",
                "name": "Honduran Lempira",
                "symbol_native": "L",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "HNL",
                "name_plural": "Honduran lempiras"
            },
            "HRK": {
                "symbol": "kn",
                "name": "Croatian Kuna",
                "symbol_native": "kn",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "HRK",
                "name_plural": "Croatian kunas"
            },
            "HUF": {
                "symbol": "Ft",
                "name": "Hungarian Forint",
                "symbol_native": "Ft",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "HUF",
                "name_plural": "Hungarian forints"
            },
            "IDR": {
                "symbol": "Rp",
                "name": "Indonesian Rupiah",
                "symbol_native": "Rp",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "IDR",
                "name_plural": "Indonesian rupiahs"
            },
            "ILS": {
                "symbol": "₪",
                "name": "Israeli New Sheqel",
                "symbol_native": "₪",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "ILS",
                "name_plural": "Israeli new sheqels"
            },
            "INR": {
                "symbol": "Rs",
                "name": "Indian Rupee",
                "symbol_native": "টকা",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "INR",
                "name_plural": "Indian rupees"
            },
            "IQD": {
                "symbol": "IQD",
                "name": "Iraqi Dinar",
                "symbol_native": "د.ع.‏",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "IQD",
                "name_plural": "Iraqi dinars"
            },
            "IRR": {
                "symbol": "IRR",
                "name": "Iranian Rial",
                "symbol_native": "﷼",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "IRR",
                "name_plural": "Iranian rials"
            },
            "ISK": {
                "symbol": "Ikr",
                "name": "Icelandic Króna",
                "symbol_native": "kr",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "ISK",
                "name_plural": "Icelandic krónur"
            },
            "JMD": {
                "symbol": "J$",
                "name": "Jamaican Dollar",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "JMD",
                "name_plural": "Jamaican dollars"
            },
            "JOD": {
                "symbol": "JD",
                "name": "Jordanian Dinar",
                "symbol_native": "د.أ.‏",
                "decimal_digits": 3,
                "rounding": 0,
                "code": "JOD",
                "name_plural": "Jordanian dinars"
            },
            "JPY": {
                "symbol": "¥",
                "name": "Japanese Yen",
                "symbol_native": "￥",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "JPY",
                "name_plural": "Japanese yen"
            },
            "KES": {
                "symbol": "Ksh",
                "name": "Kenyan Shilling",
                "symbol_native": "Ksh",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "KES",
                "name_plural": "Kenyan shillings"
            },
            "KHR": {
                "symbol": "KHR",
                "name": "Cambodian Riel",
                "symbol_native": "៛",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "KHR",
                "name_plural": "Cambodian riels"
            },
            "KMF": {
                "symbol": "CF",
                "name": "Comorian Franc",
                "symbol_native": "FC",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "KMF",
                "name_plural": "Comorian francs"
            },
            "KRW": {
                "symbol": "₩",
                "name": "South Korean Won",
                "symbol_native": "₩",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "KRW",
                "name_plural": "South Korean won"
            },
            "KWD": {
                "symbol": "KD",
                "name": "Kuwaiti Dinar",
                "symbol_native": "د.ك.‏",
                "decimal_digits": 3,
                "rounding": 0,
                "code": "KWD",
                "name_plural": "Kuwaiti dinars"
            },
            "KZT": {
                "symbol": "KZT",
                "name": "Kazakhstani Tenge",
                "symbol_native": "тңг.",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "KZT",
                "name_plural": "Kazakhstani tenges"
            },
            "LBP": {
                "symbol": "LB£",
                "name": "Lebanese Pound",
                "symbol_native": "ل.ل.‏",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "LBP",
                "name_plural": "Lebanese pounds"
            },
            "LKR": {
                "symbol": "SLRs",
                "name": "Sri Lankan Rupee",
                "symbol_native": "SL Re",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "LKR",
                "name_plural": "Sri Lankan rupees"
            },
            "LTL": {
                "symbol": "Lt",
                "name": "Lithuanian Litas",
                "symbol_native": "Lt",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "LTL",
                "name_plural": "Lithuanian litai"
            },
            "LVL": {
                "symbol": "Ls",
                "name": "Latvian Lats",
                "symbol_native": "Ls",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "LVL",
                "name_plural": "Latvian lati"
            },
            "LYD": {
                "symbol": "LD",
                "name": "Libyan Dinar",
                "symbol_native": "د.ل.‏",
                "decimal_digits": 3,
                "rounding": 0,
                "code": "LYD",
                "name_plural": "Libyan dinars"
            },
            "MAD": {
                "symbol": "MAD",
                "name": "Moroccan Dirham",
                "symbol_native": "د.م.‏",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "MAD",
                "name_plural": "Moroccan dirhams"
            },
            "MDL": {
                "symbol": "MDL",
                "name": "Moldovan Leu",
                "symbol_native": "MDL",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "MDL",
                "name_plural": "Moldovan lei"
            },
            "MGA": {
                "symbol": "MGA",
                "name": "Malagasy Ariary",
                "symbol_native": "MGA",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "MGA",
                "name_plural": "Malagasy Ariaries"
            },
            "MKD": {
                "symbol": "MKD",
                "name": "Macedonian Denar",
                "symbol_native": "MKD",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "MKD",
                "name_plural": "Macedonian denari"
            },
            "MMK": {
                "symbol": "MMK",
                "name": "Myanma Kyat",
                "symbol_native": "K",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "MMK",
                "name_plural": "Myanma kyats"
            },
            "MOP": {
                "symbol": "MOP$",
                "name": "Macanese Pataca",
                "symbol_native": "MOP$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "MOP",
                "name_plural": "Macanese patacas"
            },
            "MUR": {
                "symbol": "MURs",
                "name": "Mauritian Rupee",
                "symbol_native": "MURs",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "MUR",
                "name_plural": "Mauritian rupees"
            },
            "MXN": {
                "symbol": "MX$",
                "name": "Mexican Peso",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "MXN",
                "name_plural": "Mexican pesos"
            },
            "MYR": {
                "symbol": "RM",
                "name": "Malaysian Ringgit",
                "symbol_native": "RM",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "MYR",
                "name_plural": "Malaysian ringgits"
            },
            "MZN": {
                "symbol": "MTn",
                "name": "Mozambican Metical",
                "symbol_native": "MTn",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "MZN",
                "name_plural": "Mozambican meticals"
            },
            "NAD": {
                "symbol": "N$",
                "name": "Namibian Dollar",
                "symbol_native": "N$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "NAD",
                "name_plural": "Namibian dollars"
            },
            "NGN": {
                "symbol": "₦",
                "name": "Nigerian Naira",
                "symbol_native": "₦",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "NGN",
                "name_plural": "Nigerian nairas"
            },
            "NIO": {
                "symbol": "C$",
                "name": "Nicaraguan Córdoba",
                "symbol_native": "C$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "NIO",
                "name_plural": "Nicaraguan córdobas"
            },
            "NOK": {
                "symbol": "Nkr",
                "name": "Norwegian Krone",
                "symbol_native": "kr",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "NOK",
                "name_plural": "Norwegian kroner"
            },
            "NPR": {
                "symbol": "NPRs",
                "name": "Nepalese Rupee",
                "symbol_native": "नेरू",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "NPR",
                "name_plural": "Nepalese rupees"
            },
            "NZD": {
                "symbol": "NZ$",
                "name": "New Zealand Dollar",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "NZD",
                "name_plural": "New Zealand dollars"
            },
            "OMR": {
                "symbol": "OMR",
                "name": "Omani Rial",
                "symbol_native": "ر.ع.‏",
                "decimal_digits": 3,
                "rounding": 0,
                "code": "OMR",
                "name_plural": "Omani rials"
            },
            "PAB": {
                "symbol": "B/.",
                "name": "Panamanian Balboa",
                "symbol_native": "B/.",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "PAB",
                "name_plural": "Panamanian balboas"
            },
            "PEN": {
                "symbol": "S/.",
                "name": "Peruvian Nuevo Sol",
                "symbol_native": "S/.",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "PEN",
                "name_plural": "Peruvian nuevos soles"
            },
            "PHP": {
                "symbol": "₱",
                "name": "Philippine Peso",
                "symbol_native": "₱",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "PHP",
                "name_plural": "Philippine pesos"
            },
            "PKR": {
                "symbol": "PKRs",
                "name": "Pakistani Rupee",
                "symbol_native": "₨",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "PKR",
                "name_plural": "Pakistani rupees"
            },
            "PLN": {
                "symbol": "zł",
                "name": "Polish Zloty",
                "symbol_native": "zł",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "PLN",
                "name_plural": "Polish zlotys"
            },
            "PYG": {
                "symbol": "₲",
                "name": "Paraguayan Guarani",
                "symbol_native": "₲",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "PYG",
                "name_plural": "Paraguayan guaranis"
            },
            "QAR": {
                "symbol": "QR",
                "name": "Qatari Rial",
                "symbol_native": "ر.ق.‏",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "QAR",
                "name_plural": "Qatari rials"
            },
            "RON": {
                "symbol": "RON",
                "name": "Romanian Leu",
                "symbol_native": "RON",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "RON",
                "name_plural": "Romanian lei"
            },
            "RSD": {
                "symbol": "din.",
                "name": "Serbian Dinar",
                "symbol_native": "дин.",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "RSD",
                "name_plural": "Serbian dinars"
            },
            "RUB": {
                "symbol": "RUB",
                "name": "Russian Ruble",
                "symbol_native": "руб.",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "RUB",
                "name_plural": "Russian rubles"
            },
            "RWF": {
                "symbol": "RWF",
                "name": "Rwandan Franc",
                "symbol_native": "FR",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "RWF",
                "name_plural": "Rwandan francs"
            },
            "SAR": {
                "symbol": "SR",
                "name": "Saudi Riyal",
                "symbol_native": "ر.س.‏",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "SAR",
                "name_plural": "Saudi riyals"
            },
            "SDG": {
                "symbol": "SDG",
                "name": "Sudanese Pound",
                "symbol_native": "SDG",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "SDG",
                "name_plural": "Sudanese pounds"
            },
            "SEK": {
                "symbol": "Skr",
                "name": "Swedish Krona",
                "symbol_native": "kr",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "SEK",
                "name_plural": "Swedish kronor"
            },
            "SGD": {
                "symbol": "S$",
                "name": "Singapore Dollar",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "SGD",
                "name_plural": "Singapore dollars"
            },
            "SOS": {
                "symbol": "Ssh",
                "name": "Somali Shilling",
                "symbol_native": "Ssh",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "SOS",
                "name_plural": "Somali shillings"
            },
            "SYP": {
                "symbol": "SY£",
                "name": "Syrian Pound",
                "symbol_native": "ل.س.‏",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "SYP",
                "name_plural": "Syrian pounds"
            },
            "THB": {
                "symbol": "฿",
                "name": "Thai Baht",
                "symbol_native": "฿",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "THB",
                "name_plural": "Thai baht"
            },
            "TND": {
                "symbol": "DT",
                "name": "Tunisian Dinar",
                "symbol_native": "د.ت.‏",
                "decimal_digits": 3,
                "rounding": 0,
                "code": "TND",
                "name_plural": "Tunisian dinars"
            },
            "TOP": {
                "symbol": "T$",
                "name": "Tongan Paʻanga",
                "symbol_native": "T$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "TOP",
                "name_plural": "Tongan paʻanga"
            },
            "TRY": {
                "symbol": "TL",
                "name": "Turkish Lira",
                "symbol_native": "TL",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "TRY",
                "name_plural": "Turkish Lira"
            },
            "TTD": {
                "symbol": "TT$",
                "name": "Trinidad and Tobago Dollar",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "TTD",
                "name_plural": "Trinidad and Tobago dollars"
            },
            "TWD": {
                "symbol": "NT$",
                "name": "New Taiwan Dollar",
                "symbol_native": "NT$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "TWD",
                "name_plural": "New Taiwan dollars"
            },
            "TZS": {
                "symbol": "TSh",
                "name": "Tanzanian Shilling",
                "symbol_native": "TSh",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "TZS",
                "name_plural": "Tanzanian shillings"
            },
            "UAH": {
                "symbol": "₴",
                "name": "Ukrainian Hryvnia",
                "symbol_native": "₴",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "UAH",
                "name_plural": "Ukrainian hryvnias"
            },
            "UGX": {
                "symbol": "USh",
                "name": "Ugandan Shilling",
                "symbol_native": "USh",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "UGX",
                "name_plural": "Ugandan shillings"
            },
            "UYU": {
                "symbol": "$U",
                "name": "Uruguayan Peso",
                "symbol_native": "$",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "UYU",
                "name_plural": "Uruguayan pesos"
            },
            "UZS": {
                "symbol": "UZS",
                "name": "Uzbekistan Som",
                "symbol_native": "UZS",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "UZS",
                "name_plural": "Uzbekistan som"
            },
            "VEF": {
                "symbol": "Bs.F.",
                "name": "Venezuelan Bolívar",
                "symbol_native": "Bs.F.",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "VEF",
                "name_plural": "Venezuelan bolívars"
            },
            "VND": {
                "symbol": "₫",
                "name": "Vietnamese Dong",
                "symbol_native": "₫",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "VND",
                "name_plural": "Vietnamese dong"
            },
            "XAF": {
                "symbol": "FCFA",
                "name": "CFA Franc BEAC",
                "symbol_native": "FCFA",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "XAF",
                "name_plural": "CFA francs BEAC"
            },
            "XOF": {
                "symbol": "CFA",
                "name": "CFA Franc BCEAO",
                "symbol_native": "CFA",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "XOF",
                "name_plural": "CFA francs BCEAO"
            },
            "YER": {
                "symbol": "YR",
                "name": "Yemeni Rial",
                "symbol_native": "ر.ي.‏",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "YER",
                "name_plural": "Yemeni rials"
            },
            "ZAR": {
                "symbol": "R",
                "name": "South African Rand",
                "symbol_native": "R",
                "decimal_digits": 2,
                "rounding": 0,
                "code": "ZAR",
                "name_plural": "South African rand"
            },
            "ZMK": {
                "symbol": "ZK",
                "name": "Zambian Kwacha",
                "symbol_native": "ZK",
                "decimal_digits": 0,
                "rounding": 0,
                "code": "ZMK",
                "name_plural": "Zambian kwachas"
            }
        }
    },

	gradeCheck: function(type, broad, grade) {
		var getResult = false;
		var getList = type === "admin" ? chatAdminList : chatBjList;
		
		if(broad !== "twitch") {
			getResult = $.inArray(grade, getList) > -1;
		}
		else {
			var getGrade = grade.split(" ");
			$.each(getGrade, function(key, value) {
				if($.inArray(value, getList) > -1) {
					getResult = true;
					return false;
				}
			});
		}
		return getResult;
	},

	dashboard: {
		clear: function() {
			if(localOpt.localcheck() === true) {
   				$.each(localStorage, function(key, value) {
       				if(key.indexOf("afreecahelper_dashboard_summary_") > -1 || key.indexOf("afreecahelper_dashboard_info_") > -1 || key.indexOf("afreecahelper_dashboard_vod_") > -1) {
   						localStorage.removeItem(key);
       				}
       			});
       		}
		}
	}
}

var a = String.fromCharCode(12),
s = String.fromCharCode(27),
l = String.fromCharCode(9);

Number.prototype.padLeft = function(e, t) {
    return Array(e - String(this).length + 1).join(t || "0") + this;
}