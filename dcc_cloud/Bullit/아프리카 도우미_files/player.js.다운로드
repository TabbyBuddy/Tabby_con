function pageLoad() {
    player.init();
}

var debugInterval = null;
function debugMsg(msg) {
    clearTimeout(debugInterval);
    $("#player .debug_msg").html(msg).fadeIn(200);
    debugInterval = setTimeout(function() {
        $("#player .debug_msg").fadeOut(200);
    }, 1000);
}

var connectArray = ["chat","alert","goal","subtitle","banner"];

var player = {
    opt: {
        prevlasttime:[0,"",0,"",0,"",0,"",0,"",0,""],
        connect: false,
        connectload: false,
        bnocheck:true,
        station:"",
        broadno:"",
        use: true,
        chat: true,
        fontsize: null,
        opacity: null,
        sound: true,
        starttime:null,
        lasttime:null
    },
    init: function() {
        //ajax timeout 전역
        $.ajaxSetup({
            timeout: 10000
        });
        
        //서브페이지 타입
        if(typeof sub === 'undefined' || typeof sub[subType] === 'undefined' || typeof randomRange === 'undefined' || typeof io === 'undefined' || typeof fx === 'undefined' || typeof gapi === 'undefined') {
            setTimeout(function() {
                location.reload(true);
            }, 1000);
        }
        else {
            //에러메시지 표시 제거
            $("body.player").removeClass("pageload");
            
            //소켓 연결
            if(subType == "alert" && npageCheck == "") {
                clearTimeout(player.setup.pageinterval);
                return false;
            }
            else {
                doTimeout("player_init", function() {
                    //소켓 접속
                    player.socket.init();
                    
                    //설정 불러오기
                    sub[subType].init();
                    
                    player.setup.load(subType, function() {
                        if(sub.debug) console.log("setup load replace load");
                        
                        if(subType === "chat") {
                            doTimeout("player_previewchat", function() {
                                sub.chat.previewchat(true);
                            }, 10000);
                        }
                    });
                    
                    //툴팁 옵션
                    player.tooltip.init();
                    
                    //환율 정보
                    replace.money.init();
                    
                    comm.init();
                }, randomRange(1, 20) * 100);
            }
        }
    },
    
    //TODO 설정 불러오기
    setup: {
        loadcheck:false,
        firstload:true,
        prevtime:"",
        load: function(id, func) {
            //로딩 실패 표시
            doTimeout("setup_load_fail",function() {
                $("body").addClass("error");
                $("#error_msg_box").find(".top_value").html("설정 내용 불러오기 실패").end().find(".content_value").html("설정된 정보를 불러오지 못했습니다. URL을 새로고침 해주세요.");
            }, 10000);
            
            //로컬 불러오기
            var getOpt = [false,null];
            if(player.setup.firstload == true) {
                getOpt = localOpt.load(id);
                if(sub.debug) console.log("로컬 옵션", getOpt);
                if(getOpt[0] == true && getOpt[1] != null && getOpt[1].data != undefined && getOpt[1].times != undefined) {
                    player.setup.prevtime = getOpt[1].times;
                    
                    doTimeout("setup_load_local",function() {
                        player.setup.run("local", id, getOpt[1], func);
                    }, 5000);
                }
            }
            
            //옵션 불러오기
            $.ajax({
                type:"POST",
                url:datasaveLink + "save.php",
                dataType:"json",
                data:{
                    id:"player",
                    type:"load",
                    myid:myKey,
                    myidx:idxNum,
                    page:id,
                    sub:subPage,
                    ncheck:npageCheck,
                    time:player.setup.prevtime
                },
                success: function(data) {
                    if(sub.debug) console.log("save load",data,data.times);
                    if(getOpt[0] == true && data.times != undefined && data.times == player.setup.prevtime) {
                        //console.log("로컬 불러오기");
                        player.setup.run("local", id, getOpt[1], func);
                    }
                    else {
                        player.setup.run("server", id, data, func);
                    }
                },
                error: function() {
                    //에러 로그 저장
                    var getLogLoad = {
                        login:loginInfo,
                        url:window.location.href,
                        load:{
                            myid:myKey,
                            myidx:idxNum,
                            page:id,
                            sub:subPage,
                            ncheck:npageCheck,
                            time:player.setup.prevtime
                        }
                    }
                    $.ajax({
                        type:"POST",
                        url:logUrl + "lib/getlog.php",
                        data:{
                            type:"playerload",
                            log:JSON.stringify(getLogLoad)
                        }
                    });
                    
                    var getErrorArray = window.location.href.split("&erroridx=");
                    if(getErrorArray.length > 1) {
                        var getErrorIdx = parseInt(getErrorArray[1].split("&")[0], 10);
                        location.href = getErrorArray[0] + "&erroridx=" + (getErrorIdx + 1);
                    }
                    else {
                        location.href = getErrorArray[0] + "&erroridx=0";
                    }
                    
                }
            });
        },
        //옵션 실행
        run: function(type, id, data, func) {
            doTimeout("setup_load_fail", false);
            doTimeout("setup_load_local", false);
            
            if(data.result == -1) {
                $("body").addClass("error");
                $("#error_msg_box").find(".top_value").html("설정 내용 불러오기 실패").end().find(".content_value").html("저장된 설정 내용이 없습니다. 아프리카 도우미에서 설정 저장을 해주세요.");
            }
            else {
                player.setup.loadcheck = true;
                $("body").removeClass("error");
            }
            
            if(data && data.result && data.result == 1) {
                if(data.data != undefined && sub[id] != undefined) {
                    //불러온 옵션 저장
                    if(type == "server") {
                        if(sub.debug) console.log("불러온 옵션 저장", data.data, data.data.times);
                        localOpt.save(data.data,data.data.times);
                    }
                    
                    var loadData = data.data.data;
                    var prevData = sub[id].data;
                    
                    //커스텀 스타일
                    try{
                        if(loadData.customstyle != undefined) {
                            if(loadData.customstyle === true) {
                                $("head .item_customstyle").remove();
                                $("head").append("<style class='item_customstyle'>" + loadData.customstylecss + "</style>");
                                loadData.customstylecss = "";
                            }
                            else if(loadData.customstyle === false) {
                                $("head .item_customstyle").remove();
                            }
                        }
                    }
                    catch(error) {
                        
                    }
                    
                    //설정값
                    sub[id].data = loadData;
                    
                    //설정 스타일 class
                    if(data.data.head && data.data.head != "") {
                        $("head .item_addstyle").remove();
                        $("head").append("<style class='item_addstyle'>" + data.data.head + "</style>");
                    }
                    if(data.data.cls && data.data.cls != "") {
                        $(".item_" + id).attr("class",data.data.cls);
                    }
                    if(data.data.style && data.data.style != "") {
                        $(".item_" + id).attr("style",data.data.style);
                    }
                    
                    //버전 체크
                    if(data.data.ver == undefined || 20170519 > parseInt(data.data.ver, 10)) {
                        if(sub.debug) console.log("이전 버전 설정 변경", data.data.ver);
                        if(id == "chat") {
                            //아이콘 표시 설정
                            loadData.afreecagender = false;
                            loadData.afreecaagent = false;
                            loadData.afreecatop = false;
                            loadData.afreecafan = false;
                            loadData.afreecasup = false;
                            loadData.afreecaquick = false;
                            loadData.afreecabj = true;
                            loadData.afreecamanager = true;
                            
                            if(loadData.gender == true) {
                                loadData.afreecagender = true;
                            }
                            if(loadData.agent == true) {
                                loadData.afreecaagent = true;
                            }
                            if(loadData.grade == true) {
                                loadData.afreecatop = true;
                                loadData.afreecafan = true;
                                loadData.afreecasup = true;
                                loadData.afreecaquick = true;
                            }
                            
                            loadData.twitchadmin = true;
                            loadData.twitchbroadcaster = true;
                            loadData.twitchmoderator = true;
                            loadData.twitchbits = false;
                            loadData.twitchturbo = false;
                            loadData.twitchpremium = false;
                            loadData.twitchsubscriber = false;
                            if(loadData.grade == true) {
                                loadData.twitchbits = true;
                                loadData.twitchturbo = true;
                                loadData.twitchpremium = true;
                                loadData.twitchsubscriber = true;
                            }
                            
                            loadData.youtubeowner = true;
                            loadData.youtubemoderator = true;
                            loadData.youtubesponsor = false;
                            if(loadData.grade == true) {
                                loadData.youtubesponsor = true;
                            }
                            
                            loadData.kakaotvpd = true;
                            loadData.kakaotvad = true;
                        }
                    }
                    
                    if(data.data.ver == undefined || 20170715 > parseInt(data.data.ver, 10)) {
                        if(id == "subtitle") {
                            if(loadData.theme == "star" && loadData.starlist == undefined) {
                                loadData.theme = "star";
                                loadData.starlist = ["star"];
                            }
                            else if(loadData.theme == "ytstar") {
                                loadData.theme = "star";
                                loadData.starlist = ["superchat"];
                            }
                            else if(loadData.theme == "kastar") {
                                loadData.theme = "star";
                                loadData.starlist = ["cookie"];
                            }
                            else if(loadData.theme == "twstar" || loadData.theme == "bits") {
                                loadData.theme = "star";
                                loadData.starlist = ["bits"];
                            }
                        }
                    }
                    
                    if(data.data.ver == undefined || 20170718 > parseInt(data.data.ver, 10)) {
                        if(id == "chat") {
                            if(loadData.enter == true) loadData.chatalign = "item_chat_enter";
                            else if(loadData.align == true) loadData.chatalign = "item_chat_align";
                            else loadData.chatalign = "item_chat_normal";
                            loadData.align = false;
                            loadData.enter = false;
                        }
                    }
                    
                    //별풍선 사용시 구독 사용 추가
                    if(data.data.ver == undefined || 20180724 > parseInt(data.data.ver, 10)) {
                        if(id == "alert" && sub[id].data != undefined && sub[id].data.detailstar != undefined && sub[id].data.useafreecatvsubscription == undefined) {
                            $.each(sub[id].data.detailstar, function(keys, values) {
                                if($.inArray("star", values.type) > -1) {
                                    sub[id].data.useafreecatvsubscription = true;
                                    if($.inArray("afsubscription", sub[id].data.typelist) == -1) {
                                        sub[id].data.typelist.push("afsubscription");
                                    }
                                    return false;
                                }
                            });
                        }
                    }
                    
                    //골 캐릭터 이미지
                    if(id == "goal") {
                        if(loadData.type == "starm") {
                            if(loadData.charimg == undefined) {
                                loadData.charimg = true;
                                $("#item_goal").addClass("item_goal_charimg");
                            }
                        }
                    }
                    
                    var loadBroadList = [];
                    var loadDetailList = "";
                    
                    //TODO 설정별 방송리스트
                    if(id == "chat") {
                        //채팅 위젯 사용방식 변경
                        loadData.clock = false;
                        loadData.widgetvote = false;
                        $("#item_chat").addClass("item_chat_clock item_chat_widgetvote");
                        
                        //채팅 테마 박스 선택 방식 변경
                        var addThemeClass = "";
                        var removeThemeClass = "";
                        
                        if(loadData.kakaotalktype === undefined) loadData.kakaotalktype = "kakaotalk_normal";
		                if(loadData.motortype === undefined) loadData.motortype = "motor_normal";
		                if(loadData.neontype === undefined) loadData.neontype = "neon_normal";
		                if(loadData.boxtype === undefined) loadData.boxtype = "box_fullwide";
		                if(loadData.boxroundtype === undefined) loadData.boxroundtype = "boxround_fullwide";
		                if(loadData.theme === "kakaotalk") {
		                	addThemeClass += " " + loadData.kakaotalktype;
		                }
		                else if(loadData.theme === "kakaotalk2") {
		            		loadData.theme = "kakaotalk";
		            		loadData.kakaotalktype = "kakaotalk_userleft";
		            		addThemeClass += " chat_theme_kakaotalk " + loadData.kakaotalktype;
		            		removeThemeClass += " chat_theme_kakaotalk2";
		            	}
		            	else if(loadData.theme === "motor") {
		            		addThemeClass += " " + loadData.motortype;
		            	}	
		            	else if(loadData.theme === "motor2") {
		            		loadData.theme = "motor";
		            		loadData.motortype = "motor_multiline";
		            		addThemeClass += " chat_theme_motor " + loadData.motortype;
		            		removeThemeClass += " chat_theme_motor2";
		            	}
		            	if(loadData.effect === "box" || loadData.effect === "box2" || loadData.effect === "box3" || loadData.effect === "boxw" || loadData.effect === "boxw2" || loadData.effect === "boxw3") {
		            		loadData.theme = "box";
		            		if(loadData.effect === "box2" || loadData.effect === "boxw2") loadData.boxtype = "box_chat";
		            		else if(loadData.effect === "box3" || loadData.effect === "boxw3") loadData.boxtype = "box_chatwide";
		            		if(loadData.effect === "box" || loadData.effect === "box2" || loadData.effect === "box3") {
		            			loadData.boxbg = "rgba(0, 0, 0, 0.4)";
		            			loadData.boxtype += " boxb";
		            		}
		            		else if(loadData.effect === "boxw" || loadData.effect === "boxw2" || loadData.effect === "boxw3") {
		            			loadData.boxbg = "rgba(255, 255, 255, 0.4)";
		            			loadData.boxtype += " boxw";
		            		}
		            		loadData.effect = "fadeIn";
		            		addThemeClass += " chat_theme_box " + loadData.boxtype;
		            		
		            		//모든 테마 삭제
		            		var getItemClass = $("#item_chat").attr("class");
		            		var getClassArray = [];
		            		$.each(getItemClass.split(" "), function(key, value) {
		            			if(value.indexOf("chat_theme_") === 0) {
		            				getClassArray.push(value);
		            			}
		            		});
		            		removeThemeClass += " " + getClassArray.join(" ");
		            	}
		                if(loadData.effect === "fade") loadData.effect = "fadeIn";
		                else if(loadData.effect === "up") loadData.effect = "slideInUp";
		                else if(loadData.effect === "left") loadData.effect = "slideInRight";
		                else if(loadData.effect === "right") loadData.effect = "slideInLeft";
		                $("#item_chat").removeClass(removeThemeClass).addClass(addThemeClass);
                    
                        if(loadData.autoeach == undefined) loadData.autoeach = false;
                        if(loadData.autotime == undefined || isNaN(loadData.autotime)) loadData.autotime = 30;
                        loadData.autotime = parseInt(loadData.autotime, 10);
                        
                        //탄막 설정
                        if(prevData.type != loadData.type) {
                            $(".item_chat .chat_list").empty();
                            $("head .item_chat_bulletstart").remove();
                        }
                        if(loadData.type == "bullet") {
                            getBulletWidth = $(".item_chat").width();
                            $("head").append("<style class='item_chat_bulletstart'>.item_chat.bullet .chat_list li{transform:translateX(" + getBulletWidth + "px)}}</style>");
                        }
                        else {
                            sub.chat.scroll.bottom(true,true);
                        }
                        
                        sub.chat.opt.multiple = false;
                        sub.chat.opt.multilen = 0;
                        
                        if(loadData.afreecatv == undefined || (loadData.afreecatv != undefined && loadData.afreecatv == true && loginInfo.bjid !== "")) {
                            sub.chat.opt.broadlist.push("afreecatv");
                            loadBroadList.push("afreecatv");
                            sub.chat.opt.multilen += 1;
                        }
                        else {
                        	loadData.afreecatv = false;
                        	$("#item_chat").removeClass("item_chat_afreecatv");
                        }
                        if(loadData.twitch != undefined && loadData.twitch == true && loginInfo.twid !== "") {
                            sub.chat.opt.broadlist.push("twitch");
                            loadBroadList.push("twitch");
                            sub.chat.opt.multilen += 1;
                        }
                        else {
                        	loadData.twitch = false;
                        	$("#item_chat").removeClass("item_chat_twitch");
                        }
                        if(loadData.youtube != undefined && loadData.youtube == true && loginInfo.ytchid !== "") {
                            sub.chat.opt.broadlist.push("youtube");
                            loadBroadList.push("youtube");
                            sub.chat.opt.multilen += 1;
                        }
                        else {
                        	loadData.youtube = false;
                        	$("#item_chat").removeClass("item_chat_youtube");
                        }
                        if(loadData.kakaotv != undefined && loadData.kakaotv == true && loginInfo.kaid !== "") {
                            sub.chat.opt.broadlist.push("kakaotv");
                            loadBroadList.push("kakaotv");
                            sub.chat.opt.multilen += 1;
                        }
                        else {
                        	loadData.kakaotv = false;
                        	$("#item_chat").removeClass("item_chat_kakaotv");
                        }
                        if(loadData.navertv != undefined && loadData.navertv == true && loginInfo.naid !== "") {
                            sub.chat.opt.broadlist.push("navertv");
                            loadBroadList.push("navertv");
                            sub.chat.opt.multilen += 1;
                        }
                        else {
                        	loadData.navertv = false;
                        	$("#item_chat").removeClass("item_chat_navertv");
                        }
                        if(loadData.facebook != undefined && loadData.facebook == true && loginInfo.faid !== "") {
                            sub.chat.opt.broadlist.push("facebook");
                            loadBroadList.push("facebook");
                            sub.chat.opt.multilen += 1;
                        }
                        else {
                        	loadData.facebook = false;
                        	$("#item_chat").removeClass("item_chat_facebook");
                        }
                        if(loadData.goldlive != undefined && loadData.goldlive == true && loginInfo.gdid !== "") {
                            sub.chat.opt.broadlist.push("goldlive");
                            loadBroadList.push("goldlive");
                            sub.chat.opt.multilen += 1;
                        }
                        else {
                        	loadData.goldlive = false;
                        	$("#item_chat").removeClass("item_chat_goldlive");
                        }
                        
                        //방송 아이콘 설정 임시
                        if(loadData.broadicon == undefined) {
                            if(sub.chat.opt.multilen == 1 && loadBroadList[0] == "afreecatv") {
                                loadData.broadicon = false;
                            }
                            else if(sub.chat.opt.multilen > 1) {
                                loadData.broadicon = true;
                            }
                        }
                        
                        if(loadBroadList.length > 1) {
                            sub.chat.opt.multiple = true;
                            $("#item_chat").addClass("multiple");
                        }
                        
                        //위젯 설정
                        player.widget.stop();
                        if(loadData.widgetuser != undefined && loadData.widgetuser == true) {
                            $("#item_chat").removeClass("user1 user2 user3 user4 user5").addClass("user" + sub.chat.opt.multilen);
                            player.widget.user.load(loadBroadList);
                        }
                        
                        //채팅 분할 설정
                        if(loadData.split != undefined) {
                            var checkSplitChange = false;
                            if(prevData.split != loadData.split) checkSplitChange = true;
                            if(checkSplitChange == false) {
                                $.each(prevData.splitlist, function(key, value) {
                                    if(loadData.splitlist[key] == undefined || loadData.splitlist[key] != value) {
                                        checkSplitChange = true;
                                        return false;
                                    }
                                });
                            }
                            if(checkSplitChange == true) {
                                sub.chat.split();
                            }
                        }
                        
                        sub.chat.opt.filteridlist = "";
                        if(loadData.filterid != undefined) {
                            if(loadData.filterid == true && loadData.filteridlist != "") {
                                sub.chat.opt.filteridlist = loadData.filteridlist.toLowerCase();
                                
                                try{
                                    var getFilterWord = $.trim(loadData.filteridlist.replace(/\r\n|\n/gi,","));
                                    var getFilterArray = getFilterWord.split(",");
                                    var getFilterList = [];
                                    $.each(getFilterArray, function(key, value) {
                                        if(value !== "") {
                                            getFilterList.push(value.toLowerCase());
                                        }
                                    });
                                    sub.chat.opt.filteridlist = getFilterList;
                                }
                                catch(error) {
                                    
                                }
                            }
                        }
                        else {
                            loadData.filterid = false;
                        }
                        
                        //공지 높이
                        var getNoticeList = $("#item_chat .chat_list.notice_list");
                        if(getNoticeList.length > 0) {
                            $("#item_chat").css("padding-top", getNoticeList.find("li").outerHeight() + 30);
                        }
                        
                        //시계 표시
                        if(loadData.clocknow != undefined && loadData.clocknow === true && sub.chat.clock.timer == null) {
                            sub.chat.clock.load("!시간");
                        }
                        
                        //채팅음성 필터
                        if(loadData.speechfiltertext != undefined && loadData.speechfiltertext !== "") {
                            sub.chat.opt.speechfilter = "";
                            sub.chat.opt.speechcmdcancel = false;
                            var getSpeechFilter = loadData.speechfiltertext.split(",");
                            var getSpeechList = [];
                            $.each(getSpeechFilter, function(keys, values) {
                                var getSpeechText = $.trim(values);
                                if(getSpeechText !== "") {
                                    if(getSpeechText === "!") {
                                        sub.chat.opt.speechcmdcancel = true;
                                    }
                                    else {
                                        getSpeechList.push(values);
                                    }
                                }
                            });
                            if(getSpeechList.length > 0) {
                                sub.chat.opt.speechfilter = eval("/^" + getSpeechList.join("|") + "$/g");
                            }
                        }
                        
                        $("#item_chat").attr("fontfamily", loadData.font);
                    }
                    else if(id == "subtitle") {
                        $("#tooltip_box .subtitle_line").hide();
                        $("#tooltip_box .btn_subtitle_delete").removeClass("show");
                        $("#tooltip_box .btn_subtitle_modify").removeClass("show");
                        if(sub.subtitle.data.theme == "star") {
                            $.each(sub.subtitle.data.starlist, function(key, value) {
                                if(value == "star") {
                                    loadBroadList.push("afreecatv");
                                }
                                else if(value == "bits") {
                                    loadBroadList.push("twitch");
                                }
                                else if(value == "superchat") {
                                    loadBroadList.push("youtube");
                                }
                                else if(value == "cookie") {
                                    loadBroadList.push("kakaotv");
                                }
                                else if(value == "gold") {
                                    loadBroadList.push("goldlive");
                                }
                            });
                            
                            $("#tooltip_box .btn_subtitle_delete").addClass("show");
                            if(sub.subtitle.data.startype == "list" || sub.subtitle.data.startype == "add") {
                                $("#item_subtitle .subtitle .text").html("<ul id='star_list' class='star_list'></ul>");
                                sub.subtitle.opt.starlist = $("#star_list");
                            }
                            else if(sub.subtitle.data.startype == "rank" || sub.subtitle.data.startype == "broadall") {
                                $("#item_subtitle .subtitle .text").html("<p id='star_title' class='star_title'></p><table id='star_list' class='star_list'></table>");
                                sub.subtitle.opt.starlist = $("#star_list");
                            }
                            else {
                                sub.subtitle.opt.starlist = $("#item_subtitle .subtitle .text").html("");
                            }
                            
                            var getLoadTime = new Date().getTime();
                            function statsSubtitleLoad(ridx) {
                                if(ridx > 10) return;
                                doTimeout("statusdata_load", function() {
                                    if(comm.statsdata.connect == true) {
                                        if(socket != undefined && socket.connected == true) {
                                            var getLocalData = { idx:realIdx, type:subType, sub:subPage, stype:"load", ptype:"subtitle", data:{autocheck:sub.subtitle.data.autoreset, time:getLoadTime} };
                                            socket.emit("statsdata", getLocalData);
                                        }
                                        else{
                                            statsSubtitleLoad(ridx + 1);
                                        }
                                    }
                                    else {
                                        var getLocalData = comm.savedata.load("subtitle_localsave");
                                        if(getLocalData != null && getLocalData.data != undefined) {
                                            comm.statsdata.load(getLocalData.data);
                                        }
                                    }
                                }, 2000);
                            }
                            statsSubtitleLoad(0);
                        }
                        else if(sub.subtitle.data.theme == "normal") {
                            $("#tooltip_box .btn_subtitle_modify").addClass("show");
                            
                            if(sub.subtitle.opt.textdef == "") {
                                sub.subtitle.opt.textdef = sub.subtitle.data.text;
                            }
                            else {
                                if(sub.subtitle.opt.textdef == sub.subtitle.data.text && sub.subtitle.opt.textedit != "") {
                                    sub.subtitle.data.text = sub.subtitle.opt.textedit;
                                    sub.subtitle.opt.textedit = "";
                                }
                            }
                            sub.subtitle.opt.textdef = sub.subtitle.data.text;
                            
                            //TODO 자막 정보 표시 체크
                            if(sub.subtitle.data.text.indexOf("{추천리스트}") > -1 || sub.subtitle.data.text.indexOf("{추천수}") > -1 || sub.subtitle.data.text.indexOf("{전체추천수}") > -1 || sub.subtitle.data.text.indexOf("{누적시청자수}") > -1 || sub.subtitle.data.text.indexOf("{즐겨찾기수}") > -1 || sub.subtitle.data.text.indexOf("{팬클럽수}") > -1 || sub.subtitle.data.text.indexOf("{서포터수}") > -1 || sub.subtitle.data.text.indexOf("{제목}") > -1 || sub.subtitle.data.text.indexOf("{시작시간}") > -1 || sub.subtitle.data.text.indexOf("{시청자수}") > -1 || sub.subtitle.data.text.indexOf("{랭킹}") > -1 || sub.subtitle.data.text.indexOf("{상태}") > -1) {
                                loadBroadList.push("afreecatv");
                            }
                            if(sub.subtitle.data.text.indexOf("{트위치시청자수}") > -1 || sub.subtitle.data.text.indexOf("{트위치팔로우수}") > -1 || sub.subtitle.data.text.indexOf("{트위치시작시간}") > -1 || sub.subtitle.data.text.indexOf("{트위치제목}") > -1) {
                                loadBroadList.push("twitch");
                            }
                            if(sub.subtitle.data.text.indexOf("{유튜브시청자수}") > -1 || sub.subtitle.data.text.indexOf("{유튜브구독자수}") > -1 || sub.subtitle.data.text.indexOf("{유튜브시작시간}") > -1 || sub.subtitle.data.text.indexOf("{유튜브제목}") > -1) {
                                loadBroadList.push("youtube");
                            }
                            if(sub.subtitle.data.text.indexOf("{카카오시청자수}") > -1 || sub.subtitle.data.text.indexOf("{카카오추천수}") > -1 || sub.subtitle.data.text.indexOf("{카카오구독자수}") > -1 || sub.subtitle.data.text.indexOf("{카카오플러스친구수}") > -1 || sub.subtitle.data.text.indexOf("{카카오제목}") > -1) {
                                loadBroadList.push("kakaotv");
                            }
                            if(sub.subtitle.data.text.indexOf("{골드라이브시청자수}") > -1 || sub.subtitle.data.text.indexOf("{골드라이브추천수}") > -1) {
                                loadBroadList.push("goldlive");
                            }
                        }
                        
                        loadDetailList = sub.subtitle.data.theme;
                        
                        sub.subtitle.add();
                    }
                    else if(id == "alert") {
                        //이미지 프리로드
                        $.each(sub.alert.data.detailstar, function(key, value) {
                            if(value.bgimg == true && value.image.length > 0 && value.image[0][1] != "") {
                                var preimg = new Image();
                                //TODO 이미지 임시 변환
                                var getImgLoad = value.image[0][1];
                                if(getImgLoad.indexOf("imgur.com") > -1) {
                                    getImgLoad = "/lib/imgload.php?id=" + getImgLoad.split("/").pop();
                                }
                                preimg.src = getImgLoad;
                            }
                            if(value.bgimg == false) {
                                value.image = [["", ""]];
                            }
                            if(value.voicetype == "beep" && $.type(value.sound) === "string") {
                                value.sound = ["", replace.url(value.sound)];
                            }
                            if(value.voicetype == "chat") {
                                value.voicetype = "voice";
                                value.voicechat = true;
                            }
                        });
                        
                        if(sub.alert.data.detaildata == undefined) {
                            sub.alert.data.detaildata = {};
                            $.each(sub.alert.opt.detaillist, function(key, value) {
                                sub.alert.data.detaildata[value] = sub.alert.opt.detaildefault;
                                sub.alert.data.detaildata[value].textup = sub.alert.opt[key];
                            });
                            
                            if(sub.alert.data.detailafsubscription == undefined) {
                                sub.alert.data.detaildata["afsubscription"] = sub.alert.opt.detailafsubscription;
                                sub.alert.data.detaildata["afsubscription"].textup = sub.alert.opt["afsubscription"];
                            }
                            else {
                                sub.alert.data.detaildata["afsubscription"] = sub.alert.data.detailafsubscription;
                                sub.alert.data.detaildata["afsubscription"].textup = sub.alert.data.detailafsubscription.textup;
                            }
                            
                            if(sub.alert.data.detailup == undefined) {
                                sub.alert.data.detaildata["afup"] = sub.alert.opt.detailup;
                                sub.alert.data.detaildata["afup"].textup = sub.alert.opt["afup"];
                            }
                            else {
                                sub.alert.data.detaildata["afup"] = sub.alert.data.detailup;
                                sub.alert.data.detaildata["afup"].textup = sub.alert.data.detailup.textup;
                            }
                            
                            if(sub.alert.data.detailsuper == undefined) {
                                sub.alert.data.detaildata["afsuper"] = sub.alert.opt.detailsuper;
                                sub.alert.data.detaildata["afsuper"].textup = sub.alert.opt["afsuper"];
                            }
                            else {
                                sub.alert.data.detaildata["afsuper"] = sub.alert.data.detailsuper;
                                sub.alert.data.detaildata["afsuper"].textup = sub.alert.data.detailsuper.textsuper;
                            }
                            
                            if(sub.alert.data.detailsubscription == undefined) {
                                sub.alert.data.detaildata["ytsubscription"] = sub.alert.opt.detailsubscription;
                                sub.alert.data.detaildata["ytsubscription"].textup = sub.alert.opt["ytsubscription"];
                            }
                            else {
                                sub.alert.data.detaildata["ytsubscription"] = sub.alert.data.detailsubscription;
                                sub.alert.data.detaildata["ytsubscription"].textup = sub.alert.data.detailsubscription.textsubscription;
                            }
                            
                            if(sub.alert.data.detailkaup == undefined) {
                                sub.alert.data.detaildata["kaup"] = sub.alert.opt.detailkaup;
                                sub.alert.data.detaildata["kaup"].textup = sub.alert.opt["kaup"];
                            }
                            else {
                                sub.alert.data.detaildata["kaup"] = sub.alert.data.detailkaup;
                                sub.alert.data.detaildata["kaup"].textup = sub.alert.data.detailkaup.textup;
                            }
                        }
                        
                        if(sub.alert.data.detaildata["afsubscription"] == undefined || sub.alert.data.detaildata["afsubscription"].textup == undefined) {
                            if(sub.alert.data.detailafsubscription == undefined) {
                                sub.alert.data.detaildata["afsubscription"] = sub.alert.opt.detailafsubscription;
                                sub.alert.data.detaildata["afsubscription"].textup = sub.alert.opt["afsubscription"];
                            }
                            else {
                                sub.alert.data.detaildata["afsubscription"] = sub.alert.data.detailafsubscription;
                                sub.alert.data.detaildata["afsubscription"].textup = sub.alert.data.detailafsubscription.textup;
                            }
                        }
                        
                        $.each(sub.alert.data.detaildata, function(key, value) {
                            if(value.bgimg == true && value.image.length > 0 && value.image[0][1] != "") {
                                var preimg = new Image();
                                //TODO 이미지 임시 변환
                                var getImgLoad = value.image[0][1];
                                if(getImgLoad.indexOf("imgur.com") > -1) {
                                    getImgLoad = "/lib/imgload.php?id=" + getImgLoad.split("/").pop();
                                }
                                preimg.src = getImgLoad;
                            }
                            if(value.bgimg == false) {
                                value.image = [["", ""]];
                            }
                            if(value.voicetype == "beep" && $.type(value.sound) === "string") {
                                value.sound = ["", replace.url(value.sound)];
                            }
                        });
                        
                        var getBroadType = {};
                        var getDetailType = {};
                        if($.inArray("star",loadData.typelist) > -1 && loadData.detailstar.length > 0) {
                            $.each(loadData.detailstar, function(key, value) {
                                $.each(value.type, function(keys, values) {
                                    getDetailType[values] = [];
                                    if(values == "star" || values == "sticker" || values == "choco") {
                                        getBroadType["afreecatv"] = [];
                                    }
                                    else if(values == "superchat") {
                                        getBroadType["youtube"] = [];
                                    }
                                    else if(values == "cookie") {
                                        getBroadType["kakaotv"] = [];
                                    }
                                    else if(values == "bits") {
                                        getBroadType["twitch"] = [];
                                    }
                                    else if(values == "gold") {
                                        getBroadType["goldlive"] = [];
                                    }
                                });
                            });
                        }
                        
                        $.each(loadData.typelist, function(key, value) {
                            getDetailType[value] = [];
                            if(value == "afsubscription" || value == "afup" || value == "afsuper") {
                                getBroadType["afreecatv"] = [];
                            }
                            else if(value == "twfollow" || value == "twsubscription" || value == "twhost") {
                                getBroadType["twitch"] = [];
                            }
                            else if(value == "ytsubscription" || value == "ytsponsor") {
                                getBroadType["youtube"] = [];
                            }
                            else if(value == "kaup") {
                                getBroadType["kakaotv"] = [];
                            }
                            else if(value == "gdup") {
                                getBroadType["goldlive"] = [];
                            }
                        });
                        
                        $.each(getBroadType, function(key, value) {
                            loadBroadList.push(key);
                        });
                        
                        loadDetailList = [];
                        $.each(getDetailType, function(key, value) {
                            loadDetailList.push(key);
                        });
                    }
                    else if(id == "goal") {
                        if(sub.goal.data.completesound == true && $.type(sub.goal.data.completesound) === "string") {
                            sub.goal.data.completesoundval = ["", replace.url(sub.goal.data.completesoundval)];
                        }
                        else if(sub.goal.data.completesound == false && $.type(sub.goal.data.completesound) === "array") {
                            sub.goal.data.completesound = true;
                        }
                        
                        if(sub.goal.data.type == "star" || sub.goal.data.type == "starm" || sub.goal.data.type == "up" || sub.goal.data.type == "view" || sub.goal.data.type == "fan" || sub.goal.data.type == "fav") {
                            loadBroadList = ["afreecatv"];
                        }
                        else if(sub.goal.data.type == "bits" || sub.goal.data.type == "twsub" || sub.goal.data.type == "twview") {
                            loadBroadList = ["twitch"];
                        }
                        else if(sub.goal.data.type == "ytstar" || sub.goal.data.type == "ytsub" || sub.goal.data.type == "ytview") {
                            loadBroadList = ["youtube"];
                        }
                        else if(sub.goal.data.type == "kastar" || sub.goal.data.type == "kaup" || sub.goal.data.type == "kaview" || sub.goal.data.type == "kasub" || sub.goal.data.type == "kaplus") {
                            loadBroadList = ["kakaotv"];
                        }
                        else if(sub.goal.data.type == "gdstar" || sub.goal.data.type == "gdup" || sub.goal.data.type == "gdview" || sub.goal.data.type == "gdsub") {
                            loadBroadList = ["goldlive"];
                        }
                        
                        if(sub.goal.data.type == "star" || sub.goal.data.type == "starm" || sub.goal.data.type == "bits" || sub.goal.data.type == "ytstar" || sub.goal.data.type == "kastar" || sub.goal.data.type == "gdstar") {
                            $("#tooltip_box .btn_goal_delete").addClass("show");
                            
                            var getLoadTime = new Date().getTime();
                            function statsGoalLoad(ridx) {
                                if(ridx > 10) return;
                                doTimeout("statusdata_load", function() {
                                    if(comm.statsdata.connect == true) {
                                        if(socket != undefined && socket.connected == true) {
                                            socket.emit("statsdata", { idx:realIdx, type:subType, sub:subPage, stype:"load", ptype:sub.goal.data.type, data:{autocheck:sub.goal.data.autoreset === true, time:getLoadTime} });
                                        }
                                        else {
                                            statsGoalLoad(ridx + 1);
                                        }
                                    }
                                    else {
                                        var getLocalData = comm.savedata.load("goal_localsave");
                                        if(getLocalData != null && getLocalData.data != undefined) {
                                            comm.statsdata.load(getLocalData.data);
                                        }
                                    }
                                }, 2000);
                            }
                            statsGoalLoad(0);
                        }
                        
                        sub.goal.opt.maxval = parseInt(sub.goal.data.startmax, 10);
                        loadDetailList = sub.goal.data.type;
                        
                        sub.goal.circleProgress.load(true, sub.goal.data.style, 0);
                        sub.goal.add(0);
                        sub.goal.repeatinfo(true,true);
                    }
                    else if(id == "banner") {
                        sub.banner.add();
                    }
                    
                    //방송 불러오기
                    if(loadBroadList.length > 0) {
                        player.broadcast.load(id, loadData, loadBroadList, loadDetailList);
                        
                        //방송시간체크
                        replace.lasttime.check(false);
                        //replace.lasttime.load();
                    }
                    
                    //폰트 추가 입력
                    $("head .item_addfont").remove();
                    if(loadData.addfonturl != undefined && loadData.addfontname != undefined && loadData.font != undefined && loadData.font == "inputfont") {
                        var getFontUrlVal = loadData.addfonturl;
                        var getFontNameVal = loadData.addfontname;
                        if(getFontUrlVal != "" && getFontNameVal != "") {
                            loadData.font = loadData.addfontname;
                            $("head .item_addfont").remove();
                            if(getFontUrlVal.indexOf("http") == -1) {
                                getFontUrlVal = "http://" + getFontUrlVal;
                            }
                            var getFontUrl = subServerUrl + "/font.php?url=" + getFontUrlVal
                            
                            if(getFontUrlVal.indexOf(".ttf") > -1) {
                                var fontUrl = "url('" + getFontUrl + "') format('truetype')";
                            }
                            else if(getFontUrlVal.indexOf(".woff") > -1) {
                                var fontUrl = "url('" + getFontUrl + "') format('woff')";
                            }
                            else if(getFontUrlVal.indexOf(".otf") > -1) {
                                var fontUrl = "url('" + getFontUrl + "') format('opentype')";
                            }
                            else {
                                var fontUrl = "url('" + getFontUrl + "') format('truetype'), url('" + getFontUrl + "') format('woff'), url('" + getFontUrl + "') format('opentype')";
                            }
                            $("#item_" + subType).css("font-family", getFontNameVal);
                            $("head").append("<style class='item_addfont'>@font-face { font-family:'" + getFontNameVal + "'; font-style:normal; font-weight:400; src:" + fontUrl + "; } .item_" + subType + "{font-family:'" + getFontNameVal + "'!important;}</style>");
                        }
                    }
                    
                    //필터 
                    if(loadData.filterword != undefined) {
                        sub[id].opt.filterword = "";
                        if(loadData.filter == true && loadData.filterword !== "") {
                            try{
                                var getFilterWord = $.trim(loadData.filterword.replace(/\r\n|\n/gi,","));
                                var getFilterArray = getFilterWord.split(",");
                                var getFilterList = [];
                                $.each(getFilterArray, function(key, value) {
                                    if(value !== "") {
                                        getFilterList.push(value);
                                    }
                                });
                                //console.log(getFilterList);
                                sub[id].opt.filterword = eval("/" + getFilterList.join("|") + "/gi");
                            }
                            catch(error) {
                                
                            }
                        }
                    }
                    
                    if(loadData.blacklistword != undefined) {
                        sub[id].opt.blacklistword = "";
                        if(loadData.blacklist == true && loadData.blacklistword !== "") {
                            try{
                                var getFilterWord = $.trim(loadData.blacklistword.replace(/\r\n|\n/gi,","));
                                var getFilterArray = getFilterWord.split(",");
                                var getFilterList = [];
                                $.each(getFilterArray, function(key, value) {
                                    if(value !== "") {
                                        getFilterList.push(value);
                                    }
                                });
                                //console.log(getFilterList);
                                sub[id].opt.blacklistword = getFilterList;
                            }
                            catch(error) {
                                
                            }
                        }
                    }
                    
                    //플레이어 창 설정값 유지
                    if(loadData.fontsize != undefined) {
                        var getFontSize = loadData.fontsize;
                        if(player.opt.fontsize == null || prevData.fontsize == loadData.fontsize) {
                            var getFontCookie = getCookie("tooltip_fontsize_" + subType + "_" + subPage);
                            if(getFontCookie != undefined && getFontCookie != "") getFontSize = getFontCookie;
                        }
                        
                        $(".tooltip_box .select_fontsize").val(getFontSize).trigger("change");
                    }
                    if(loadData.opacity != undefined) {
                        var getOpacitySize = loadData.opacity;
                        if(player.opt.opacity == null || prevData.opacity == loadData.opacity) {
                            var getOpacityCookie = getCookie("tooltip_transparent_" + subType + "_" + subPage);
                            if(getOpacityCookie != undefined && getOpacityCookie != "") getOpacitySize = getOpacityCookie;
                        }
                        
                        $(".tooltip_box .select_transparent").val(getOpacitySize).trigger("change");
                    }
                }
                player.setup.prevtime = data.data.times;
            }
            
            player.setup.firstload = false;
        
            if(func != undefined) func();
        }
    },
    
    //TODO broadcast 방송별 불러오기
    broadcast: {
        loadcheck: false,
        load: function(type, loadData, broadType, detailType) {
            if(sub.debug) console.log("broadcast load", type, loadData, broadType, detailType);
            if($.inArray("afreecatv", broadType) > -1 && loginInfo.bjid != undefined && loginInfo.bjid != "") {
                player.afreecatv.init({ type:type, bjid:loginInfo.bjid, detail:detailType, broad:broadType });
            }
            if($.inArray("twitch", broadType) > -1 && loginInfo.twid != undefined && loginInfo.twid != "") {
                player.twitch.init({ type:type, twid:loginInfo.twid, detail:detailType, broad:broadType });
            }
            if($.inArray("youtube", broadType) > -1 && loginInfo.ytliveid != undefined && loginInfo.ytliveid != "") {
                gapi.load('client:youtube', function() {
                    player.youtube.init({ type:type, ytchid:loginInfo.ytchid, ytliveid:loginInfo.ytliveid, ytcode:loginInfo.ytcode, yttoken:loginInfo.yttoken, detail:detailType, broad:broadType });
                });
            }
            if($.inArray("kakaotv", broadType) > -1) {
                player.kakaotv.init({ type:type, kaid:loginInfo.kaid, kachid:loginInfo.kachid, detail:detailType, broad:broadType });
            }
            if($.inArray("navertv", broadType) > -1) {
                player.navertv.init({ type:type, naid:loginInfo.naid, detail:detailType, broad:broadType });
            }
            if($.inArray("facebook", broadType) > -1) {
                player.facebook.init({ type:type, faid:loginInfo.faid, fapost:loginInfo.fapost, detail:detailType, broad:broadType });
            }
            if($.inArray("goldlive", broadType) > -1) {
                player.goldlive.init({ type:type, gdid:loginInfo.gdid, detail:detailType, broad:broadType });
            }
        }
    },
    
    //TODO 소켓 접속
    socket: {
        reconnectidx:0,
        init: function() {
            if(sub.debug) console.log("socket init", socket);
            if(socket != undefined && socket.connected == true) {
                return;
            }
            
            //접속 체크
            player.socket.reconnectidx += 1;
            if(player.socket.reconnectidx > 3) {
                doTimeout("player_socket_init", false);
                location.reload(true);
                return;
            }
            doTimeout("player_socket_init", function() {
                player.socket.init();
            }, 5000);
            
            doTimeout("player_socket_run", function() {
                socket = io.connect(socketIp,{
                    reconnection: true,
                    reconnectionDelay: randomRange(300, 600) * 10
                });
                
                socket.on("connect", function() {
                    if(sub.debug) console.log("api socket connect");
                    doTimeout("player_socket_init", false);
                    apiCheck = true;
                    player.socket.reconnectidx = 0;
                    socket.emit("player", { key:myKey, type:subType, page:subPage });
                    
                    //연결 정보 전송
                    player.socket.online();
                });
                
                //채팅 정보
                socket.on("chat", function(data) {
                    if(sub.debug) console.log("chat",data);
                    if(data[0] == "SENDBALLOON" || data[0] == "SENDBALLOONSUB" || data[0] == "VODBALLOON") {
                        if(subType == "chat" || subType == "alert" || (subType == "subtitle" && sub.subtitle.data != undefined && sub.subtitle.data.theme == "star") || (subType == "goal" && sub.goal.data != undefined && (sub.goal.data.type == "star" || sub.goal.data.type == "starm"))) {
                            if(data[1].clientip != undefined && data[1].clientip != "" && data[1].clientip != clientIpaddr) return;
                            
                            var getGiftId = data[1].id;
                            var getGiftname = data[1].name;
                            var getGiftValue = data[1].value;
                            var getGiftJoin = Number(data[1].join);
                            
                            if(data[0] == "VODBALLOON") {
                                var getGiftMsg = utilPrintf("%s님이 " + "동영상 별풍선 %s개를 선물했습니다!", getGiftname + "(" + getGiftId + ")", getGiftValue);
                            }
                            else {
                                var getGiftMsg = utilPrintf("%s님이 " + (data[0] == "SENDBALLOON" ? "" : "중계방에서") + " 별풍선 %s개를 선물했습니다!", getGiftname + "(" + getGiftId + ")", getGiftValue);
                                if(getGiftJoin > 0) {
                                    getGiftMsg += "<br>" + utilPrintf("%s님이 %s번째로 팬클럽이 되셨습니다.",getGiftname + "(" + getGiftId + ")", getGiftJoin);
                                }
                            }
                            
                            var starData = {
                                type:"star",
                                startype:data[0],
                                grade:"gift",
                                gender:"m",
                                agent:"pc",
                                relay:data[0] == "SENDBALLOONSUB" ? "sub" : "main",
                                uid:getGiftId.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                                uname:getGiftname.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                                // uid:getUserArray[getUserIdx][0],
                                // uname:getUserArray[getUserIdx][1],
                                msg:getGiftMsg.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                                value:getGiftValue,
                                join:getGiftJoin
                            };
                            
                            if(subType == "subtitle") {
                                sub[subType].staradd(starData);
                            }
                            else if(subType == "goal") {
                                sub[subType].opt.lastname = starData.uname;
                                sub[subType].add(getGiftValue);
                            }
                            else if(subType == "alert") {
                                starData.msg = data[1].msg;
                                sub[subType].add(starData);
                            }
                            else {
                                sub[subType].add(starData);
                            }
                        }
                    }
                    else if(data[0] == "afsubscription") {
                        if(data[1].clientip != undefined && data[1].clientip != "" && data[1].clientip != clientIpaddr) return;
                            
                        if(subType == "chat" || subType == "alert") {
                            sub[subType].add({
                                type:subType == "chat" ? "star" : "afsubscription",
                                startype:"afsubscription",
                                subtype:[],
                                grade:"gift",
                                gender:"m",
                                agent:"pc",
                                uid:data[1].id,
                                uname:data[1].name,
                                msg:subType == "alert" ? "" : data[1].msg,
                                value:data[1].value,
                                join:0,
                                broadno:0
                            });
                        }
                    }
                    else if(data[0] == "afadcon") {
                        if(data[1].clientip != undefined && data[1].clientip != "" && data[1].clientip != clientIpaddr) return;
                            
                        if(subType == "chat" || subType == "alert" || (subType == "subtitle" && sub.subtitle.data.theme == "star") || (subType == "goal" && (sub.goal.data.type == "star" || sub.goal.data.type == "starm"))) {
                            var getGiftId = data[1].id;
                            var getGiftname = data[1].name;
                            var getGiftValue = data[1].value;
                            var getGiftJoin = 0;
                            var getGiftType = "ADBALLOON";
                            
                            var getGiftMsg = utilPrintf("%s님이 " + "애드벌룬 %s개를 선물했습니다!", getGiftname + "(" + getGiftId + ")", getGiftValue);
                            if(getGiftJoin > 0) {
                                getGiftMsg += "<br>" + utilPrintf("%s님이 %s번째로 팬클럽이 되셨습니다.",getGiftname + "(" + getGiftId + ")", getGiftJoin);
                            }
                            
                            if(getGiftId !== "" && getGiftValue > 0 && getGiftMsg !== "") {
                                var starData = {
                                    type:"star",
                                    startype:getGiftType,
                                    grade:"gift",
                                    gender:"m",
                                    agent:"pc",
                                    relay:getGiftType == "SENDBALLOONSUB" ? "sub" : "main",
                                    uid:getGiftId.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                                    uname:getGiftname.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                                    msg:getGiftMsg.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                                    value:getGiftValue,
                                    join:getGiftJoin,
                                    broadno:0
                                };
                                
                                starData.title = "";
                                starData.imgurl = "http://www.afreecatv.com/new_player/items/img_adballoon.png";
                                
                                if(subType == "subtitle") {
                                    sub[subType].staradd(starData);
                                }
                                else if(subType == "goal") {
                                    sub[subType].opt.lastname = starData.uname;
                                    sub[subType].add(getGiftValue);
                                }
                                else if(subType == "alert") {
                                    starData.msg = "";
                                    sub[subType].add(starData);
                                }
                                else {
                                    sub[subType].add(starData);
                                }
                            }
                        }
                    }
                    else if(data[0] == "SENDFANLETTER" || data[0] == "SENDFANLETTERSUB") {
                        if(data[1].clientip != undefined && data[1].clientip != "" && data[1].clientip != clientIpaddr) return;
                        
                        if(subType == "chat") {
                            var getGiftMsg = utilPrintf("%s님이 " + (data[0] == "SENDFANLETTER" ? "" : "중계방에서") + " 스티커 %s개를 선물했습니다!", data[1].name + "(" + data[1].id + ")", data[1].value);
                            if(data[1].join > 0) {
                                getGiftMsg += "<br>" + utilPrintf("%s님이 %s번째로 서포터가 되셨습니다.",data[1].name + "(" + data[1].id + ")", data[1].join);
                            }
                        }
                        else {
                            var getGiftMsg = data[1].msg;
                        }
                        
                        sub[subType].add({
                            type:"sticker",
                            grade:"gift",
                            gender:"m",
                            agent:"pc",
                            relay:data[0] == "SENDFANLETTER" ? "main" : "sub",
                            uid:data[1].id.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            uname:data[1].name.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            msg:getGiftMsg.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            paper:229,
                            value:data[1].value,
                            join:data[1].join
                        });
                    }
                    else if(data[0] == "CHOCOLATE" || data[0] == "CHOCOLATESUB") {
                        if(data[1].clientip != undefined && data[1].clientip != "" && data[1].clientip != clientIpaddr) return;
                        
                        if(subType == "chat") {
                            var getGiftMsg = utilPrintf("%s님이 " + (data[0] == "CHOCOLATE" ? "" : "중계방에서") + " 초콜릿 %s개를 선물했습니다!", data[1].name + "(" + data[1].id + ")", data[1].value);
                        }
                        else {
                            var getGiftMsg = data[1].msg;
                        }
                        
                        sub[subType].add({
                            type:"choco",
                            grade:"gift",
                            gender:"m",
                            agent:"pc",
                            relay:data[0] == "CHOCOLATE" ? "main" : "sub",
                            uid:data[1].id.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            uname:data[1].name.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            msg:getGiftMsg.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            value:data[1].value
                        });
                    }
                    else if(data[0] == "SUPERCHAT" && data[1].id != undefined) {
                        if(data[1].clientip != undefined && data[1].clientip != "" && data[1].clientip != clientIpaddr) return;
                        
                        var getUnitArray = [["￦","KRW"],["$","USD"],["€","EUR"]];
                        var getUnitIdx = randomRange(0, 2);
                        if(subType == "alert") {
                            sub.alert.add({
                                type:"superchat",
                                grade:"gift",
                                gender:"m",
                                agent:"pc",
                                relay:"main",
                                //uid:getUserArray[getUserIdx][0],
                                //uname:getUserArray[getUserIdx][1],
                                uid:data[1].id,
                                uname:data[1].name,
                                msg:data[1].msg,
                                img:"http://afreehp.kr/img/profile.jpg",
                                // value:getUnitArray[getUnitIdx][0] + data[1].value,
                                // unit:getUnitArray[getUnitIdx][1],
                                value:data[1].value,
                                display:data[1].value,
                                unit:"원",
                                join:0
                            });
                        }
                        else if(subType == "chat") {
                            sub.chat.add({
                                type:"star",
                                broadtype:"youtube",
                                grade:"gift",
                                gender:"none",
                                agent:"none",
                                support:"none",
                                quick:"none",
                                uid:data[1].id,
                                uname:data[1].name,
                                msg:data[1].msg,
                                profile:"http://afreehp.kr/img/profile.jpg",
                                // value:getUnitArray[getUnitIdx][0] + data[1].value,
                                // unit:getUnitArray[getUnitIdx][1],
                                value:data[1].value,
                                display:data[1].value,
                                unit:"원",
                                join:0
                            });
                        }
                        else if(subType == "goal") {
                            // sub.goal.msgyrun({
                                // snippet:{
                                    // displayString:getUnitArray[getUnitIdx][0] + data[1].value,
                                    // currency:getUnitArray[getUnitIdx][1]
                                // }
                            // });
                            sub.goal.add(data[1].value);
                        }
                        else if(subType == "subtitle") {
                            // sub.subtitle.msgyrun({
                                // snippet:{
                                    // supporterDetails: {
                                        // //channelId:getUserArray[getUserIdx][0],
                                        // //displayName:getUserArray[getUserIdx][1],
                                        // channelId:data[1].id,
                                        // displayName:data[1].name,
                                        // profileImageUrl:"img/youtube.png"
                                    // },
                                    // displayString:getUnitArray[getUnitIdx][0] + data[1].value,
                                    // currency:getUnitArray[getUnitIdx][1]
                                // }
                            // });
                            
                            sub.subtitle.staradd({ type:"superchat", uid:data[1].id, uname:data[1].name, profile:"img/youtube.png", value:parseInt(data[1].value / 100, 10), value2:data[1].value });
                        }
                    }
                    else if(data[0] == "COOKIE" && data[1].id != undefined) {
                        if(data[1].clientip != undefined && data[1].clientip != "" && data[1].clientip != clientIpaddr) return;
                        
                        if(subType == "alert") {
                            sub.alert.add({
                                type:"cookie",
                                grade:"gift",
                                gender:"m",
                                agent:"pc",
                                relay:"main",
                                uid:data[1].id,
                                uname:data[1].name,
                                msg:data[1].msg,
                                value:data[1].value,
                                cls:"support_area support_type5",
                                join:0
                            });
                        }
                        else if(subType == "chat") {
                            sub.chat.add({
                                type:"star",
                                broadtype:"kakaotv",
                                grade:"gift",
                                gender:"none",
                                agent:"none",
                                support:"none",
                                quick:"none",
                                uid:"",
                                uname:data[1].name,
                                msg:data[1].msg,
                                value:data[1].value,
                                text:"",
                                cls:"support_area support_type5",
                                join:0
                            });
                        }
                        else if(subType == "goal") {
                            sub.goal.add(data[1].value);    
                        }
                        else if(subType == "subtitle") {
                            sub.subtitle.staradd({ type:"cookie", uid:data[1].id, uname:data[1].name, value:data[1].value, cls:"support_type5" });
                        }
                    }
                    else if(data[0] == "BITS" && data[1].id != undefined) {
                        if(data[1].clientip != undefined && data[1].clientip != "" && data[1].clientip != clientIpaddr) return;
                        if(subType == "alert") {
                            sub.alert.add({
                                type:"bits",
                                grade:"gift",
                                gender:"m",
                                agent:"pc",
                                relay:"main",
                                uid:data[1].id,
                                uname:data[1].name,
                                msg:data[1].msg,
                                value:data[1].value,
                                color:"9c3ee8",
                                img:"http://static-cdn.jtvnw.net/bits/light/animated/purple/2",
                                join:0
                            });
                        }
                        else if(subType == "chat") {
                            sub.chat.add({
                                type:"star",
                                broadtype:"twitch",
                                grade:"gift",
                                gifttype:"bits",
                                gender:"none",
                                agent:"none",
                                support:"none",
                                quick:"none",
                                uid:data[1].id,
                                uname:data[1].name,
                                msg:data[1].msg,
                                value:data[1].value,
                                color:"9c3ee8",
                                img:"http://static-cdn.jtvnw.net/bits/light/animated/purple/2",
                                join:0
                            });
                        }
                        else if(subType == "goal") {
                            sub.goal.add(data[1].value);    
                        }
                        else if(subType == "subtitle") {
                            sub.subtitle.staradd({ type:"bits", uid:data[1].id, uname:data[1].name, value:data[1].value, color:"9c3ee8", img:"http://static-cdn.jtvnw.net/bits/light/animated/purple/2" });
                        }
                    }
                    else if(data[0] == "CHATMESG") {
                        if(data[1].clientip != undefined && data[1].clientip != "" && data[1].clientip != clientIpaddr) return;
                        
                        var getMsgData = ["CHATMESG", data[1].msg, data[1].id, "", data[1].name, data[1].grade, ""];
                        sub[subType].msg(getMsgData, true);
                    }
                    else {
                        //TODO
                        $.ajax({
                            type:"POST",
                            url:logUrl + "lib/getlog.php",
                            data:{
                                type:"debug_socketchat",
                                log:JSON.stringify(data)
                            }
                        });
                        //player.afreecatv.chat(data);
                    }
                });
                
                //새로고침
                socket.on("reload", function(data) {
                    if(sub.debug) console.log(data, subType);
                    if(data.testkey != undefined && data.testkey != realIdx) return;
                    
                    if(data && data.page && data.page != "")  {
                        if(data.page == subType || data.page == "page_all") {
                            
                            setTimeout(function() {
                                location.reload(true);
                            },randomRange(200, 2000) * 10);
                        }
                    }
                });
                
                //테스트 메시지
                socket.on("testmsg", function(data) {
                    if(sub.debug) console.log("testmsg", data);
                    if(data.testkey != undefined && data.testkey != realIdx) return;
                    
                    if(data && data.type) {
                        if(data.clientip != undefined && data.clientip != "" && data.clientip != clientIpaddr) return;
                        
                        if(subType == "alert") {
                            if(data.type == "afup" || data.type == "twfollow" || data.type == "ytsubscription" || data.type == "ytsponsor" || data.type == "kaup") {
                                sub.alert.add({
                                    type:data.type,
                                    uid:"",
                                    uname:data.uplist
                                });
                            }
                            else if(data.type == "afsuper") {
                                sub.alert.add({
                                    type:"afsuper",
                                    grade:"notice",
                                    gender:"m",
                                    agent:"pc",
                                    uid:"afreecatv",
                                    uname:"아프리카",
                                    msg:"채팅 내용입니다"
                                });
                            }
                            else if(data.type == "twsubscription") {
                                sub.alert.add({
                                    type:data.type,
                                    value:data.plan,
                                    uid:"",
                                    uname:data.uplist
                                });
                            }
                            else if(data.type == "twhost") {
                                sub.alert.add({
                                    type:"twhost",
                                    startype:"twhost",
                                    grade:"gift",
                                    gender:"m",
                                    agent:"pc",
                                    relay:"main",
                                    uid:data.uid,
                                    uname:data.uname,
                                    msg:"",
                                    value:data.value
                                });
                            }
                        }
                        else if(subType == "goal" && (data.type == "star" || data.type == "starm")) {
                            //목표치는 별풍성 외에는 joinroom 실행안해서 접속안됨
                            sub.goal.add(data.value);
                        }
                        else if(subType == "chat") {
                            if(data.type == "afsuper") {
                                sub.chat.add({
                                    type:"chat",
                                    grade:"notice",
                                    gender:"m",
                                    agent:"pc",
                                    uid:"afreecatv",
                                    uname:"아프리카",
                                    msg:"아프리카(afreecatv) : 채팅 내용입니다"
                                });
                            }
                        }
                    }
                });
                
                //제재 내역
                socket.on("history", function(data) {
                    //console.log(data);
                    if(subType == "alert") {
                        sub.alert.opt.history = data;
                    }
                });
                
                //설정 저장 알림
                socket.on("setup", function(data) {
                    if(sub.debug) console.log("setup", data);
                    if(data.testkey != undefined && data.testkey != realIdx) return;
                    
                    if(data && data.page != undefined && data.sub != undefined && data.change != undefined) {
                        if(data.change == "resetstar") {
                            player.reset({type:"subtitle"});
                        }
                        else if(data.page == subType && data.sub == subPage) {
                            if(data.change == "resetgoal") {
                                sub.goal.goalsetup("reset");
                            }
                            else {
                                if(data.change == "change") location.reload(true);
                                else player.setup.load(subType);
                            }
                        }
                        else if(data.page == subType && data.pagetype != undefined && data.pagetype == "reload") {
                            if(data.change == "change") location.reload(true);
                        }
                    }
                    else if(data && data.type != undefined && data.page != undefined) {
                        if(data.type == subType && data.page == subPage) {
                            if(subType == "subtitle" || subType == "goal") {
                                location.reload(true);
                            }
                            else player.setup.load(subType);
                        }
                    }
                    else {
                        if(subType == "subtitle" || subType == "goal") {
                            location.reload(true);
                        }
                        else player.setup.load(subType);
                    }
                });
                
                //데이터 전송
                socket.on("sendmsg", function(data) {
                    if(sub.debug) console.log("sendmsg", data);
                    
                    if(data.testkey != undefined && data.testkey != realIdx) return;
                    if(data.target != undefined && data.target == "subtitle" && data.data != undefined) {
                        var getSendData = $.parseJSON(data.data);
                        if(getSendData.type != undefined && getSendData.type == "giftmsg") {
                            if(getSendData.msg != "") {
                                sub.subtitle.add({ id:getSendData.id, name:getSendData.name, msg:getSendData.msg, value:getSendData.value });
                            }
                        }
                    }
                }); 
                
                //초기화 알림
                socket.on("reset", function(data) {
                    if(data && data.type && data.page != undefined && data.type != "") {
                        player.reset(data);
                    }
                });
                
                //알람 리스트
                socket.on("alertlist", function(data) {
                    if(sub.debug) console.log("alertlist video", data);
                    if(data && data.key != undefined && data.type != undefined) {
                        if(data.key == myKey && data.type == subType) {
                            if(data.cmd == "load" || data.cmd == "join") {
                                sub.alert.list.load("all",data);
                            }
                            else if(data.cmd == "check") {
                                sub.alert.list.check(data);
                            }
                            else if(data.cmd == "replay") {
                                sub.alert.list.replay(data);
                            }
                            else if(data.cmd == "del") {
                                sub.alert.list.del(data);
                            }
                            else if(data.cmd == "removeall") {
                                sub.alert.list.removeall(data);
                            }
                            // else if(data.cmd == "chat") {
                                // sub.alert.video.play(data);
                            // }
                            else if(data.cmd == "play") {
                                sub.alert.video.play(data);
                            }
                            else if(data.cmd == "filter") {
                                sub.alert.video.filter(data);
                            }
                            else if(data.cmd == "volume") {
                                sub.alert.video.volume(data);
                            }
                            else if(data.cmd == "seek") {
                                sub.alert.video.seek(data);
                            }
                            else if(data.cmd == "pause") {
                                sub.alert.video.pause(data);
                            }
                            else if(data.cmd == "start") {
                                sub.alert.video.start(data);
                            }
                            else if(data.cmd == "stop") {
                                sub.alert.video.stop(data);
                            }
                        }
                    }
                });
                
                socket.on("error", function() {
                    if(sub.debug) console.log("api socket error");
                    
                });
                    
                socket.on("close", function() {
                    if(sub.debug) console.log("api socket close");
                });
                
                socket.on("apiload", function(data) {
                    if(sub.debug) console.log("apisocket apiload", data);
                    
                    if(data && data.result != undefined && data.type != undefined) {
                        if(data.result == true) {
                            //apiData[data.type].check = true;
                            if(data.type == "broad") {
                                replace.api.broad();
                            }
                            else if(data.type == "users") {
                                replace.api.up();
                            }
                            if(data.type == "indexes") {
                                replace.api.indexes();
                            }
                            else if(data.type == "viewer") {
                                replace.api.viewer();
                            }
                            else if(data.type == "youtube") {
                                replace.api.youtube();
                            }
                            else if(data.type == "youtubechat" || data.type == "youtubeinfo" || data.type == "youtubealert" || data.type == "youtubesub" || data.type == "youtubespon") {
                                replace.api.youtubeapi(data);
                            }
                            else if(data.type == "kakaotv") {
                                replace.api.kakaotv();
                            }
                            else if(data.type == "kakaotvinfo") {
                                replace.api.kakaotvinfo();
                            }
                            else if(data.type == "facebook") {
                                replace.api.facebook();
                            }
                            else if(data.type == "facebookchat") {
                                replace.api.facebookchat();
                            }
                            else if(data.type == "goldlive") {
                                replace.api.goldlive();
                            }
                            else if(data.type == "goldliveinfo") {
                                replace.api.goldliveinfo();
                            }
                        }
                        else {
                            if(data.type == "broad") {
                                if(data.data != false) {
                                    replace.api.broadData(data.data);
                                }
                            }
                            else if(data.type == "users") {
                                if(data.data != false) {
                                    replace.api.upData(data.data);
                                }
                            }
                            else if(data.type == "indexes") {
                                if(data.data != false) {
                                    replace.api.indexesData(data.data);
                                }
                            }
                            else if(data.type == "viewer") {
                                if(data.data != false) {
                                    replace.api.viewerData(data.data);
                                }
                            }
                            else if(data.type == "youtube") {
                                if(data.data != false) {
                                    replace.api.youtubeData(data.data);
                                }
                            }
                            else if(data.type == "youtubechat" || data.type == "youtubeinfo" || data.type == "youtubealert" || data.type == "youtubesub" || data.type == "youtubespon") {
                                if(data.data != false) {
                                    replace.api.youtubeapiData(data,data.data);
                                }
                            }
                            else if(data.type == "kakaotv") {
                                if(data.data != false) {
                                    replace.api.kakaotvData(data.data);
                                }
                            }
                            else if(data.type == "kakaotvinfo") {
                                if(data.data != false) {
                                    replace.api.kakaotvinfoData(data.data);
                                }
                            }
                            else if(data.type == "facebook") {
                                if(data.data != false) {
                                    replace.api.facebookData(data.data);
                                }
                            }
                            else if(data.type == "facebookchat") {
                                if(data.data != false) {
                                    replace.api.facebookchatData(data.data);
                                }
                            }
                            else if(data.type == "goldlive") {
                                if(data.data != false) {
                                    replace.api.goldliveData(data.data);
                                }
                            }
                            else if(data.type == "goldliveinfo") {
                                if(data.data != false) {
                                    replace.api.goldliveinfoData(data.data);
                                }
                            }
                            apiData[data.type].time = data.time;
                        }
                    }
                });
                
                socket.on("apisave", function(data) {
                    if(sub.debug) console.log("apisocket apisave", data);
                    
                    if(data && data.result != undefined && data.type != undefined) {
                        if(data.result == true) {
                            apiData[data.type].time = data.time;
                        }
                    }
                });
                
                //채팅 설정
                socket.on("chatsetup", function(data) {
                    if(sub.debug) console.log("chatsetup socket", data);
                    
                    try{
                        if(data && data.key != undefined && data.type != undefined && data.cmd != undefined) {
                            if(data.key == myKey && data.type == subType) {
                                data.cmd = data.cmd.replace(/\/\//gi,"<br>");
                                var getSetupArray = data.cmd.slice(1).split("/");
                                var getSetupTabcheck = false;
                                var getSetupTab = "0";
                                
                                switch(getSetupArray[0]) {
                                    case "채팅폰트크기" :
                                    case "알림폰트크기" :
                                    case "목표치폰트크기" :
                                    case "자막폰트크기" :
                                    case "배너폰트크기" :
                                    case "채팅투명도" :
                                    case "알림투명도" :
                                    case "목표치투명도" :
                                    case "자막투명도" :
                                    case "배너투명도" :
                                        if(getSetupArray.length > 2) {
                                            if(parseInt(getSetupArray[1], 10) === 0) {
                                                getSetupTabcheck = true;
                                            }
                                            else if(!isNaN(getSetupArray[1])) {
                                                getSetupTab = (parseInt(getSetupArray[1], 10) - 1).toString();
                                            }
                                        }
                                        break;
                                        
                                    default :
                                        if(getSetupArray.length > 1) {
                                            if(parseInt(getSetupArray[1], 10) === 0) {
                                                getSetupTabcheck = true;
                                            }
                                            else if(!isNaN(getSetupArray[1])) {
                                                getSetupTab = (parseInt(getSetupArray[1], 10) - 1).toString();
                                            }
                                        }
                                        
                                        break;
                                }
                                
                                //console.log("chatsetup", getSetupArray, getSetupTabcheck, getSetupTab);
                                if(getSetupTabcheck == true || subPage == getSetupTab) {
                                    switch(getSetupArray[0]) {
                                        
                                        case "채팅끄기" :
                                        case "알림끄기" :
                                        case "목표치끄기" :
                                        case "자막끄기" :
                                        case "배너끄기" :
                                            $("#tooltip_box .toggle_onoff").prop("checked",false).trigger("change");
                                            break;
                                            
                                        case "채팅켜기" :
                                        case "알림켜기" :
                                        case "목표치켜기" :
                                        case "자막켜기" :
                                        case "배너켜기" :
                                            $("#tooltip_box .toggle_onoff").prop("checked",true).trigger("change");
                                            break;
                                            
                                        case "채팅소리끄기" :
                                        case "알림소리끄기" :
                                        case "목표소리치끄기" :
                                        case "자막소리끄기" :
                                        case "배너소리끄기" :
                                            $("#tooltip_box .toggle_sound").prop("checked",false).trigger("change");
                                            break;
                                            
                                        case "채팅소리켜기" :
                                        case "알림소리켜기" :
                                        case "목표치소리켜기" :
                                        case "자막소리켜기" :
                                        case "배너소리켜기" :
                                            $("#tooltip_box .toggle_sound").prop("checked",true).trigger("change");
                                            break;
                                            
                                        case "채팅폰트크기" :
                                        case "알림폰트크기" :
                                        case "목표치폰트크기" :
                                        case "자막폰트크기" :
                                        case "배너폰트크기" :
                                            var getSetupValue = getSetupArray.pop();
                                            var getValue = parseInt(getSetupValue.replace("px", ""), 10);
                                            //console.log("chatsetup", getSetupValue, getValue);
                                            
                                            if(!isNaN(getValue)) {
                                                if(getValue < 6) getValue = 6;
                                                else if(getValue > 60) getValue = 60;
                                                if(getValue%2 != 0) getValue += 1;
                                                $("#tooltip_box .select_fontsize").val(getValue).trigger("change");
                                            }
                                            break;
                                            
                                        case "채팅투명도" :
                                        case "알림투명도" :
                                        case "목표치투명도" :
                                        case "자막투명도" :
                                        case "배너투명도" :
                                            var getSetupValue = getSetupArray.pop();
                                            var getValue = parseInt(getSetupValue.replace("%", ""), 10);
                                            //console.log("chatsetup", getSetupValue, getValue);
                                            
                                            if(!isNaN(getValue)) {
                                                if(getValue < 0) getValue = 0;
                                                else if(getValue > 100) getValue = 100;
                                                getValue = parseInt(getValue / 10, 10) * 10;
                                                $("#tooltip_box .select_transparent").val(getValue).trigger("change");
                                            }
                                            break;
                                            
                                        case "채팅새로고침" :
                                        case "알림새로고침" :
                                        case "목표치새로고침" :
                                        case "자막새로고침" :
                                        case "배너새로고침" :
                                            location.reload(true);
                                            break;
                                            
                                        case "채팅지우기" :
                                            $("#item_chat .chat_list").empty();
                                            break;
                                            
                                        case "알림취소" :
                                        case "알림지우기" :
                                            sub.alert.cancelpopup();
                                            break;
                                            
                                        case "알림삭제" :
                                        case "알림초기화" :
                                            sub.alert.list.removeall();
                                            break;
                                            
                                        case "목표치삭제" :
                                        case "목표치초기화" :
                                            sub.goal.goalsetup("reset");
                                            break;
                                            
                                        case "자막삭제" :
                                        case "자막초기화" :
                                            if(sub.subtitle.data.theme != "normal") {
                                                sub.subtitle.starsetup("reset");
                                                // $("#item_subtitle .subtitle .text").empty();
                                                // location.reload(true);
                                            }
                                            break;
                                            
                                        case "자막텍스트" :
                                            if(sub.subtitle.data.theme == "normal") {
                                                var getSetupValue = getSetupArray.pop();
                                                sub.subtitle.data.text = getSetupValue;
                                                sub.subtitle.opt.textedit = getSetupValue;
                                                sub.subtitle.add();
                                            }
                                            break;
                                    }
                                }
                                    
                                
                                //채팅끄기 //채팅켜기 //채팅폰트크기/16 //채팅투명도/100 //채팅새로고침 //채팅지우기 //채팅소리끄기 //채팅소리켜기
                                //알림끄기 //알림켜기 //알림폰트크기/16 //알림투명도/100 //알림새로고침 //알림취소,알림지우기 //알림삭제,알림초기화 //알림소리끄기 //알림소리켜기
                                //목표치끄기 //목표치켜기 //목표치폰트크기/16 //목표치투명도/100 //목표치새로고침 //목표치소리끄기 //목표치소리켜기
                                //자막끄기 //자막켜기 //자막폰트크기/16 //자막투명도/100 //자막새로고침 //자막삭제,자막초기화 //자막소리끄기 //자막소리켜기
                                //자막텍스트/텍스트내용<br>텍스트내용, 텍스트내용\n텍스트내용\n
                                
                                //명령/내용 => 첫번째 탭
                                //명령/0/내용 => 모든 탭
                                //명령/1/내용 => 1번째 탭
                                
                            }
                        }
                    }
                    catch(error) {
                        
                    }
                        
                });
                
                //데이터 저장 취소
                // socket.on("nstatusdatacancel", function(data) {
                    // console.log("statusdata savecancel", data);
                    // if(data && data.type != undefined) {
                        // if(data.type == "goal" || data.type == "subtitle") {
                            // doTimeout(data.type + "_statussave", false);
                        // }
                    // }
                // });
                
                //데이터 저장 불러오기
                socket.on("statsdata", function(data) {
                    comm.statsdata.load(data);
                });
                
                //쿠키 설정 저장 불러오기
                socket.on("localsave", function(data) {
                    if(sub.debug) console.log("localsave load", data);
                    if(data && data.type != undefined && data.sub != undefined && data.stype != undefined && data.ptype != undefined && data.data != undefined) {
                        if(data.type !== subType || Number(data.sub) !== Number(subPage)) return;
                        
                    }
                });
                
            }, 100);
        },
        online: function() {
            doTimeout("socket_online", function() {
                if(socket && socket.connected == true) {
                    socket.emit("online", {
                        key:myKey,
                        pagetype:subType, 
                        pagesub:subPage,
                        id:loginInfo.bjid,
                        name:loginInfo.bjname,
                        view:player.afreecatv.datainfo.view,
                        title:player.afreecatv.datainfo.title,
                        start:player.afreecatv.datainfo.start,
                        uptime:player.afreecatv.datainfo.uptime,
                        rank:player.afreecatv.datainfo.rank,
                        afreecatv: {
                            connect:player.afreecatv.datainfo.connect
                        },
                        twitch: {
                            id:player.twitch.datainfo.id,
                            name:loginInfo.twname,
                            connect:player.twitch.datainfo.connect,
                            view:player.twitch.datainfo.view,
                            title:player.twitch.datainfo.title
                        },
                        youtube: {
                            id:player.youtube.datainfo.id,
                            name:loginInfo.ytname,
                            connect:player.youtube.datainfo.connect,
                            view:player.youtube.datainfo.view,
                            title:player.youtube.datainfo.title
                        },
                        kakaotv: {
                            id:player.kakaotv.datainfo.id,
                            name:loginInfo.kaname,
                            connect:player.kakaotv.datainfo.connect,
                            view:player.kakaotv.datainfo.view,
                            title:player.kakaotv.datainfo.title
                        },
                        navertv: {
                            id:player.navertv.datainfo.id,
                            name:loginInfo.naname,
                            connect:player.navertv.datainfo.connect,
                            view:player.navertv.datainfo.view,
                            title:player.navertv.datainfo.title
                        },
                        facebook: {
                            id:player.facebook.datainfo.id,
                            name:loginInfo.faname,
                            connect:player.facebook.datainfo.connect,
                            view:player.facebook.datainfo.view,
                            title:player.facebook.datainfo.title
                        },
                        goldlive: {
                            id:player.goldlive.datainfo.id,
                            name:loginInfo.gdname,
                            connect:player.goldlive.datainfo.connect,
                            view:player.goldlive.datainfo.view,
                            title:player.goldlive.datainfo.title
                        }
                    });
                }
                player.socket.online();
            }, 1000 * 60);
        }
    },
    
    //TODO 아프리카 설정
    afreecatv: {
        broad: {},
        prevdata: {
            broad: "",
            users: "",
            indexes: "",
            viewer: ""
        },
        datainfo: {
            balloontime:0,
            relaychat:{
                list:[],
                socket:{}
            },
            userinfo: {},
            broad:{},
            id:"",
            bnocheck:true,
            station:"",
            broadno:"",
            connect: false,
            online: false,
            loadcheck: true,
            view:0,
            title:"",
            start:"",
            uptime:"",
            rank:0,
            "today_up_count":0, //오늘 추천
            "total_up_count":0, //전체 추천
            "today_favorite_count":0,   //오늘 즐찾
            "total_favorite_count":0,   //전체 즐찾
            "total_view_count":0,   //누적시청자수
            "fanclub_count":0,  //팬클럽수
            "supporter_count":0,    //서포터수
            uplist:[],
            uplast:"",
            upfirst:true,
            spcon:""    //구독 아이콘
        },
        init: function(data) {
            if(sub.debug) console.log("afreecatv init", data);
            
            player.afreecatv.datainfo.id = data.bjid;
            if(player.afreecatv.datainfo.id != "") {
                
                //TODO afreehp 테스트 연동
                //afreehp_connect("afreeca", { key:realKey, idx:realIdx, id:loginInfo.bjid });
                
                player.afreecatv.stats();
                
                if(subType == "chat" || (subType == "alert" && ($.inArray("star", data.detail) > -1 || $.inArray("sticker", data.detail) > -1 || $.inArray("choco", data.detail) > -1 || $.inArray("afsuper", data.detail) > -1)) || (subType == "subtitle" && sub.subtitle.data.theme == "star" && $.inArray("star", sub.subtitle.data.starlist) >-1) || (subType == "goal" && (sub.goal.data.type == "star" || sub.goal.data.type == "starm"))) {
                    player.afreecatv.load("load");
                }
                
                if(subType == "goal" && (sub.goal.data.type == "up" || sub.goal.data.type == "fan" || sub.goal.data.type == "fav")) {
                    player.afreecatv.info();
                }
                else if(subType == "goal" && sub.goal.data.type == "view") {
                    player.afreecatv.view();
                }
                else if(subType == "subtitle" && sub.subtitle.data.theme == "normal") {
                    var getInfoloadType = "";
                    if(sub.subtitle.data.text != undefined) {
                        if(sub.subtitle.data.text.indexOf("{추천리스트}") > -1) {
                            player.afreecatv.view();
                        }
                        if(sub.subtitle.data.text.indexOf("{추천리스트}") > -1 || sub.subtitle.data.text.indexOf("{추천수}") > -1 || sub.subtitle.data.text.indexOf("{전체추천수}") > -1 || sub.subtitle.data.text.indexOf("{누적시청자수}") > -1 || sub.subtitle.data.text.indexOf("{즐겨찾기수}") > -1 || sub.subtitle.data.text.indexOf("{팬클럽수}") > -1 || sub.subtitle.data.text.indexOf("{서포터수}") > -1) {
                            player.afreecatv.info();
                        }
                    }
                }
                
                //TODO 구독 추가
                //추천 불러오기
                if((subType == "alert" && $.inArray("afup", data.detail) > -1) || (subType == "subtitle" && sub.subtitle.data.theme == "normal" && sub.subtitle.data.text.indexOf("{추천리스트}") > -1)) {
                    player.afreecatv.up();
                }
                else if(subType == "goal" && sub.goal.data.type == "up") {
                    if((sub.goal.data.text != undefined && sub.goal.data.text.indexOf("{추천리스트}") > -1) || (sub.goal.data.textin != undefined && sub.goal.data.textin.indexOf("{추천리스트}") > -1) || (sub.goal.data.repeattextin != undefined && sub.goal.data.repeattextin.indexOf("{추천리스트}") > -1)) {
                        player.afreecatv.up();
                    }
                }
                
                if(subType == "goal") {
                    sub.goal.getinfo(true);
                }
                
                //시그니처 별풍선
                player.afreecatv.stars();
                
                //시그니처 이모티콘
                player.afreecatv.signature();
                
                //구독 아이콘
                if(subType == "chat") {
                    var sponImg = new Image();
                    sponImg.onload = function() {
                        player.afreecatv.datainfo.spcon = "<img src='" + sponImg.src + "' alt='' class='ig icon_spcon'>";
                    }
                    sponImg.src = "http://static.file.afreecatv.com/spcon/pc_" + player.afreecatv.datainfo.id + ".png";
                }
            }
        },
        stars: function() {
            if(player.afreecatv.datainfo.id != "") {
                $.ajax({
                    url:"http://live.afreecatv.com:8057/api/get_balloon_storytelling_info.php?szBjId=" + player.afreecatv.datainfo.id,
                    timeout:5000,
                    dataType:"jsonp",
                    beforeSend: function(e) {
                        e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=utf-8")
                    },
                    success: function(data) {
                        if(sub.debug) console.log("balloon", data);
                        if(data) {
                            if(data.mainBalloons != undefined && data.mainBalloons.isSignatureBalloon != undefined && data.mainBalloons.isSignatureBalloon === true) {
                                var getStars = [];
                                $.each(data.mainBalloons.list, function(key, value) {
                                    if(value && value.number != undefined && value.number != "") {
                                        getStars.push(value.number);
                                        starSignArray[value.number] = value.imageUrl;
                                    }
                                });
                                loginInfo.bjstar = getStars.join(",");
                                
                                try{
                                    var getPrevBalloon = "";
                                    if(localOpt.localcheck() == true) {
                                        var getCookieBalloon = localStorage.getItem("player_afreeca_balloon");
                                    }
                                    else {
                                        var getCookieBalloon = getCookie("player_afreeca_balloon");
                                    }
                                    if(getCookieBalloon != undefined && getCookieBalloon != null && getCookieBalloon != "") {
                                        getPrevBalloon = getCookieBalloon; 
                                    }
                                    
                                    if(localOpt.localcheck() == true) {
                                        localStorage.setItem("player_afreeca_balloon", loginInfo.bjstar);
                                    }
                                    else {
                                        setCookie("player_afreeca_balloon", loginInfo.bjstar, 365);
                                    }
                                    
                                    if(loginInfo.bjstar !== "" && $.trim(getPrevBalloon) !== $.trim(loginInfo.bjstar)) {
                                        player.afreecatv.datainfo.balloontime = new Date().getTime();
                                        if(localOpt.localcheck() == true) {
                                            localStorage.setItem("player_afreeca_balloontime", player.afreecatv.datainfo.balloontime);
                                        }
                                        else {
                                            setCookie("player_afreeca_balloontime", player.afreecatv.datainfo.balloontime, 365);
                                        }
                                    }
                                    else {
                                        if(localOpt.localcheck() == true) {
                                            var getCookieBalloontime = localStorage.getItem("player_afreeca_balloontime");
                                        }
                                        else {
                                            var getCookieBalloontime = getCookie("player_afreeca_balloontime");
                                        }
                                        if(getCookieBalloontime != undefined && getCookieBalloontime != null && getCookieBalloontime != "") {
                                            player.afreecatv.datainfo.balloontime = Number(getCookieBalloontime); 
                                        }
                                    }
                                }
                                catch(error) {
                                }
                                
                            }
                            if(data.categoryBalloons != undefined && data.categoryBalloons.list != undefined) {
                                starStoryArray = [];
                                $.each(data.categoryBalloons.list, function(key, value) {
                                    if(value.list != undefined && value.list.length > 0) {
                                        $.each(value.list, function(keys, values) {
                                            if(values && values.number != undefined && values.number != "") {
                                                starStoryArray.push(Number(values.number));
                                                starCategoryArray[values.number] = values.imageUrl;
                                            }
                                        });
                                    }
                                });
                            }
                        }
                    },
                    error: function() {
                        doTimeout("afreecatv_stars", function() {
                            player.afreecatv.stars();
                        }, 1000 * 10);
                    }
                });
            }
        },
        signature: function() {
            if(player.afreecatv.datainfo.id != "") {
                $.ajax({
                    url:"http://live.afreecatv.com/api/signature_emoticon_api.php?work=list&szBjId=" + player.afreecatv.datainfo.id,
                    timeout:5000,
                    dataType:"jsonp",
                    jsonp: "szCallBack",
                    beforeSend: function(e) {
                        e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=utf-8")
                    },
                    success: function(data) {
                        if(sub.debug) console.log("afreeca signature", data);
                        emoticonList = {};
                        var getEmotionList = [];
                        $.each(emoticonListDefault, function(keys, values) {
                            emoticonList[keys] = emoticonUrl + values + ".png";
                            getEmotionList.push(keys.replace(/\//g, ""));
                        });
                        if(data && data.data != undefined && data.data.length > 0) {
                            var getEmoticonUrl = data.img_path != undefined && data.img_path != "" ? data.img_path : ("http://static.file.afreecatv.com/signature_emoticon/" + player.afreecatv.datainfo.id + "/");
                            $.each(data.data, function(keys, values) {
                                //if(values.black_keyword != "Y" && values.title != undefined && values.title != "" && values.pc_img != undefined && values.pc_img != "") {
                                if(values.title != undefined && values.title != "" && values.pc_img != undefined && values.pc_img != "") {
                                    emoticonList["/" + values.title + "/"] = getEmoticonUrl + values.pc_img;
                                    getEmotionList.push(values.title);
                                }
                            });
                        }
                        emoticonRegex = new RegExp("/(" + getEmotionList.join("|") + ")/", "g");
                        if(sub.debug) console.log("afreeca signature", emoticonList, emoticonRegex);
                    },
                    error: function() {
                        doTimeout("afreecatv_signature", function() {
                            player.afreecatv.signature();
                        }, 1000 * 10);
                    }
                });
            }
        },
        stats: function() {
            replace.apiload({
                id:player.afreecatv.datainfo.id,
                type:"broad",
                time:apiData.broad.time
            });
            
            //중계방 체크
            if((subType == "chat" && sub[subType].data.relaychat != undefined && sub[subType].data.relaychat == true) || subType == "alert") {
                if(player.afreecatv.datainfo.id != "" && player.afreecatv.datainfo.connect == true && player.afreecatv.datainfo.relaychat.list && player.afreecatv.datainfo.relaychat.list.length > 0) {
                    $.each(player.afreecatv.datainfo.relaychat.list, function(key, value) {
                        if(player.afreecatv.datainfo.relaychat.socket[value] == undefined) {
                            player.afreecatv.datainfo.relaychat.socket[value] = {
                                socket: null,
                                broad: null,
                                icemode: false
                            }
                            player.afreecatv.relaysocket(value);
                        }
                    });
                }
            }
            
            doTimeout("afreecatv_stats", function() {
                player.afreecatv.stats();
            }, comm.apiload.time("afstats"));
        },
        load: function(type) {
            if(sub.debug) console.log("afreeca socket init", type);
            
            doTimeout("afreecatv_socket_broad", function() {
                if(player.afreecatv.datainfo.id != "" && player.afreecatv.datainfo.connect == true) {
                    
                    var broadUrl = "http://afreecahelper.m.afreecatv.com/api/broad/" + player.afreecatv.datainfo.id;
                    $.ajax({
                        url: broadUrl,
                        timeout:5000,
                        dataType: "json",
                        success: function(datas) {
                            //console.log("afreecatv broad",datas);
                            if(datas && datas.result && datas.data && datas.result == true) {
                                var getBroad = {
                                    RESULT:1,
                                    FTK:"",
                                    BNO:datas.data["broad_no"],
                                    BJID:player.afreecatv.datainfo.id,
                                    BPWD:"",
                                    RESOLUTION:"",
                                    CHATNO:datas.data["chat_no"],
                                    TITLE:datas.data.title,
                                    CTIP:datas.data["relay_ip"],
                                    CTPT:datas.data["relay_port"],
                                    CHIP:datas.data["chat_ip"],
                                    CHPT:datas.data["chat_port"]
                                };
                                
                                if(sub.debug) console.log("socket broad ajaxload", datas, getBroad);
                                player.afreecatv.socket(getBroad,"init");
                            }
                        }
                    });
                }
            }, 1000);
            
            doTimeout("afreecatv_socket_load", function() {
                player.afreecatv.load("interval");
            }, 10000);
        },
        keepalive: function() {
            doTimeout("afreecatv_socket_keepalive", function() {
                if(player.afreecatv.datainfo.id != "" && player.afreecatv.datainfo.connect == true && csocket != null && csocket.readyState && csocket.readyState == 1) {
                    if(sub.debug) console.log("afreecatv socket keepalive");
                    csocket.send(comm.afreeca.socket.keepAlive());
                    
                    player.afreecatv.keepalive();
                }
                else {
                    player.afreecatv.load("keepalive");
                }
            //}, 60000);
            }, 50000);
        },
        relaykeepalive: function(broad) {
            doTimeout("afreecatv_relaysocket_" + broad + "_keepalive", function() {
                if(player.afreecatv.datainfo.id != "" && player.afreecatv.datainfo.connect == true && player.afreecatv.datainfo.relaychat.socket[broad] != undefined && player.afreecatv.datainfo.relaychat.socket[broad].socket != null && player.afreecatv.datainfo.relaychat.socket[broad].socket.readyState && player.afreecatv.datainfo.relaychat.socket[broad].socket.readyState == 1) {
                    if(sub.debug) console.log("afreecatv relaysocket keepalive", broad);
                    player.afreecatv.datainfo.relaychat.socket[broad].socket.send(comm.afreeca.socket.keepAlive());
                    
                    player.afreecatv.relaykeepalive(broad);
                }
            //}, 60000);
            }, 50000);
        },
        reconnect: function(time) {
            doTimeout("afreecatv_socket_reconnect", function() {
                player.afreecatv.load("reconnect");
            }, time == undefined ? 1000 * 5 : time);
        },
        relayreconnect: function(broadno,time) {
            doTimeout("afreecatv_relaysocket_" + broadno + "_reconnect", function() {
                player.afreecatv.relaysocket(broadno);
            }, time == undefined ? 1000 * 5 : time);
        },
        socket: function(broad, type) {
            if(sub.debug) console.log("afreeca chat socket", broad, type);
            player.afreecatv.broad = broad;
            
            doTimeout("afreecatv_socket_run", function() {
                
                //timeout 초기화
                doTimeout("afreecatv_socket_load",false);
                
                //연결 끊기
                if(csocket != null && csocket.readyState && csocket.readyState == 1) {
                    //csocket.close();
                    return;
                }
                player.afreecatv.reconnect();
                
                csocket = new WebSocket("ws://" + broad.CHIP + ":" + broad.CHPT + "/Websocket", "chat");
                csocket.binaryType = "arraybuffer";
                
                csocket.onopen = function() {
                    player.afreecatv.reconnect();
                    
                    if(subType == "chat" && localOpt.localcheck() == true) {
                        var getChatInputUse = localStorage.getItem("chat_input_use");
                        var getAfreecaChatUse = localStorage.getItem("afreecatv_chat_use");
                        if(getChatInputUse == "use" && getAfreecaChatUse == "use" && loginInfo.bjtoken != undefined && loginInfo.bjtoken != null && loginInfo.bjtoken != "") {
                            player.afreecatv.broad.FTK = loginInfo.bjtoken;
                            localStorage.setItem("token_afreecatv", loginInfo.bjtoken);
                        }
                    }
                    
                    function socketConnect(idx) {
                        if(idx > 10) return;
                        if(csocket != null && csocket.readyState && csocket.readyState == 1) {
                            csocket.send(comm.afreeca.socket.login(player.afreecatv.broad.FTK, "", USERLEVEL.GUEST));
                        }
                        else {
                            doTimeout("csocket_open_login", function() {
                                socketConnect(idx + 1);
                            }, 2000);
                        }
                    }
                    socketConnect(0);
                }
                
                csocket.onmessage = function (e) {
                    var t = null;
                    e.data instanceof ArrayBuffer ? (t = e.data, comm.afreeca.socket.parseMessage(t)) : t = comm.afreeca.socket.readBuffer(e.data);
                };
                
                csocket.onclose = function (data) {
                    player.afreecatv.reconnect(3000);
                };
                
                csocket.onerror = function(data) {
                    player.afreecatv.reconnect(1000);
                }
            }, 100);
        },
        relaysocket: function(broadno) {
            if(sub.debug) console.log("afreeca chat relaysocket", broadno);
            //player.afreecatv.broad = broad;
            //player.afreecatv.datainfo.relaychat.socket
            //var relaysocket = player.afreecatv.datainfo.relaychat.socket[broadno].socket;
            
            doTimeout("afreecatv_relaysocket_" + broadno + "_run", function() {
                
                //연결 끊기
                if(player.afreecatv.datainfo.relaychat.socket[broadno].socket != null && player.afreecatv.datainfo.relaychat.socket[broadno].socket.readyState && player.afreecatv.datainfo.relaychat.socket[broadno].socket.readyState == 1) {
                    //csocket.close();
                    return;
                }
                player.afreecatv.relayreconnect(broadno);
                //http://afreecahelper.m.afreecatv.com/api/broad/aflol/205697138
                $.ajax({
                    type:"GET",
                    url:afreecaUrl + "broad/" + player.afreecatv.datainfo.id + "/" + broadno,
                    dataType:"json",
                    timeout:5000,
                    cache: false,
                    success: function(relaydata) {
                        if(sub.debug) console.log("afreeca relaysocket data", relaydata);
                        if(relaydata && relaydata.result && relaydata.data && relaydata.result == true) {
                            player.afreecatv.datainfo.relaychat.socket[broadno].broad = {
                                RESULT:1,
                                FTK:"",
                                BNO:relaydata.data["broad_no"],
                                BJID:player.afreecatv.datainfo.id,
                                BPWD:"",
                                RESOLUTION:"",
                                CHATNO:relaydata.data["chat_no"],
                                TITLE:relaydata.data.title,
                                CTIP:relaydata.data["relay_ip"],
                                CTPT:relaydata.data["relay_port"],
                                CHIP:relaydata.data["chat_ip"],
                                CHPT:relaydata.data["chat_port"]
                            };
                            
                            player.afreecatv.datainfo.relaychat.socket[broadno].socket = new WebSocket("ws://" + player.afreecatv.datainfo.relaychat.socket[broadno].broad.CHIP + ":" + player.afreecatv.datainfo.relaychat.socket[broadno].broad.CHPT + "/Websocket", "chat");
                            player.afreecatv.datainfo.relaychat.socket[broadno].socket.binaryType = "arraybuffer";
                            
                            player.afreecatv.datainfo.relaychat.socket[broadno].socket.onopen = function() {
                                if(sub.debug) console.log("afreeca relaysocket open", broadno);
                                player.afreecatv.relayreconnect(broadno);
                                
                                player.afreecatv.datainfo.relaychat.socket[broadno].socket.send(comm.afreeca.socket.login("", "", USERLEVEL.GUEST));
                            }
                            
                            player.afreecatv.datainfo.relaychat.socket[broadno].socket.onmessage = function (e) {
                                var t = null;
                                e.data instanceof ArrayBuffer ? (t = e.data, comm.afreeca.socket.parseMessage(t, broadno)) : t = comm.afreeca.socket.readBuffer(e.data);
                            };
                            
                            player.afreecatv.datainfo.relaychat.socket[broadno].socket.onclose = function (data) {
                                //player.afreecatv.relayreconnect(broadno, 3000);
                            };
                            
                            player.afreecatv.datainfo.relaychat.socket[broadno].socket.onerror = function() {
                                player.afreecatv.relayreconnect(broadno, 1000);
                            }
                        }
                    }
                });
            }, 100);
        },
        received: function(e,broadno) {
            var getRelyCheck = broadno == undefined;
            var getSocket = broadno == undefined || player.afreecatv.datainfo.relaychat.socket[broadno] == undefined ? csocket : player.afreecatv.datainfo.relaychat.socket[broadno].socket;
            var getBroad = broadno == undefined || player.afreecatv.datainfo.relaychat.socket[broadno] == undefined ? player.afreecatv.broad : player.afreecatv.datainfo.relaychat.socket[broadno].broad;
            switch (e.serviceCode) {
                case comm.afreeca.ChatServiceType.SVC_LOGIN:
                    //["", "16|0"]
                    if(sub.debug) console.log("received login", e.serviceCode, e.packet, broadno);
                    
                    var getBroadFTK = "";
                    if(broadno == undefined) {
                        player.afreecatv.reconnect();
                        getBroadFTK = getBroad.FTK;
                    }
                    else {
                        player.afreecatv.relayreconnect(broadno);
                    }
                    
                    getSocket.send(comm.afreeca.socket.joinch(getBroad.CHATNO, getBroadFTK, 0, "", comm.afreeca.socket.getLog({
                    //getSocket.send(comm.afreeca.socket.joinch(player.afreecatv.broad.CHATNO, null, 0, "", comm.afreeca.socket.getLog({
                        set_bps: "",
                        view_bps: "",
                        quality: "ori",
                        ad_uuid: "",
                        uuid: 0,
                        geo_cc: "",
                        geo_rc: "",
                        acpt_lang: "",
                        svc_lang: ""
                    }) + comm.afreeca.socket.getAddInfo({
                        pwd: $.trim(loginInfo.bjpw),
                        auth_info: ""
                    })));
                    break;
                
                case comm.afreeca.ChatServiceType.SVC_JOINCH:
                    //["413", "", "0", "3", "", "1"]
                    if(sub.debug) console.log("received joinch", e.serviceCode, e.packet, broadno);
                
                    if(getSocket && getSocket.readyState && getSocket.readyState == 1) {
                        if(broadno == undefined) {
                            if(subType === "chat") sub.chat.previewchat(false);
                            
                            doTimeout("afreecatv_socket_reconnect",false);
                            player.afreecatv.keepalive();
                            
                            //시그니처 별풍선
                            player.afreecatv.stars();
                            
                            //시그니처 이모티콘
                            player.afreecatv.signature();
                        }
                        else {
                            doTimeout("afreecatv_relaysocket_" + broadno + "_reconnect",false);
                            player.afreecatv.relaykeepalive(broadno);
                        }
                    }
                    break;
                    
                case comm.afreeca.ChatServiceType.SVC_CHUSER:
                    var a = Number(e.packet[0]);
                    var joinUser = {};
                    if(a == 1) {    //조인
                        for(var i = 1; i < e.packet.length; i += 3) {
                            var userFlag = [0, 0];
                            try{
                                userFlag = e.packet[i + 2].split("|");
                            }
                            catch(error) {
                                userFlag = [0, 0];
                            }
                            
                            joinUser = {
                                id: e.packet[i],
                                nickname: e.packet[i + 1],
                                flag1: userFlag[0],
                                flag2: userFlag[1]
                            }
                            player.afreecatv.datainfo.userinfo[e.packet[i]] = {
                                id: e.packet[i],
                                nickname: e.packet[i + 1],
                                flag1: userFlag[0],
                                flag2: userFlag[1]
                            };
                        }
                        
                        if(subType == "chat") {
                            if(e.packet.length < 5 && joinUser.id != undefined && joinUser.id !== "" && joinUser.id !== player.afreecatv.datainfo.id) {
                                sub.chat.joinvoice({broad:"afreecatv",uid:joinUser.id,uname:joinUser.nickname});
                            }
                        }
                    }
                    else {  //아웃
                        var userFlag = [0, 0];
                        try{
                            userFlag = e.packet[3].split("|");
                        }
                        catch(error) {
                            userFlag = [0, 0];
                        }
                        switch(Number(userFlag[0])) {
                            case comm.afreeca.ChatQuitStatus.NORMAL:
                                break;
                            case comm.afreeca.ChatQuitStatus.DUMB:
                                //console.log("kick dumb DUMB", e.serviceCode, e.packet);
                                if(subType == "alert") {
                                    sub.alert.cancelvoice("dumb",e.packet[1].replace(/\(\d\)/g, ""));
                                }
                                break;
                            case comm.afreeca.ChatQuitStatus.KCIK:
                            case comm.afreeca.ChatQuitStatus.ADMKICK:
                                //console.log("kick dumb KICK ADMKICK", e.serviceCode, e.packet);
                                var getDumbType = Number(e.packet[4]);
                                if(subType == "chat") {
                                    sub.chat.cancelchat(e.packet[1].replace(/\(\d\)/g, ""));
                                }
                                else if(subType == "alert") {
                                    sub.alert.cancelvoice("kick",e.packet[1].replace(/\(\d\)/g, ""));
                                }
                                break;
                            
                            case comm.afreeca.ChatQuitStatus.OVERCHAT:
                            case comm.afreeca.ChatQuitStatus.BLIND:
                                break;
                        }
                    }
                    break;
                case comm.afreeca.ChatServiceType.SVC_SETDUMB:
                //console.log("dumb dumb", e.serviceCode, e.packet);
                    var getDumbType = Number(e.packet[5]);
                    if(getDumbType === 2) {    //채금
                        if(subType == "alert") {
                            sub.alert.cancelvoice("dumb",e.packet[0].replace(/\(\d\)/g, ""));
                        }
                    }
                    break;
                            
                case comm.afreeca.ChatServiceType.SVC_CHATMESG:
                    if(subType == "chat" || subType == "alert") {
                        var getChatId = Number(e.packet[2]);
                        var getChatType = "";
                        var getMsg = e.packet[0].replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,"").replace(/\r\n/gi,"<br />");
                        if(player.afreecatv.datainfo.userinfo[e.packet[1]] != undefined && player.afreecatv.datainfo.userinfo[e.packet[1]].nickname != undefined) {
                            var getUserInfo = player.afreecatv.datainfo.userinfo[e.packet[1]];
                        }
                        else {
                            var getUserInfo = { nickname: e.packet[1], flag1:0 }
                        }
                        
                        if(getChatId === 1 || getChatId === 2) {
                            if(sub.debug) console.log("notice police", e);
                            getChatType = getChatId === 1 ? "notice" : "police";
                        }
                        
                        var getMsgData = ["CHATMESG", getMsg, e.packet[1], "", getUserInfo.nickname, getUserInfo.flag1, getChatType];
                        sub[subType].msg(getMsgData, true);
                    }
                    break;
                
                case comm.afreeca.ChatServiceType.SVC_SUPERCHAT:
                    if(subType == "chat" || subType == "alert") {
                        var getMsg = e.packet[0].replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,"").replace(/\r\n/gi,"<br />");
                        var getChatId = e.packet[1].replace(/\(\d\)/g, "");
                        var getChatName = "";
                        var getChatNick = getChatId;
                        if(player.afreecatv.datainfo.userinfo[getChatId] != undefined && player.afreecatv.datainfo.userinfo[getChatId].nickname != undefined) {
                            getChatName = player.afreecatv.datainfo.userinfo[getChatId].nickname;
                            getChatNick = player.afreecatv.datainfo.userinfo[getChatId].nickname + "(" + getChatId + ")";
                        }
                        if(getChatName === "") getChatName = getChatId;
                        sub[subType].add({
                            type:subType == "chat" ? "chat" : "afsuper",
                            grade:"notice",
                            gender:"m",
                            agent:"pc",
                            uid:getChatId,
                            uname:getChatName,
                            msg:subType == "chat" ? (getChatNick + " : " + getMsg) : getMsg
                        }, true);
                    }
                    break;    
                    
                case comm.afreeca.ChatServiceType.SVC_SENDADMINNOTICE:
                    //console.log("chat adminnotice", e.serviceCode, e.packet, broadno);
                    if(getRelyCheck == false) return;
                    
                    if(subType == "chat") {
                        var getMsg = e.packet[0].replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,"").replace(/\r\n/gi,"<br />");
                        sub.chat.add({
                            type:"chat",
                            grade:"notice",
                            gender:"m",
                            agent:"pc",
                            uid:"",
                            uname:"[아프리카TV 안내]",
                            msg:getMsg
                        });
                    }
                    break;
                    
                case comm.afreeca.ChatServiceType.SVC_SETBJSTAT:
                    if(getRelyCheck == false) return;
                     
                    var a = Number(e.packet[0]);
                    if(a === 0) {
                        doTimeout("afreeca_close", function() {
                            location.reload(true);
                        }, randomRange(10, 200) * 10);
                        
                        if(subType == "goal") {
                            sub.goal.goalsetup("save", true);
                        }
                        else if(subType == "subtitle") {
                            sub.subtitle.starsetup("save",true);
                        }
                    }
                    
                    break;
                    
                case comm.afreeca.ChatServiceType.SVC_KICK:
                    // if(subType == "chat") {
                        // sub.chat.cancelchat(e.packet[0].replace(/\(\d\)/g, ""));
                    // }
                    // else if(subType == "alert") {
                        // sub.alert.cancelvoice("kick",e.packet[0].replace(/\(\d\)/g, ""));
                    // }
                    break;
                    
                case comm.afreeca.ChatServiceType.SVC_SETUSERFLAG:
                    var userFlag = [0, 0];
                    try{
                        userFlag = e.packet[0].split("|");
                    }
                    catch(error) {
                        userFlag = [0, 0];
                    }
                            
                    player.afreecatv.datainfo.userinfo[e.packet[1]] = {
                        id: e.packet[1],
                        nickname: e.packet[2],
                        flag1: userFlag[0],
                        flag2: userFlag[1]
                    };
                    
                    break;
                    
                case comm.afreeca.ChatServiceType.SVC_SETSUBBJ:
                    var getUserInfo = player.afreecatv.datainfo.userinfo[e.packet[0]];
                    if(getUserInfo != undefined && getUserInfo.id != undefined) {
                        var userFlag = [0, 0];
                        try{
                            userFlag = e.packet[1].split("|");
                        }
                        catch(error) {
                            userFlag = [0, 0];
                        }
                    
                        player.afreecatv.datainfo.userinfo[e.packet[0]] = {
                            id: e.packet[0],
                            nickname: getUserInfo.nickname,
                            flag1: userFlag[0],
                            flag2: userFlag[1]
                        };
                    }
                            
                    break;
                    
                case comm.afreeca.ChatServiceType.SVC_SETNICKNAME:
                    var getUserInfo = player.afreecatv.datainfo.userinfo[e.packet[0]];
                    if(getUserInfo != undefined && getUserInfo.id != undefined) {
                        player.afreecatv.datainfo.userinfo[e.packet[0]].nickname = e.packet[1];
                    }
                    
                    break;
                
                //별풍선
                case comm.afreeca.ChatServiceType.SVC_SENDBALLOON:
                case comm.afreeca.ChatServiceType.SVC_SENDBALLOONSUB:
                case comm.afreeca.ChatServiceType.SVC_VOD_BALLOON:
                case comm.afreeca.ChatServiceType.SVC_ADCON_EFFECT:
                case comm.afreeca.ChatServiceType.SVC_VIDEO_BALLOON:
                case comm.afreeca.ChatServiceType.SVC_VIDEOBALLOON:
                    if(getRelyCheck == false) return;
                    
                    if(subType == "chat" || subType == "alert" || (subType == "subtitle" && sub.subtitle.data.theme == "star") || (subType == "goal" && (sub.goal.data.type == "star" || sub.goal.data.type == "starm"))) {
                        var getGiftId = "";
                        var getGiftname = "";
                        var getGiftValue = 0;
                        var getGiftJoin = 0;
                        var getGiftMsg = "";
                        var getGiftType = "";
                        
                        if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_SENDBALLOON) {
                            getGiftId = e.packet[1].replace(/\(\d\)/g, "");
                            getGiftname = e.packet[2];
                            getGiftValue = Number(e.packet[3]);
                            getGiftJoin = Number(e.packet[4]);
                            getGiftType = "SENDBALLOON";
                        }
                        else if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_SENDBALLOONSUB) {
                            getGiftId = e.packet[3].replace(/\(\d\)/g, "");
                            getGiftname = e.packet[4];
                            getGiftValue = Number(e.packet[5]);
                            getGiftJoin = Number(e.packet[6]);
                            getGiftType = "SENDBALLOONSUB";
                        }
                        else if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_VOD_BALLOON) {
                            getGiftId = e.packet[1].replace(/\(\d\)/g, "");
                            getGiftname = e.packet[2];
                            getGiftValue = Number(e.packet[3]);
                            getGiftType = "VODBALLOON";
                        }
                        else if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_ADCON_EFFECT) {
                            getGiftId = e.packet[2].replace(/\(\d\)/g, "");
                            getGiftname = e.packet[3];
                            getGiftValue = Number(e.packet[9]);
                            getGiftJoin = Number(e.packet[10]);
                            getGiftType = "ADBALLOON";
                        }
                        else if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_VIDEO_BALLOON || e.serviceCode === comm.afreeca.ChatServiceType.SVC_VIDEOBALLOON) {
                            //TODO 체크
                            // $.ajax({
                                // type:"POST",
                                // url:logUrl + "lib/aflog.php",
                                // data:{
                                    // type:"videoballoon",
                                    // log:JSON.stringify({ bjid:loginInfo.bjid, data:e.packet })
                                // }
                            // });
                            
                            getGiftId = e.packet[2].replace(/\(\d\)/g, "");
                            getGiftname = e.packet[3];
                            getGiftValue = Number(e.packet[4]);
                            //getGiftJoin = Number(e.packet[5]);
                            getGiftType = "VIDEOBALLOON";
                        }
                        
                        if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_VOD_BALLOON) {
                            getGiftMsg = utilPrintf("%s님이 " + "동영상 별풍선 %s개를 선물했습니다!", getGiftname + "(" + getGiftId + ")", getGiftValue);
                        }
                        else if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_ADCON_EFFECT) {
                            getGiftMsg = utilPrintf("%s님이 " + "애드벌룬 %s개를 선물했습니다!", getGiftname + "(" + getGiftId + ")", getGiftValue);
                            if(getGiftJoin > 0) {
                                getGiftMsg += "<br>" + utilPrintf("%s님이 %s번째로 팬클럽이 되셨습니다.",getGiftname + "(" + getGiftId + ")", getGiftJoin);
                            }
                        }
                        else if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_VIDEO_BALLOON || e.serviceCode === comm.afreeca.ChatServiceType.SVC_VIDEOBALLOON) {
                            getGiftMsg = utilPrintf("%s님이 " + "영상 풍선 %s개를 선물했습니다!", getGiftname + "(" + getGiftId + ")", getGiftValue);
                            if(getGiftJoin > 0) {
                                getGiftMsg += "<br>" + utilPrintf("%s님이 %s번째로 팬클럽이 되셨습니다.",getGiftname + "(" + getGiftId + ")", getGiftJoin);
                            }
                        }
                        else {
                            var getGiftMsg = utilPrintf("%s님이 " + (getGiftType == "SENDBALLOON" ? "" : "중계방에서") + " 별풍선 %s개를 선물했습니다!", getGiftname + "(" + getGiftId + ")", getGiftValue);
                            if(getGiftJoin > 0) {
                                getGiftMsg += "<br>" + utilPrintf("%s님이 %s번째로 팬클럽이 되셨습니다.",getGiftname + "(" + getGiftId + ")", getGiftJoin);
                            }
                        }
                        
                        if(getGiftId !== "" && getGiftValue > 0 && getGiftMsg !== "") {
                            var starData = {
                                type:"star",
                                startype:getGiftType,
                                grade:"gift",
                                gender:"m",
                                agent:"pc",
                                relay:getGiftType == "SENDBALLOONSUB" ? "sub" : "main",
                                uid:getGiftId.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                                uname:getGiftname.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                                msg:getGiftMsg.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                                value:getGiftValue,
                                join:getGiftJoin,
                                broadno:broadno
                            };
                            
                            if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_ADCON_EFFECT) {
                                starData.title = e.packet[6];
                                starData.imgurl = e.packet[7];
                            }
                            else if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_VIDEO_BALLOON || e.serviceCode === comm.afreeca.ChatServiceType.SVC_VIDEOBALLOON) {
                                starData.videofile = e.packet[12];
                                starData.videoimg = e.packet[13];
                            }
                            
                            if(subType == "subtitle") {
                                sub[subType].staradd(starData);
                            }
                            else if(subType == "goal") {
                                sub[subType].opt.lastname = starData.uname;
                                sub[subType].add(getGiftValue);
                            }
                            else if(subType == "alert") {
                                starData.msg = "";
                                sub[subType].add(starData,true);
                            }
                            else {
                                sub[subType].add(starData);
                            }
                        }
                    }
                    
                    break;
                    
                //구독
                case comm.afreeca.ChatServiceType.SVC_FOLLOW_ITEM:
                case comm.afreeca.ChatServiceType.SVC_FOLLOW_ITEM_EFFECT:
                    if(getRelyCheck == false) return;
                    
                    if(subType == "chat" || subType == "alert") {
                        var getGiftsubtype = [];
                        if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_FOLLOW_ITEM) {
                            var getGiftId = e.packet[2].replace(/\(\d\)/g, "");
                            var getGiftName = e.packet[3];
                            var getGiftValue = 1;
                            var getGiftMonth = "";
                            switch(Number(e.packet[4])) {
                                case 1:
                                case 4:
                                    getGiftMonth = "3개월 정기";
                                    getGiftsubtype = [getGiftMonth, "90days_"];
                                    getGiftValue = 3;
                                    break;
                                    
                                case 2:
                                case 5:
                                    getGiftMonth = "6개월 정기";
                                    getGiftsubtype = [getGiftMonth, "180days_"];
                                    getGiftValue = 6;
                                    break;
                                
                                case 3:
                                case 6:
                                    getGiftMonth = "12개월 정기";
                                    getGiftsubtype = [getGiftMonth, "360days_"];
                                    getGiftValue = 12;
                                    break;
                            }
                            var getGiftMsg = utilPrintf("%s님이 %s구독 하였습니다", getGiftName + "(" + getGiftId + ")", getGiftMonth);
                        }
                        else {
                            var getGiftId = e.packet[1].replace(/\(\d\)/g, "");
                            var getGiftName = e.packet[2];
                            var getGiftValue = Number(e.packet[3]);
                            var getGiftMsg = utilPrintf("%s님이 %s개월 " + (Number(getGiftValue) > 1 ? "연속 " : "") + "구독 중입니다!", getGiftName + "(" + getGiftId + ")", getGiftValue);
                        }
                        
                        sub[subType].add({
                            type:subType == "chat" ? "star" : "afsubscription",
                            startype:"afsubscription",
                            subtype:getGiftsubtype,
                            grade:"gift",
                            gender:"m",
                            agent:"pc",
                            uid:getGiftId,
                            uname:getGiftName,
                            msg:getGiftMsg,
                            value:getGiftValue,
                            join:0,
                            broadno:broadno
                        });
                    }
                    break;
                    
                //희망별풍선
                case comm.afreeca.ChatServiceType.SVC_SENDHOPEBALLOON:
                case comm.afreeca.ChatServiceType.SVC_SENDHOPEBALLOONSUB:
                    if(getRelyCheck == false) return;
                    
                    break;
                
                //서포터
                case comm.afreeca.ChatServiceType.SVC_SENDFANLETRTRER:
                case comm.afreeca.ChatServiceType.SVC_SENDFANLETRTRERSUB:
                    if(getRelyCheck == false) return;
                    
                    if(subType == "chat" || subType == "alert") {
                        if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_SENDFANLETRTRER) {
                            var getGiftId = e.packet[2].replace(/\(\d\)/g, "");
                            var getGiftname = e.packet[3];
                            var getGiftPaper = Number(e.packet[5]);
                            var getGiftValue = Number(e.packet[7]);
                            var getGiftJoin = Number(e.packet[8]);
                            var getGiftType = "SENDFANLETTER";
                        }
                        else {
                            var getGiftId = e.packet[3].replace(/\(\d\)/g, "");
                            var getGiftname = e.packet[4];
                            var getGiftPaper = Number(e.packet[6]);
                            var getGiftValue = Number(e.packet[8]);
                            var getGiftJoin = Number(e.packet[9]);
                            var getGiftType = "SENDFANLETTERSUB";
                        }
                        if(subType == "chat") {
                            var getGiftMsg = utilPrintf("%s님이 " + (getGiftType == "SENDFANLETTER" ? "" : "중계방에서") + " 스티커 %s개를 선물했습니다!", getGiftname + "(" + getGiftId + ")", getGiftValue);
                            if(getGiftJoin > 0) {
                                getGiftMsg += "<br>" + utilPrintf("%s님이 %s번째로 서포터가 되셨습니다.",getGiftname + "(" + getGiftId + ")", getGiftJoin);
                            }
                        }
                        else {
                            var getGiftMsg = "";
                        }
                        
                        sub[subType].add({
                            type:"sticker",
                            grade:"gift",
                            gender:"m",
                            agent:"pc",
                            relay:getGiftType == "SENDFANLETTER" ? "main" : "sub",
                            uid:getGiftId.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            uname:getGiftname.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            msg:getGiftMsg.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            paper:getGiftPaper,
                            value:getGiftValue,
                            join:getGiftJoin,
                            broadno:broadno
                        }, true);
                    }
                    
                    break;
                    
                //초콜릿
                case comm.afreeca.ChatServiceType.SVC_CHOCOLATE:
                case comm.afreeca.ChatServiceType.SVC_CHOCOLATESUB:
                    if(getRelyCheck == false) return;
                    
                    if(subType == "chat" || subType == "alert") {
                        var getGiftId = e.packet[2].replace(/\(\d\)/g, "");
                        var getGiftName = e.packet[3];
                        var getGiftValue = Number(e.packet[4]);
                        var getGiftType = "CHOCOLATE";
                        if(e.serviceCode === comm.afreeca.ChatServiceType.SVC_CHOCOLATESUB) {
                            getGiftType = "CHOCOLATESUB";
                        }
                        
                        if(subType == "chat") {
                            var getGiftMsg = utilPrintf("%s님이 " + (getGiftType == "CHOCOLATE" ? "" : "중계방에서") + " 초콜릿 %s개를 선물했습니다!", getGiftName + "(" + getGiftId + ")", getGiftValue);
                        }
                        else {
                            var getGiftMsg = "";
                        }
                        
                        sub[subType].add({
                            type:"choco",
                            grade:"gift",
                            gender:"m",
                            agent:"pc",
                            relay:getGiftType == "CHOCOLATE" ? "main" : "sub",
                            uid:getGiftId.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            uname:getGiftName.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            msg:getGiftMsg.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,""),
                            value:getGiftValue,
                            broadno:broadno
                        }, true);
                    }
                    break;
                
                //구매
                case comm.afreeca.ChatServiceType.SVC_BUYGOODS:
                case comm.afreeca.ChatServiceType.SVC_BUYGOODSSUB:
                    if(getRelyCheck == false) return;
                    
                    break;
                    
                case comm.afreeca.ChatServiceType.SVC_DIRECTCHAT:
                case comm.afreeca.ChatServiceType.SVC_NOTICE:
                case comm.afreeca.ChatServiceType.SVC_RELOADHOST:
                case comm.afreeca.ChatServiceType.SVC_CLUBCOLOR:
                    break;
                case comm.afreeca.ChatServiceType.SVC_ICEMODE:
                    // console.log("received icemode", e.serviceCode, e.packet, broadno);
                    // if(getRelyCheck == false) {
                        // player.afreecatv.datainfo.relaychat.socket[broadno].icemode = true;
                    // }
                    break;
                case comm.afreeca.ChatServiceType.SVC_ICEMODERELAY:
                    // console.log("received relay icemode", e.serviceCode, e.packet, broadno);
                    
                    break;
                case comm.afreeca.ChatServiceType.SVC_MANAGERCHAT:
                case comm.afreeca.ChatServiceType.SVC_SNSMESSAGE:
                case comm.afreeca.ChatServiceType.SVC_UPDATETICKET:
                case comm.afreeca.ChatServiceType.SVC_CHATBLOCKMODE:
                case comm.afreeca.ChatServiceType.SVC_SETBROADINFO:
                case comm.afreeca.ChatServiceType.SVC_SENDPROMOTION:
                case comm.afreeca.ChatServiceType.SVC_ADMIN_CHUSER:
                case comm.afreeca.ChatServiceType.SVC_TRANSLATION_STATE:
                case comm.afreeca.ChatServiceType.SVC_TRANSLATION:
                case comm.afreeca.ChatServiceType.SVC_SVC_KICK_MSG_STATE:
                case comm.afreeca.ChatServiceType.SVC_CLIDOBAEINFO:    
                    break;
                
            }
        },
        info: function() {
            doTimeout("afreecatv_info", function() {
                if(player.afreecatv.datainfo.id != "" && player.afreecatv.datainfo.connect == true) {
                    replace.apiload({
                        id:player.afreecatv.datainfo.id,
                        type:"indexes",
                        time:apiData.indexes.time
                    });
                }
                player.afreecatv.info();
            }, comm.apiload.time());
        },
        view: function() {
            doTimeout("afreecatv_view", function() {
                if(player.afreecatv.datainfo.id != "" && player.afreecatv.datainfo.connect == true) {
                    replace.apiload({
                        id:player.afreecatv.datainfo.id,
                        type:"viewer",
                        time:apiData.viewer.time
                    });
                }
                player.afreecatv.view();
            }, comm.apiload.time());
        },
        up: function() {
            var getTimeSub = "normal";
            if(subType == "alert" && $.inArray("afup", sub.alert.data.typelist) > -1) {
                var getTimeSub = "up";
            }
            
            doTimeout("afreecatv_up", function() {
                if(player.afreecatv.datainfo.id != "" && player.afreecatv.datainfo.connect == true) {
                    replace.apiload({
                        id:player.afreecatv.datainfo.id,
                        type:"users",
                        sub:getTimeSub,
                        time:apiData.users.time
                    });
                    //replace.api.up(true);
                }
                player.afreecatv.up();
            }, comm.apiload.time());
        }
    },
    
    //TODO 트위치 설정
    twitch: {
        datainfo: {
            id:"",
            room:"",
            connect: false,
            online: false,
            chatconnect: false,
            view:0,
            title:"",
            start:"",
            uptime:"",
            rank:0,
            subcount:0,
            subtime:0,
            sub:null,
            subcheck:false,
            followcount:0,
            followtime:0,
            follow:null,
            detailtype:"",
            option:{},
            joinprev:""
        },
        firstjoin:false,
        socket: null,
        init: function(data) {
            if(sub.debug) console.log("twitch init", data);
            player.twitch.datainfo.option = {
                options: {
                    debug: false
                },
                connection: {
                    secure: true,
                    reconnect: true
                },
                channels: ["#" + data.twid]
            };
            player.twitch.datainfo.id = data.twid;
            player.twitch.datainfo.detailtype = data.detailType;
            
            if(player.twitch.datainfo.id != "") {
                
                //TODO afreehp 테스트 연동
                //afreehp_connect("twitch", { key:realKey, idx:realIdx, id:loginInfo.twid });
                
                var getTwitchChatCheck = false;
                if(subType == "chat" && localOpt.localcheck() == true) {
                    //TODO 채팅입력 사용 체크로 확인할 경우 옵션 키면 연동이 안됨
                    var getChatInputUse = localStorage.getItem("chat_input_use");
                    var getTwitchToken = localStorage.getItem("token_twitch");
                    if(getChatInputUse =="use" && getTwitchToken != undefined && getTwitchToken != null && getTwitchToken != "") {
                        if(loginInfo.twrefresh != undefined && loginInfo.twrefresh != "") {
                            getTwitchChatCheck = true;
                        }
                    }
                }
                
                if(getTwitchChatCheck == true) {
                    player.twitch.refresh();
                }
                else {
                    player.twitch.run(player.twitch.datainfo.option, data.detail);
                }
            }
        },
        refresh: function(msg) {
            if(sub.debug) console.log("twitch refresh", msg);
            if(loginInfo.twrefresh !== "") {
                $.ajax({
                    url:"lib/logintwitch_chat2.php",
                    timeout:5000,
                    dataType:"json",
                    data:{
                        refresh:loginInfo.twrefresh
                    },
                    success: function(datas) {
                        if(sub.debug) console.log("twitch refresh token", datas);
                        
                        playerChatSetup("twitch", datas, false);
                        if(datas.data && datas.data.access_token && datas.data.access_token != "") {
                            player.twitch.datainfo.option.identity = {
                                username: player.twitch.datainfo.id,
                                password: "oauth:" + loginInfo.twauth
                            }
                        }
                        else {
                            player.twitch.datainfo.option.identity = {};
                            delete player.twitch.datainfo.option.identity;
                        }
                        player.twitch.run(player.twitch.datainfo.option, player.twitch.datainfo.detailtype);
                    },
                    error: function() {
                        player.twitch.datainfo.option.identity = {};
                        delete player.twitch.datainfo.option.identity;
                        player.twitch.run(player.twitch.datainfo.option, player.twitch.datainfo.detailtype);
                    }
                });
            }
        },
        run: function(opt, detail) {
            // if(player.twitch.socket != null && player.twitch.socket.readyState() == "OPEN") {
                // return;
            // }
            // else {
                // doTimeout("twitch_run", function() {
                    // if(player.twitch.socket != null && player.twitch.socket.readyState() == "OPEN") {
                        // player.twitch.socket.disconnect();
                    // }
                    // player.twitch.run(opt, detail);
                // }, 1000 * 5);
            // }
            
            doTimeout("twitch_run", function() {
                if(player.twitch.socket != null && player.twitch.socket.readyState() == "OPEN") {
                    return;
                }
                if(player.twitch.datainfo.online == false) {
                    if(typeof tmi === 'undefined') {
                        $.getScript("resource/tmi.min.js", function() {
                            //TODO 테스트
                            $.ajax({
                                type:"POST",
                                url:logUrl + "lib/aflog.php",
                                data:{
                                    type:"twitch_tmi",
                                    log:JSON.stringify(loginInfo)
                                }
                            });
                            player.twitch.run(opt, detail);
                        });
                        return;
                    }
                    
                    player.twitch.socket = new tmi.client(opt);
        
                    player.twitch.socket.on("connected", function(e, s) {
                        //TODO 개인 룸 접속
                        // if(loginInfo.twroom != undefined && loginInfo.twroom !== "") {
                            // player.twitch.socket.join('chatrooms:' + loginInfo.twroom);
                        // }
                        
                        if(sub.debug) console.log("twitch connected", player.twitch.datainfo.online, loginInfo.twroom);
                        doTimeout("twitch_run", false);
                        player.twitch.datainfo.online = true;
                        player.twitch.stats(detail);
                        
                        //TODO 종류에 따라 실행
                        if(subType == "alert") {
                            if($.inArray("twfollow", detail) > -1) {
                                player.twitch.follow();
                            }
                            // if($.inArray("twsubscription", detail) > -1) {
                                // player.twitch.subscription();
                            // }
                        }
                    });
                    player.twitch.socket.on("disconnected", function(e) {
                        player.twitch.datainfo.online = false;
                        if(sub.debug) console.log("twitch disconnected",e);
                        if(e && e == "Login authentication failed") {
                            player.twitch.refresh("login fails");
                            // if(localOpt.localcheck() == true) {
                                // localStorage.setItem("token_twitch_time", 0);
                            // }
                            // location.reload();
                        }
                    });
                    
                    if(subType == "chat") {
                        player.twitch.socket.on("join", function(channel, username, self) {
                            if(sub.debug) console.log("twitch join", channel, username, self);
                            
                            if(player.twitch.firstjoin == true) {
                                doTimeout("twitch_join_prev", function() {
                                    player.twitch.datainfo.joinprev = "";
                                }, 1000 * 10);
                                if(player.twitch.datainfo.joinprev != username) {
                                    sub.chat.joinvoice({broad:"twitch",uid:"",uname:username});
                                }
                                player.twitch.datainfo.joinprev = username;
                            }
                            else {
                                if(username == loginInfo.twid) {
                                    doTimeout("twitch_join", function() {
                                        player.twitch.firstjoin = true;
                                    }, 3000);
                                }
                            }
                        });
                        doTimeout("twitch_join", function() {
                            player.twitch.firstjoin = true;
                        }, 1000 * 60);
            
                        player.twitch.socket.on("message", function(tid, tinfo, tmsg, n) {
                            //console.log("twitch message", tid, tinfo, tmsg, n);
                            //if(n) return; 자신글 취소
                            switch(tinfo["message-type"]) {
                                case "action":
                                case "chat":
                                    sub.chat.msgt({ channel:tid, info:tinfo, msg:tmsg });
                                    break;
                                case "whisper":
                                    break;
                                default:
                                    break;
                            }
                        });
                        //밴
                        player.twitch.socket.on("ban", function (channel, username, reason) {
                            sub.chat.cancelchat(username);
                        });
                    }
                    else if(subType == "alert") {
                        player.twitch.socket.on("hosted", function (channel, target, viewers, autohost) {
                            if(sub.debug) console.log("twitch hosted", channel, target, viewers);
                            //{"target":"njw0819","viewers":164}
                            sub.alert.msgth({ user:target, view:viewers });
                        });
                        //내가 호스팅해준곳 알림
                        // player.twitch.socket.on("hosting", function (channel, target, viewers) {
                            // console.log("twitch hosting", channel, target, viewers);
                            // //{"target":"njw0819","viewers":164}
                            // sub.alert.msgth({ user:target, view:viewers });
                        // });
                        // player.twitch.socket.on("subscription", function (channel, username, method, message, userstate) {
                            // if(sub.debug) console.log("twitch 구독", channel, username, method, message, userstate);
                            // //{"username":"barkingdogbowwow","method":{"prime":false,"plan":"1000","planName":"Channel Subscription (zzamtiger0310)"},"message":null,"userstate":null}}
                            // if(player.twitch.datainfo.subcheck === false) {
                                // sub.alert.msgts({ user:username, plan:method.plan, name:method.planName, msg:message  });
                            // }
//                             
                        // });
                        
                        // player.twitch.socket.on("subscription", function (channel, username, method, message, userstate) {
                            // if(sub.debug) console.log("twitch 구독", channel, username, method, message, userstate);
                            // //{"username":"barkingdogbowwow","method":{"prime":false,"plan":"1000","planName":"Channel Subscription (zzamtiger0310)"},"message":null,"userstate":null}}
                            // sub.alert.msgts({ user:username, plan:method.plan, name:method.planName, msg:message  });
                        // });
                        
                        player.twitch.socket.on("resub", function(channel, username, months, message, userstate, method) {
                            sub.alert.msgts({ user:username, month:months, name:method.planName, msg:message != undefined && message != null ? message : ""  });
                        });
                        
                        //채팅금지
                        player.twitch.socket.on("timeout", function (channel, username, reason, duration) {
                            sub.alert.cancelvoice("timeout",username,"twitch");
                        });
                        
                        //밴
                        player.twitch.socket.on("ban", function (channel, username, reason) {
                            sub.alert.cancelvoice("ban",username,"twitch");
                        });
                    }
                    
                    if(subType == "chat" || (subType == "alert" && $.inArray("bits", detail) > -1) || (subType == "goal" && detail == "bits") || (subType == "subtitle" && sub.subtitle.data.theme == "star" && $.inArray("bits", sub.subtitle.data.starlist) > -1)) {
                        player.twitch.socket.on("cheer", function(channel, userstate, message) {
                            if(sub.debug) console.log("twitch cheer bits", channel, userstate, message);
                            sub[subType].msgtc({ user:userstate, msg:message });
                        });
                    }
                    
                    if(subType == "chat" || subType == "alert") {
                        player.twitch.socket.on("subgift", function(channel, gifterName, gifteeName, method, message, userstate) {
                            try{
                                //TODO 체크
                                $.ajax({
                                    type:"POST",
                                    url:logUrl + "lib/aflog.php",
                                    data:{
                                        type:"twitchsubgift",
                                        log:JSON.stringify({ channel:channel, gifterName:gifterName, gifteeName:gifteeName, method:method, message:message, userstate:userstate })
                                    }
                                });
                            }
                            catch(error) {
                                
                            }
                        });
                    }
                    
                    player.twitch.socket.connect();
                }
            }, randomRange(1,3) * 1000);
        },
        stats: function(detail) {
            if(player.twitch.datainfo.id != "") {
                $.ajax({
                    url:"https://api.twitch.tv/kraken/streams/" + player.twitch.datainfo.id,
                    headers: {
                        "Client-ID":twitchClientId
                    },
                    timeout:5000,
                    success: function(data) {
                        if(sub.debug) console.log("twitch stats", data);
                        player.twitch.datainfo.connect = false;
                        if(data && data.stream != undefined && data.stream != null) {
                            if(subType === "chat") sub.chat.previewchat(false);
                            
                            player.twitch.datainfo.connect = true;
                            player.twitch.datainfo.view = parseInt(data.stream.viewers, 10);
                            player.twitch.datainfo.start = data.stream["created_at"].replace("T"," ").replace("Z","");
                            player.twitch.datainfo.uptime = replace.uptime(player.twitch.datainfo.start); 
                            player.twitch.datainfo.title = data.stream.channel.status;
                            player.twitch.datainfo.followcount = parseInt(data.stream.channel.followers, 10);
                            
                            //TODO 종류에 따라 실행
                            if(subType == "goal") {
                                if(detail == "twview") sub.goal.add(player.twitch.datainfo.view);
                                else if(detail == "twsub") sub.goal.add(player.twitch.datainfo.followcount);
                            }
                        }
                        
                        $.ajax({
                            url:"https://api.twitch.tv/kraken/users/" + player.twitch.datainfo.id,
                            headers: {
                                "Client-ID":twitchClientId
                            },
                            timeout:5000,
                            success: function(datas) {
                                if(datas && datas._id != undefined) {
                                    $.ajax({
                                        url:"https://badges.twitch.tv/v1/badges/channels/" + datas._id + "/display?language=en",
                                        timeout:5000,
                                        success: function(datas) {
                                            if(datas && datas["badge_sets"]) {
                                                if(datas["badge_sets"].subscriber && datas["badge_sets"].subscriber.versions) {
                                                    chatTwitchData.badge = datas["badge_sets"].subscriber.versions;
                                                }
                                                if(datas["badge_sets"].bits && datas["badge_sets"].bits.versions) {
                                                    $.each(datas["badge_sets"].bits.versions, function(key, value) {
                                                        chatTwitchData.bits[key] = value;
                                                    });
                                                }
                                            }
                                        }
                                    });
                                    
                                    $.ajax({
                                        url:"https://api.twitch.tv/kraken/bits/actions?api_version=5&channel_id=" + datas._id,
                                        headers: {
                                            "Client-ID":twitchClientId
                                        },
                                        timeout:5000,
                                        success: function(datas) {
                                            if(datas && datas.actions && datas.actions.length > 0) {
                                                try{
                                                    $.each(datas.actions, function(key, value) {
                                                        if(value.prefix && value.tiers) {
                                                            var getCheerData = [];
                                                            $.each(value.tiers, function(keys, values) {
                                                                var getCheerImg = "";
                                                                if(values.images) {
                                                                    var getCheerTheme = values.images.light ? "light" : "dark";
                                                                    var getCheerType = values.images[getCheerTheme].animated ? "animated" : "static";
                                                                    var getCheerKey = values.images[getCheerTheme][getCheerType][2] ? 2 : 1;
                                                                    getCheerImg = values.images[getCheerTheme][getCheerType][getCheerKey];
                                                                }
                                                                getCheerData.push([parseInt(values["min_bits"], 10),values.color,getCheerImg]);
                                                            });
                                                            
                                                            getCheerData = getCheerData.sort(function(a,b) {
                                                                return b[0] - a[0];
                                                            });
                                                            chatTwitchData.cheercustom[value.prefix] = getCheerData;
                                                        }
                                                    });
                                                    //console.log(chatTwitchData.cheercustom);
                                                }
                                                catch(error) {
                                                }
                                            }
                                        }
                                    });
                                }
                            }
                        });
                    },
                    error: function() {
                        player.twitch.datainfo.connect = false;
                    }
                });
            }
            else {
                player.twitch.datainfo.connect = false;
            }
            
            doTimeout("twitch_stats", function() {
                player.twitch.stats(detail);
            }, 1000 * 10);
        },
        follow: function() {
            if(player.twitch.datainfo.id != "") {
                $.ajax({
                    url:"https://api.twitch.tv/kraken/channels/" + player.twitch.datainfo.id + "/follows",
                    headers: {
                        "Client-ID":twitchClientId
                    },
                    timeout:5000,
                    dataType:"json",
                    success: function(data) {
                        //console.log("twitch follow", data, data["_total"]);
                        
                        var getNewFollow = [];
                        var getFollowCheck = true;
                        if(player.twitch.datainfo.follow == null) {
                            player.twitch.datainfo.follow = [];
                            getFollowCheck = false;
                        }
                        
                        if(data && data["_total"] != undefined) {
                            if(data["_total"] > 0 && data["_cursor"] != undefined && data["_cursor"] != "") {
                                $.each(data.follows, function(key, value) {
                                    if(value.user) {
                                        var getFollow = value.user.display_name || value.user.name;
                                        if($.inArray(getFollow,player.twitch.datainfo.follow) == -1) {
                                            player.twitch.datainfo.follow.push(getFollow);
                                            getNewFollow.push(getFollow);
                                        }
                                    }
                                });
                                // if(player.twitch.datainfo.followtime < parseInt(data["_cursor"], 10)) {
                                    // player.twitch.datainfo.followtime = parseInt(data["_cursor"], 10);
                                    // $.each(data.follows, function(key, value) {
                                        // if(value.user) {
                                            // var getFollow = value.user.display_name || value.user.name;
                                            // if($.inArray(getFollow,player.twitch.datainfo.follow) == -1) {
                                                // player.twitch.datainfo.follow.push(getFollow);
                                                // getNewFollow.push(getFollow);
                                            // }
                                        // }
                                    // });
                                // }
                            }
                        }
                        
                        if(getFollowCheck == true && getNewFollow.length > 0) {
                            if(sub.debug) console.log("twitch new follow", getNewFollow);
                            if(subType == "alert") {
                                sub.alert.msgtf(getNewFollow);
                            }
                        }
                    }
                });
            }
            
            doTimeout("twitch_follow", function() {
                player.twitch.follow();
            }, 1000 * 10);
        },
        subscription: function() {
            //TODO 트위치 로그인후 해당 아이디 auth 필요함
            if(player.twitch.datainfo.id != "" && loginInfo.twauth != undefined && loginInfo.twauth != "") {
                $.ajax({
                    url:"https://api.twitch.tv/kraken/channels/" + player.twitch.datainfo.id + "/subscriptions",
                    headers: {
                        "Client-ID":twitchClientId,
                        "Authorization":"OAuth " + loginInfo.twauth
                    },
                    timeout:5000,
                    dataType:"json",
                    success: function(data) {
                        if(sub.debug) console.log("twitch subscription", data, data["_total"]);
                        
                        //TODO 기록
                        // $.ajax({
                            // type:"POST",
                            // url:logUrl + "lib/getlog.php",
                            // data:{
                                // type:"twitch_subscription",
                                // log:JSON.stringify(data)
                            // }
                        // });
                        
                        player.twitch.datainfo.subcheck = true;
                        var getNewSub = [];
                        var getSubCheck = true;
                        if(player.twitch.datainfo.sub == null) {
                            player.twitch.datainfo.sub = [];
                            getSubCheck = false;
                        }
                        
                        if(data && data["_total"] != undefined) {
                            if(data["_total"] > 0 && data["subscriptions"] != undefined && data["subscriptions"] != "") {
                                $.each(data["subscriptions"], function(key, value) {
                                    if(value.user) {
                                        var getSub = value.user.display_name || value.user.name;
                                        if($.inArray(getSub,player.twitch.datainfo.sub) == -1) {
                                            player.twitch.datainfo.sub.push(getSub);
                                            //getNewSub.push({ user:getSub, plan:value["sub_plan"], name:value["sub_plan_name"], msg:""  });
                                            var getMonth = value["sub_plan"] != undefined && !isNaN(value["sub_plan"]) ? (Number(value["sub_plan"]) / 1000) : 1;
                                            getNewSub.push({ user:getSub, month:getMonth, name:value["sub_plan_name"], msg:""  });
                                        }
                                    }
                                });
                            }
                        }
                        
                        if(getSubCheck == true && getNewSub.length > 0) {
                            if(sub.debug) console.log("twitch new sub", getNewSub);
                            
                            if(subType == "alert") {
                                $.each(getNewSub, function(key, value) {
                                    sub.alert.msgts({ user:value.user, plan:value.plan, name:value.name, msg:value.msg });
                                });
                            }
                        }
                    },
                    error: function(data) {
                        if(sub.debug) console.log("twitch subscription error", data);
                        doTimeout("twitch_subscription", false);
                        player.twitch.datainfo.subcheck = false;
                    }
                });
            }
            
            doTimeout("twitch_subscription", function() {
                player.twitch.subscription();
            }, 1000 * 10);
        },
        cheerdata: function(bits,msg) {
            var getImg = "";
            var getColor = "";
            var getCheer = "";
            var getMsg = msg;
            if(getMsg != "") {
                try{
                    $.each(chatTwitchData.cheer, function(key, value) {
                        if(value[0] <= bits) {
                            //getImg = '<img src="http://static-cdn.jtvnw.net/bits/light/animated/' + value[2] + '/2" alt="" class="icon">';
                            getImg = "https://static-cdn.jtvnw.net/bits/light/animated/" + value[2] + "/4";
                            getColor = value[1];
                            getCheer = "cheer" + value[0];
                            return false;
                        }
                    });
                    $.each(chatTwitchData.cheercustom, function(key, value) {
                        var getKey = key.toLowerCase();
                        if(getMsg.indexOf(getKey) == 0) {
                            $.each(value, function(keys, values) {
                                if(values[0] <= bits) {
                                    //getImg = '<img src="' + values[2] + '" alt="" class="icon">';
                                    getImg = values[2].replace("/2.gif","/4.gif");
                                    getColor = values[1];
                                    getCheer = getKey + values[0];
                                    return false;
                                }
                            });
                            return false;
                        }
                    });
                    if(getImg != "") {
                        getMsg = getMsg.replace(new RegExp(getCheer, "gim"), '<img src="' + getImg + '" alt="" class="icon">');
                    }
                }
                catch(error) {
                    
                }
            }
            return [getImg,getColor,getMsg];
        }
    },
    
    //TODO 유튜브 설정
    youtube: {
        prevdata: {
            broad: "",
            chat: "",
            info: "",
            alert: "",
            sub: "",
            spon: ""
        },
        datainfo: {
            name:"",
            id:"",
            liveid:"",
            viewid:"",
            viewkey:"",
            viewtime:0,
            connect:false,
            connectfirst:true,
            online:false,
            view:0,
            title:"",
            start:"",
            uptime:"",
            rank:0,
            subcount:0,
            viewcount:0,
            play:0,
            goaltype:"",
            lasttime:0,
            key:"",
            tokentype:""
        },
        socket: null,
        socketFirst: true,
        data:null,
        token:"",
        firstload:true,
        intervalrefresh:null,
        refreshtime:1000 * 60 * 60,
        
        init: function(data) {
            if(sub.debug) console.log("youtube init", data);
            
            clearInterval(player.youtube.intervalrefresh);
            player.youtube.data = data;
            player.youtube.datainfo.id = data.ytchid;
            
            if(player.youtube.datainfo.id != "") {
                //TODO afreehp 테스트 연동
                player.youtube.afreehpconnect();
                
                
                //TODO youtube 관련 내용 모두 api.php 로 변경
                player.youtube.stats();
                
                if(subType == "chat" || subType == "alert" || (subType == "goal" && data.detail == "ytstar") || (subType == "subtitle" && sub.subtitle.data.theme == "star" && $.inArray("superchat", sub.subtitle.data.starlist) >-1)) {
                    doTimeout("alert_ytchat", function() {
                        player.youtube.livechat();                              
                    }, 5000);
                    
                    if(subType == "alert") {
                        if($.inArray("ytsubscription", data.detail) > -1) {
                            doTimeout("alert_ytsubscription", function() {
                                player.youtube.subscription();                              
                            }, 10000);
                        }
                        if($.inArray("ytsponsor", data.detail) > -1) {
                            doTimeout("alert_ytsponsor", function() {
                                player.youtube.sponsor();                              
                            }, 15000);
                        }
                    }
                }
                else if(subType == "goal" && data.detail != "ytstar") {
                    player.youtube.datainfo.goaltype = data.detail;
                    doTimeout("alert_ytinfo", function() {
                        player.youtube.info();                              
                    }, 10000);
                }
                else if(subType == "subtitle" && sub.subtitle.data.theme == "normal" && (sub.subtitle.data.text.indexOf("{유튜브시청자수}") > -1 || sub.subtitle.data.text.indexOf("{유튜브구독자수}") > -1)) {
                    player.youtube.datainfo.goaltype = "all";
                    doTimeout("alert_ytinfo", function() {
                        player.youtube.info();                              
                    }, 10000);
                }
            }
        },
        
        afreehpconnect: function() {
            doTimeout("afreehp_connect_youtube", function() {
                afreehp_connect("youtube", { key:realKey, idx:realIdx, id:loginInfo.ytchid, viewid:player.youtube.datainfo.viewid });
                
                player.youtube.afreehpconnect();
            }, randomRange(300000, 350000));
        },
        
        refresh: function() {
            if(loginInfo.ytcode != "") {
                $.ajax({
                    url:"lib/loginyoutube_chat2.php",
                    data:{
                        refresh:loginInfo.ytcode
                    },
                    timeout:5000,
                    success: function(datas) {
                        if(sub.debug) console.log("youtube refresh", datas);
                        
                        playerChatSetup("youtube", datas, false);
                    }
                });
            }
        },
        stats: function() {
            
            //비공개는 https://www.youtube.com/live_chat?is_popout=1&v= 에서 continuation 값을 못읽어옴
            $.ajax({
                url:"afreehp/api.php",
                dataType:"json",
                data:{
                    broad:"youtube",
                    type:"broadn",
                    id:loginInfo.ytchid,
                    //viewid:player.youtube.datainfo.tokentype !== "private" ? player.youtube.datainfo.viewid : "",
                    viewid:player.youtube.datainfo.viewid,
                    token:loginInfo.yttoken,
                    code:loginInfo.ytcode,
                    connect:player.youtube.datainfo.connect
                },
                timeout:10000,
                success: function(data) {
                    if(sub.debug) console.log("youtube broad success", data);
                    
                    if(data) {
                        var getConnect = false;
                        var getStatus = data.status != undefined ? data.status : "";
                        var getViewid = data.viewid != undefined ? data.viewid : "";
                        player.youtube.datainfo.tokentype = getStatus;
                        
                        //비공개 별도 안내메시지 표시 getStatus === "private"
                        if(getStatus === "ok") {
                            if(subType === "chat") sub.chat.previewchat(false);
                            
                            getConnect = true;
                        }
                        else if(getStatus === "refresh" && data.token != undefined) {
                            loginInfo.yttoken = data.token;
                        }
                        else if((getStatus === "change" || getStatus === "private") && data.viewid != undefined) {
                            player.youtube.datainfo.viewid = data.viewid;
                        }
                        
                        if(getStatus === "private") {
                            if(subType === "chat") sub.chat.previewinfo("youtube", "private");
                        }
                        else if(getStatus !== "refresh" && getStatus !== "change") {
                            if(player.youtube.datainfo.viewid != getViewid || player.youtube.datainfo.connect != getConnect) {
                                player.youtube.token = "";
                                player.youtube.subtoken = "";
                                player.youtube.datainfo.viewkey = "";
                            }
                            
                            player.youtube.datainfo.connect = getConnect;
                            player.youtube.datainfo.viewid = getConnect === true ? getViewid : "";
                        }
                    }
                }
            });
            
            doTimeout("youtube_stats", function() {
                player.youtube.stats();
            }, comm.apiload.time("ytstats"));
        },
        
        info: function() {
            if(sub.debug) console.log("youtube info", player.youtube.datainfo.goaltype);
            //if(player.youtube.datainfo.id != "") {
            if(player.youtube.datainfo.id != "" && player.youtube.datainfo.connect == true && loginInfo.yttoken !== "") {
                $.ajax({
                    url:"afreehp/api.php",
                    data:{
                        broad:"youtube",
                        type:"info",
                        id:loginInfo.ytchid,
                        viewid:player.youtube.datainfo.viewid,
                        token:loginInfo.yttoken,
                        code:loginInfo.ytcode
                    },
                    dataType:"json",
                    success: function(data) {
                        if(sub.debug) console.log("youtube info view", data);
                        
                        if(data) {
                            if(data.token != undefined) {
                                loginInfo.yttoken = data.token;
                            }
                            
                            if(data.view != undefined && !isNaN(data.view)) {
                                player.youtube.datainfo.view = data.view;
                                if(subType == "goal" && (player.youtube.datainfo.goaltype == "ytview" || player.youtube.datainfo.goaltype == "view" || player.youtube.datainfo.goaltype == "all")) {
                                    sub.goal.add(player.youtube.datainfo.view);
                                }
                            }
                            
                            if(data.items != undefined && data.items.length > 0 && data.items[0].statistics != undefined && data.items[0].statistics.viewCount != undefined) {
                                var getStatic = data.items[0].statistics;
                                if(player.youtube.datainfo.goaltype == "ytsub" || player.youtube.datainfo.goaltype == "ytplay" || player.youtube.datainfo.goaltype == "sub" || player.youtube.datainfo.goaltype == "all") {
                                    var getGoalType = "";
                                    if(player.youtube.datainfo.goaltype == "ytsub" || player.youtube.datainfo.goaltype == "sub") var getGoalType = "subscriberCount";
                                    else if(player.youtube.datainfo.goaltype == "ytplay") var getGoalType = "viewCount";
                                    
                                    player.youtube.datainfo.subcount = getStatic.subscriberCount;
                                    player.youtube.datainfo.viewcount = getStatic.viewCount;
                                    if(subType == "goal" && getStatic[getGoalType]) {
                                        sub.goal.add(getStatic[getGoalType]);
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            doTimeout("youtube_info", function() {
                player.youtube.info();
            }, comm.apiload.time("ytinfo"));
        },
        
        livechat: function() {
            if(player.youtube.datainfo.viewid != "" && player.youtube.datainfo.connect == true) {
                $.ajax({
                	type:"POST",
                    //url:"afreehp/api.php",
                    url:youtubeApiurl + "afreeca_youtubechat.php",
                    data:{
                        broad:"youtube",
                        type:subType,
                        id:loginInfo.ytchid,
                        viewid:player.youtube.datainfo.viewid,
                        key:player.youtube.datainfo.viewkey,
                        time:player.youtube.datainfo.viewtime
                    },
                    dataType:"json",
                    success: function(data) {
                        if(sub.debug) console.log("youtube api chat", data, data.key, data.time, data.debug);
                        
                        if(data && data.result != undefined && data.key != undefined) {
                            player.youtube.datainfo.viewkey = data.key;
                            if(data.data != undefined) {
                                var getData = [];
                                $.each(data.data, function(key, value) {
                                    if(value.time > player.youtube.datainfo.viewtime) {
                                        getData.push(value);
                                        //player.youtube.datainfo.viewtime = value.time;
                                    }
                                });
                                
                                // $.each(data.data, function(key, value) {
                                    // getData.push(value);
                                // });
                                sub[subType].msgylivechat(getData);
                            }
                            if(data.time != undefined && !isNaN(data.time) && player.youtube.datainfo.viewtime < data.time) {
                                player.youtube.datainfo.viewtime = data.time;
                            }
                        }
                        
                        // if(data && data.result != undefined && data.key != undefined) {
                            // player.youtube.datainfo.viewkey = data.key;
                            // if(data.data != undefined) {
                                // var getData = [];
                                // $.each(data.data, function(key, value) {
                                    // getData.push(value);
                                // });
                                // sub[subType].msgylivechat(getData);
//                                 
                                // //TODO 바뀐거 체크
                                // if(data.data.length === 0 && data.time === -1) {
                                    // player.youtube.datainfo.viewtime = new Date().getTime() * 1000;
                                // }
                            // }
                            // //TODO 바뀐거 체크
                            // if(data.time != undefined && !isNaN(data.time) && data.time > 0 && player.youtube.datainfo.viewtime < data.time) {
                                // player.youtube.datainfo.viewtime = data.time;
                            // }
//                             
                        // }
                    }
                });
            }
            
            doTimeout("youtube_livechat", function() {
                player.youtube.livechat();
            }, comm.apiload.time("ytchat"));
        },
        
        //아래도 개선
        subtoken:"",
        subfirstload:true,
        sponsortoken:"",
        sponsorfirstload:true,
        subscription: function() {
            if(player.youtube.datainfo.id != "" && player.youtube.datainfo.connect == true && loginInfo.yttoken !== "") {
                $.ajax({
                    url:"afreehp/api.php",
                    dataType:"json",
                    data:{
                        broad:"youtube",
                        type:"subscription",
                        id:loginInfo.ytchid,
                        token:loginInfo.yttoken,
                        code:loginInfo.ytcode
                    },
                    timeout:5000,
                    success: function(data) {
                        if(sub.debug) console.log("youtube api subscription", data);
                        
                        if(data) {
                            if(data.token != undefined) {
                                loginInfo.yttoken = data.token;
                            }
                            if(data.items != undefined && data.items.length > 0) {
                                sub.alert.msgys(data.items);
                            }
                            // if(data.nextPageToken != undefined) {
                                // player.youtube.subtoken = data.nextPageToken;
                            // }
                        }
                    },
                    error: function(data) {
                        if(sub.debug) console.log("api youtubeapi sub error", data);
                    }
                });
            }
            
            doTimeout("youtube_subscription", function() {
                player.youtube.subscription();
            }, comm.apiload.time("ytsub"));
        },
        sponsor: function() {
            if(player.youtube.datainfo.id != "" && player.youtube.datainfo.connect == true && loginInfo.yttoken !== "") {
                $.ajax({
                    url:"afreehp/api.php",
                    dataType:"json",
                    data:{
                        broad:"youtube",
                        type:"sponsor",
                        id:loginInfo.ytchid,
                        token:loginInfo.yttoken,
                        code:loginInfo.ytcode
                    },
                    timeout:5000,
                    success: function(data) {
                        if(sub.debug) console.log("youtube api sponsor", data);
                        
                        if(data) {
                            if(data.token != undefined) {
                                loginInfo.yttoken = data.token;
                            }
                            if(data.items && data.items.length > 0) {
                                sub.alert.msgysp(data.items);
                            }
                            if(data.error != undefined && data.error.code == 400) {
                                //스폰서 미지원
                                doTimeout("youtube_sponsor", false);
                                return;
                            }
                        }
                    },
                    error: function(data) {
                        if(sub.debug) console.log("api youtubeapi sub error", data);
                    }
                });
            }
            
            doTimeout("youtube_sponsor", function() {
                player.youtube.sponsor();
            }, comm.apiload.time("ytsub"));
        }
    },
    
    //TODO 카카오tv 설정
    kakaotv: {
        prevdata: {
            broad: "",
            info: ""
        },
        datainfo: {
            id:"",
            liveid:"",
            type:"",
            chid:"",
            connect:false,
            online:false,
            connectfirst:true,
            server:false,
            view:0,
            title:"",
            start:"",
            uptime:"",
            rank:0,
            up:0,
            sub:0,
            plus:0,
            ver:0,
            serverurl:"lib/broadinfo.php",
            roomid:""
        },
        socket: null,
        socketFirst: true,
        init: function(data) {
            if(sub.debug) console.log("kakaotv init", data);
            
            player.kakaotv.datainfo.id = data.kaid;
            player.kakaotv.datainfo.id = data.kaid;
            player.kakaotv.datainfo.type = data.detail;
            
            if(player.kakaotv.datainfo.id !== "") {
                
                //TODO afreehp 테스트 연동
                //afreehp_connect("kakao", { key:realKey, idx:realIdx, id:loginInfo.kachid });
                
                player.kakaotv.server();
                player.kakaotv.stats();
                
                if((subType == "goal" && data.detail != "kastar") || (subType == "subtitle" && data.detail != "star")) {
                    player.kakaotv.info();
                }
            }
        },
        server: function(detail) {
            if(subType == "chat" || subType == "alert" || (subType == "subtitle" && sub.subtitle.data.theme == "star") || (subType == "goal" && sub.goal.data.type == "kastar")) {
                player.kakaotv.run();                
            }
                
            doTimeout("kakaotv_run", function() {
                player.kakaotv.server();
            }, 10000);
        },
        reconnect: function(time) {
            doTimeout("kakaotv_socket_reconnect", function() {
                player.kakaotv.broad();
            }, time == undefined ? 30000 : time);
        },
        broad: function() {
            $.ajax({
                url:"lib/broadinfo.php",
                dataType:"json",
                data:{
                    type:"kakaotvbroad",
                    id:player.kakaotv.datainfo.id
                },
                timeout:5000,
                success: function(group) {
                    if(sub.debug) console.log("kakaotv socket group", group);
                    if(group && group.group && group.group.roomInfo) {
                        if(player.kakaotv.socket != null && player.kakaotv.socket.connected == true) {
                            if(subType === "chat") sub.chat.previewchat(false);
                            
                            player.kakaotv.socket.emit("join",{
                                id:player.kakaotv.datainfo.id,
                                groupid:group.groupid,
                                key:group.group.enter,
                                ip:group.group.roomInfo.serverip,
                                port:group.group.roomInfo.port,
                                name:group.name
                            });
                            player.kakaotv.datainfo.roomid = group.group.roomInfo.roomid;
                        }
                    }
                }
            });
            
            doTimeout("kakaotv_broad", function() {
                player.kakaotv.broad();
            }, 20000);
        },
        run: function() {
            doTimeout("kakaotv_server", function() {
                
                if(loginInfo.kasocket != undefined && loginInfo.kasocket == "prev") {
                    //이전 방식
                    if(player.kakaotv.socket != null && player.kakaotv.socket.readyState === 1) {
                        // player.kakaotv.socket.close();
                        // player.kakaotv.socket = null;
                        // doTimeout("kakaotv_run", function() {
                            // player.kakaotv.server();
                        // }, 3000);
                        return;
                    }
                    
                    if(player.kakaotv.datainfo.online == false) {
                        if(player.kakaotv.socket != null) {
                            player.kakaotv.socket.close();
                        }
                        
                        try{
                            player.kakaotv.socket = new WebSocket("ws://" + kakaotvLocalIp + ":" + kakaotvPort);
                        }
                        catch(error) {
                            doTimeout("kakaotv_run", false);
                            doTimeout("kakaotv_server", false);
                            return;
                        }
                        
                        player.kakaotv.socket.onopen = function () {
                            if(sub.debug) console.log("kakaotv socket open");
                            if(subType === "chat") sub.chat.previewchat(false);
                            
                            doTimeout("kakaotv_run", false);
                            doTimeout("kakaotv_server", false);
                            player.kakaotv.datainfo.online = true;
                        };
                        player.kakaotv.socket.onmessage = function (data) {
                            //console.log("kakaotv socket msg", data);
                            if(data && data.data && data.data != "") {
                                try{
                                    var getData = $.parseJSON(data.data);
                                    if(getData && getData.type) {
                                        if(getData.type == "chat") {
                                            sub[subType].msgk(getData.msg,"direct");
                                        }
                                    }
                                }
                                catch(error) {
                                    
                                }
                            }
                        };
                        player.kakaotv.socket.onclose = function () {
                            if(sub.debug) console.log("kakaotv socket close");
                            player.kakaotv.datainfo.online = false;
                            doTimeout("kakaotv_run", function() {
                                player.kakaotv.server();
                            }, 3000);
                        };
                        player.kakaotv.socket.onerror = function () {
                            if(sub.debug) console.log("kakaotv socket error");
                            player.kakaotv.datainfo.online = false;
                            doTimeout("kakaotv_run", function() {
                                player.kakaotv.server();
                            }, 3000);
                        };
                    }
                }
                else {
                    //소켓방식
                    if(player.kakaotv.socket != null && player.kakaotv.socket.connected == true) {
                        return;
                    }
                    
                    if(player.kakaotv.datainfo.online == false) {
                        if(player.kakaotv.socket != null) {
                            player.kakaotv.socket.close();
                        }
                        
                        player.kakaotv.socket = io.connect(kakaotvSocketIp, {
                            reconnection: true
                        });
                        
                        player.kakaotv.socket.on("connect", function(data) {
                            if(sub.debug) console.log("kakaotv socket open");
                            player.kakaotv.broad();
                        });
                        
                        player.kakaotv.socket.on("message", function(data) {
                            if(sub.debug) console.log("kakaotv socket msg", JSON.stringify(data));
                            //player.kakaotv.reconnect();
                            if(data && data.type) {
                                sub[subType].msgk([data],"socket");
                                
                                if(subType == "chat") {
                                    if(data.type == "join") {
                                        sub.chat.joinvoice({broad:"kakaotv",uid:"",uname:data.uname});
                                    }
                                    else if(data.type == "kick") {
                                        sub.chat.cancelchat(data.uname);
                                    }
                                }
                                else if(subType == "alert") {
                                    if(data.type == "recommend") {
                                        sub.alert.kakaotv.up(data);
                                    }
                                    else if(data.type == "kick") {
                                        sub.alert.cancelvoice("kick",data.uname,"kakaotv");
                                    }
                                }
                            }
                        });
                        
                        player.kakaotv.socket.on("broadopen", function(data) {
                            if(sub.debug) console.log("kakaotv socket broadopen", data);
                            doTimeout("kakaotv_broad",false);
                            doTimeout("kakaotv_run", false);
                            doTimeout("kakaotv_server", false);
                            //player.kakaotv.reconnect();
                            player.kakaotv.datainfo.online = true;
                            player.kakaotv.ping();
                        });
                        
                        player.kakaotv.socket.on("broadclose", function(data) {
                            if(sub.debug) console.log("kakaotv socket broadclose", data);
                            // player.kakaotv.datainfo.online = false;
                            doTimeout("kakaotv_broad", function() {
                                player.kakaotv.broad();
                            }, 3000);
                        });
                        
                        player.kakaotv.socket.on("keycheck", function(data) {
                            if(sub.debug) console.log("keycheck", data);
                            // player.kakaotv.socket.close();
                            // player.kakaotv.socket = null;
                            //player.kakaotv.datainfo.online = false;
                            doTimeout("kakaotv_broad", function() {
                                player.kakaotv.broad();
                            }, 3000);
                        });
                        
                        player.kakaotv.socket.on("close", function(data) {
                            if(sub.debug) console.log("kakaotv close", data);
                            player.kakaotv.datainfo.online = false;
                            doTimeout("kakaotv_run", function() {
                                player.kakaotv.server();
                            }, 3000);
                        });
                        
                        player.kakaotv.socket.on("disconnect", function(data) {
                            if(sub.debug) console.log("disconnect", data);
                            player.kakaotv.datainfo.online = false;
                            doTimeout("kakaotv_run", function() {
                                player.kakaotv.server();
                            }, 3000);
                        });
                        
                        player.kakaotv.socket.on("error", function(data) {
                            if(sub.debug) console.log("error", data);
                            player.kakaotv.datainfo.online = false;
                            doTimeout("kakaotv_run", function() {
                                player.kakaotv.server();
                            }, 3000);
                        });
                    }
                }
                
            }, randomRange(1,3) * 1000);
        },
        ping: function() {
            doTimeout("kakaotv_ping", function() {
                if(player.kakaotv.datainfo.connect == true && player.kakaotv.socket != null && player.kakaotv.socket.connected == true) {
                    player.kakaotv.socket.emit("socketping",{
                        id:player.kakaotv.datainfo.id
                    });
                }
                
                player.kakaotv.ping();
            }, 20000);
        },
        stats: function() {
            replace.apiload({
                id:player.kakaotv.datainfo.id,
                type:"kakaotv",
                time:apiData.kakaotv.time
            });
            
            doTimeout("kakaotv_stats", function() {
                player.kakaotv.stats();
            }, comm.apiload.time("kastats"));
        },
        info: function() {
            if(player.kakaotv.datainfo.id != "" && player.kakaotv.datainfo.connect == true) {
                replace.apiload({
                    id:player.kakaotv.datainfo.id,
                    type:"kakaotvinfo",
                    time:apiData.kakaotvinfo.time
                });
            }
            
            doTimeout("kakaotv_info", function() {
                player.kakaotv.info();
            }, comm.apiload.time());
        }
    },
    
    //TODO 네이버tv
    navertv: {
        prevdata: {
            broad: "",
            chat: "",
            info: ""
        },
        datainfo: {
            id:"",
            chid:"",
            liveid:"",
            linkid:"",
            time:"",
            connect:false,
            online:false,
            connectfirst:true,
            server:false,
            view:0,
            title:"",
            start:"",
            uptime:"",
            rank:0,
            up:0,
            sub:0
        },
        init: function(data) {
            if(sub.debug) console.log("navertv init", data);
            
            player.navertv.datainfo.id = data.naid;
            if(player.navertv.datainfo.id != "") {
                player.navertv.stats(true);
                if(subType == "chat") {
                    player.navertv.chat();
                }
            }
        },
        chat: function() {
            doTimeout("navertv_chat", function() {
                if(player.navertv.datainfo.connect == true) {
                    $.ajax({
                        url:"lib/navertv.php",
                        dataType:"json",
                        data:{
                            type:"chat",
                            id:player.navertv.datainfo.id,
                            chid:player.navertv.datainfo.linkid,
                            time:player.navertv.datainfo.time
                        },
                        timeout:5000,
                        success: function(data) {
                            if(sub.debug) console.log("navertv chat", data);
                            if(data && data.comment) {
                                
                                if(player.navertv.datainfo.connectfirst == true) {
                                    player.navertv.datainfo.connectfirst = false;
                                    if(data.comment.length > 0) {
                                        player.navertv.datainfo.time = data.comment[0].time;
                                    }
                                    return;
                                }
                                
                                if(data.comment.length > 0) {
                                    sub[subType].msgn(data.comment);
                                }
                            }
                        }
                    });
                } 
                player.navertv.chat();
            }, 3000);
        },
        stats: function(type) {
            var getTime = type == true ? 1000 : (player.navertv.datainfo.connect == true ? 10000 : 20000);
            doTimeout("navertv_stats", function() {
                $.ajax({
                    url:"lib/broadinfo.php",
                    dataType:"json",
                    data:{
                        type:"navertvstats",
                        id:player.navertv.datainfo.id
                    },
                    timeout:5000,
                    success: function(data) {
                        if(sub.debug) console.log("navertv stats", data);
                        
                        player.navertv.datainfo.chid = "";
                        player.navertv.datainfo.liveid = "";
                        player.navertv.datainfo.linkid = "";
                        player.navertv.datainfo.view = 0;
                        player.navertv.datainfo.connect = false;
                        if(data && data.data && data.data.liveid && data.data.liveid != "") {
                            if(subType === "chat") sub.chat.previewchat(false);
                            
                            player.navertv.datainfo.chid = data.data.chid;
                            player.navertv.datainfo.liveid = data.data.liveid;
                            player.navertv.datainfo.linkid = data.data.link.split("/").pop();
                            player.navertv.datainfo.view = data.data.view;
                            player.navertv.datainfo.connect = true;
                        }
                    }
                });
                
                player.navertv.stats(false);
            }, getTime);
        }
    },
    
    //TODO 페이스북
    facebook: {
        prevdata: {
            broad: "",
            video: "",
            chat: "",
            info: ""
        },
        datainfo: {
            id:"",
            postid:"",
            videoid:"",
            videolist:[],
            exceptlist:{},
            lasttime:0,
            lastmsg:[],
            profileimg:{},
            time:"",
            connect:false,
            online:false,
            connectfirst:true,
            server:false,
            view:0,
            title:"",
            start:"",
            uptime:"",
            rank:0,
            up:0,
            sub:0
        },
        time:3000,
        timedefault:5000,
        init: function(data) {
            if(sub.debug) console.log("facebook init", data);
            
            player.facebook.datainfo.id = data.fapost;
            if(player.facebook.datainfo.id != "") {
                player.facebook.stats(false);
                if(subType == "chat") {
                    player.facebook.chat();
                }
            }
        },
        chat: function() {
            if(player.facebook.datainfo.connect == true && player.facebook.datainfo.videoid != "") {
                $.ajax({
                    url:"lib/facebooklive.php",
                    data:{
                        type:"chat",
                        id:player.facebook.datainfo.videoid,
                        time:player.facebook.datainfo.lasttime
                    },
                    timeout:5000,
                    success: function(data) {
                        if(sub.debug) console.log("facebook data", data);
                        
                        if(data && data.result && data.chat && data.chat.length > 0) {
                            var getComment = [];
                            $.each(data.chat, function(key, value) {
                                if(value.id && value.text) {
                                    var getChatTime = parseInt(value.time, 10);
                                    player.facebook.datainfo.lasttime = getChatTime;
                                    getComment.push({
                                        time:getChatTime,
                                        profile:value.thumb,
                                        id:value.id,
                                        name:value.name,
                                        message:value.text,
                                        gender:value.gender
                                    });
                                }
                            });
                            
                            //console.log("facebook chat", getComment);
                            if(player.facebook.datainfo.connectfirst == false && getComment.length > 0) {
                                sub[subType].msgf(getComment);
                            }
                        }
                        player.facebook.datainfo.connectfirst = false;
                    },
                    error: function() {
                        //TODO 페이스북live 에러 로그
                        var getLogData = {
                            data:{
                                type:"chat",
                                id:player.facebook.datainfo.videoid,
                                time:player.facebook.datainfo.lasttime
                            },
                            login:loginInfo,
                            url:window.location.href
                        }
                        $.ajax({
                            type:"POST",
                            url:logUrl + "lib/getlog.php",
                            data:{
                                type:"facebooklive",
                                log:JSON.stringify(getLogData)
                            }
                        });
                    }
                });
            }
            
            doTimeout("facebook_chat", function() {
                player.facebook.chat();
            }, player.facebook.time);
        },
        stats: function(type) {
			$.ajax({
                url:"lib/facebooklive.php",
                dataType:"json",
                data:{
                    type:"stats",
                    id:loginInfo.fapost,
                    token:loginInfo.fatoken
                },
                timeout:10000,
                success: function(data) {
                	console.log("facebook", data);
                	var getConnect = false;
                	var getVideoid = "";
                	if(data && data.videoid !== undefined) {
                	    if(subType === "chat") sub.chat.previewchat(false);
                	    
                		getConnect = true;
                		getVideoid = data.videoid;
                	}
                	player.facebook.datainfo.connect = getConnect;
                    player.facebook.datainfo.videoid = getVideoid;
                },
                error: function() {
                	
                }
			});
            
            doTimeout("facebook_stats", function() {
                player.facebook.stats(false);
            }, type == true ? 1000 : comm.apiload.time("fastats"));
        }
    },
    
    //TODO 골드라이브
    goldlive: {
        prevdata: {
            broad: "",
            info: ""
        },
        datainfo: {
            id:"",
            type:"",
            chid:"",
            connect:false,
            online:false,
            connectfirst:true,
            server:false,
            view:0,
            title:"",
            start:"",
            uptime:"",
            rank:0,
            up:0,
            sub:0,
            plus:0,
            ver:0
        },
        csocket: null,
        socketFirst: true,
        init: function(data) {
            if(sub.debug) console.log("goldlive init", data);
            
            player.goldlive.datainfo.id = data.gdid;
            player.goldlive.datainfo.type = data.detail;
            
            if(player.goldlive.datainfo.id != "") {
                player.goldlive.stats();
                
                if(subType == "chat") {
                    player.goldlive.load("load");
                }
            }
        },
        stats: function() {
            replace.apiload({
                id:player.goldlive.datainfo.id,
                type:"goldlive",
                time:apiData.goldlive.time
            });
            
            doTimeout("goldlive_stats", function() {
                player.goldlive.stats();
            }, comm.apiload.time("gdstats"));
        },
        load: function(type) {
            if(sub.debug) console.log("goldlive socket init", type);
            
            doTimeout("goldlive_socket_broad", function() {
                if(player.goldlive.datainfo.id != "" && player.goldlive.datainfo.connect == true) {
                    $.ajax({
                        url:"lib/broadinfo.php",
                        dataType:"json",
                        data:{
                            type:"goldlivebroad",
                            id:player.goldlive.datainfo.id,
                            idtype:loginInfo.gdinfo,
                            email:loginInfo.id,
                            idx:idxNum
                        },
                        timeout:5000,
                        success: function(datas) {
                            if(sub.debug) console.log("goldlive broad",datas);
                            
                            if(datas.data != undefined && datas.data.rslt_set != undefined && datas.data.rslt_set.subject != undefined && datas.data.rslt_set.subject != "") {
                                player.goldlive.datainfo.title = datas.data.rslt_set.subject;
                                player.goldlive.datainfo.start = datas.data.rslt_set.start_date;
                            }
                            if(datas.data != undefined && datas.data.rslt_set != undefined && datas.data.rslt_set.chat_host != undefined) {
                                player.goldlive.socket(datas,"init");
                            }
                        }
                    });
                }
            }, 1000);
            
            doTimeout("goldlive_socket_load", function() {
                player.goldlive.load("interval");
            }, 10000);
        },
        socket: function(broad, type) {
            if(sub.debug) console.log("goldlive chat socket", broad, type);
            player.goldlive.broad = broad;

            doTimeout("goldlive_socket_run", function() {
                
                //timeout 초기화
                doTimeout("goldlive_socket_load",false);
                
                //연결 끊기
                if(player.goldlive.csocket != null && player.goldlive.csocket.readyState && player.goldlive.csocket.readyState == 1) {
                    //csocket.close();
                    return;
                }
                player.goldlive.reconnect();
                
                player.goldlive.csocket = new WebSocket("ws://" + broad.data.rslt_set.chat_host + ":" + broad.data.rslt_set.chat_port + "/wsock");
                //player.goldlive.socket.binaryType = "arraybuffer";
                
                player.goldlive.csocket.onopen = function() {
                    if(sub.debug) console.log("socket goldlive open");
                    player.goldlive.reconnect();
                    
                    player.goldlive.csocket.send('{"service":"pang/chat/ROOM_JOIN2","param":{"cs":"' + broad.data.rslt_set.chat_cs + '","sk":"3","au":"0"}}');
                }
                
                player.goldlive.csocket.onmessage = function (msg) {
                    //console.log("socket goldlive msg", msg);
                    
                    var getJson = {};
                    var getData = $.parseJSON(msg.data);
                    
                    if(getData.service != undefined && getData.service == "pang.chat.ROOM_JOIN2") {
                        //첫 접속
                        doTimeout("goldlive_socket_reconnect", false);
                    }
                    
                    if(getData.json_str != undefined && getData.json_str !== "") {
                        getJson = $.parseJSON(getData.json_str);
                    }
                    if(sub.debug) console.log("socket goldlive json", getData, getJson);
                    
                    if(getData.msg_type != undefined) {
                        
                        if(getData.msg_type !== 1) {
                            // $.ajax({
                                // type:"POST",
                                // url:logUrl + "lib/aflog.php",
                                // data:{
                                    // type:"golddata",
                                    // log:JSON.stringify(getData)
                                // }
                            // });
                        }
                        
                        if(getData.msg_type === 1) {
                            if(subType == "chat" || subType == "alert") {
                                var getGrade = "non";
                                if(getJson.pl_manage_level == 90){    // 매니저
                                    getGrade = "mng";
                                }
                                else if(getJson.pl_manage_level == 99){  // 비제이
                                    getGrade = "bj";
                                }
                                else if(getJson.pl_manage_level == 0){   // 민간인
                                    getGrade = "non";
                                }
                                else if(getJson.pl_manage_level > 0){    // 등급이 있는 유저.
                                    getGrade = "fan";
                                }
                                
                                var getMsg = getJson.msg.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,"");
                                var starData = {
                                    type:"chat",
                                    broadtype:"goldlive",
                                    grade:getGrade,
                                    level:getJson.u_level,
                                    plv:getJson.pl_level,
                                    plvmng:getJson.pl_manage_level,
                                    gender:"",
                                    agent:"",
                                    support:"",
                                    quick:"",
                                    follow:"",
                                    uid:getJson.nick,
                                    uname:getJson.nick,
                                    msg:getMsg
                                };
                                
                                if(subType == "chat") {
                                    sub[subType].add(starData);
                                }
                                else if(subType == "alert") {
                                    var getMsgData = ["CHATMESG", getMsg, getJson.nick, "", getJson.nick, "", ""];
                                    sub[subType].msg(getMsgData, true);
                                }
                            }
                        }
                        else if(getData.msg_type === 9999 && (getJson.n_msg_type == 1 || getJson.n_msg_type == 2 || getJson.n_msg_type == 18 || getJson.n_msg_type == 70 || getJson.n_msg_type == 80 || getJson.n_msg_type == 82 || getJson.n_msg_type == 83)) {
                            if(subType == "chat" || subType == "alert" || (subType == "subtitle" && sub.subtitle.data.theme == "star") || (subType == "goal" && (sub.goal.data.type == "gdstar" || sub.goal.data.type == "gdstarm"))) {
                                
                                var getChatOnly = false;
                                var getAlertCheck = true;
                                var getMsg = "";
                                var getImg = "";
                                var getDesc = "";
                                var getClss = "";
                                var getGold = getJson.send_gold != undefined ? getJson.send_gold : 0;
                                
                                if(getJson.climbing_info != undefined) {    //백두산
                                    getAlertCheck = false;
                                    getClss = "climb";
                                    getImg = getJson.climbing_info.effect_img;
                                    getGold = getJson.climbing_info.umc_step;
                                    
                                    if (getJson.climbing_info.umc_state == 0) {
                                        if (getJson.climbing_info.umc_step == 0) {
                                            getDesc = '등반시작!!' ;
                                            getClss = "climb start";
                                        } else {
                                            getChatOnly = true;
                                            getDesc = getJson.climbing_info.umc_step + '두산 등반중!!';
                                            getClss = "climb run";
                                            if(getJson.climbing_info.is_exists_effect != undefined && getJson.climbing_info.is_exists_effect == true) {
                                                getClss = "climb effect";
                                            }
                                            else {
                                                getImg = "";
                                            }
                                        }
                                    } else if (getJson.climbing_info.umc_state == 1) {
                                        getAlertCheck = true;
                                        getDesc = getJson.climbing_info.umc_step + '두산 등반완료!!';
                                        getClss = "climb complete";
                                    } else if (getJson.climbing_info.umc_state == 3) {
                                        getAlertCheck = true;
                                        getDesc = getJson.climbing_info.umc_step + '두산 등반실패!!';
                                        getClss = "climb fail";
                                    }
                                    
                                    if(subType == "alert" || subType == "alert" || subType == "alert") {
                                        if(getAlertCheck === true && getJson.climbing_info.umc_current_gold_cnt != undefined) {
                                            getGold = getJson.climbing_info.umc_current_gold_cnt;
                                        }
                                    }
                                }
                                else if(getJson.n_msg_type == 1) {  //골드
                                    getMsg = getJson.msg.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,"");
                                    if(getJson.sg_chat_img != undefined && getJson.sg_chat_img !== "") getImg = goldLiveData.url + getJson.sg_chat_img;
                                }
                                else if(getJson.n_msg_type == 70) {  //미션
                                    getMsg = getJson.msg.replace(/(<([^>]+)>)|(&lt;([^>]+)&gt;)|(src\=|style\=|src&#61;|style&#61;)/ig,"");
                                    getClss = "mission";
                                    if(getJson.mission != undefined) {
                                        getDesc = getJson.mission.vmi_title;
                                    }
                                    if(getJson.sg_chat_img != undefined && getJson.sg_chat_img !== "") getImg = goldLiveData.url + getJson.sg_chat_img;
                                }
                                else {
                                    getImg = getJson.msg;
                                }
                                
                                var starData = {
                                    type:"star",
                                    broadtype:"goldlive",
                                    grade:"gift",
                                    level:getJson.u_level,
                                    plv:getJson.pl_level,
                                    plvmng:getJson.pl_manage_level,
                                    gender:"",
                                    agent:"",
                                    support:"",
                                    quick:"",
                                    follow:"",
                                    uid:getJson.nick,
                                    uname:getJson.nick,
                                    msg:getMsg,
                                    css:getClss,
                                    desc:getDesc,
                                    value:getGold,
                                    img:getImg,
                                    join:0
                                };
                                
                                if(subType == "chat" && getChatOnly === true) {
                                    sub[subType].add(starData);
                                    return;
                                }
                                if(subType == "alert" || subType == "alert" || subType == "alert") {
                                    if(getAlertCheck === false) return;
                                }
                                
                                if(subType == "alert") {
                                    starData.msg = "";
                                    starData.type = "gold";
                                    sub[subType].add(starData, true);
                                }
                                else if(subType == "subtitle") {
                                    starData.type = "gold";
                                    sub[subType].staradd(starData);
                                }
                                else if(subType == "goal") {
                                    sub[subType].opt.lastname = starData.uname;
                                    sub[subType].add(getGold);
                                }
                                else {
                                    sub[subType].add(starData);
                                }
                            }
                        }
                        else if(getData.msg_type === 9999 && (getJson.n_msg_type == 60 || getJson.n_msg_type == 61)) {
                            if(subType == "chat") {
                                var getMsg = "";
                                if(getJson.n_msg_type == 60) {
                                    getMsg = "<span class='up_box info_all_up" + getJson.u_level + "'><span class='mark'></span><span class='name'>" + getJson.nick + "</span> 님께서 <span class='grade'>" + getJson.u_level_name + "</span> 등급으로 승급하셨습니다. 축하드립니다.</span>";
                                }
                                else if(getJson.n_msg_type == 61) {
                                    getMsg = "<span class='up_box info_fan_up" + getJson.pl_level + "'><span class='mark'></span><span class='name'>" + getJson.nick + "</span> 님께서 <span class='grade'>" + getJson.pl_level_name + "</span> 등급이 되셨어요!</span>";
                                }
                                var starData = {
                                    type:"chat",
                                    broadtype:"goldlive",
                                    grade:"up",
                                    level:getJson.u_level,
                                    plv:getJson.pl_level,
                                    plvmng:getJson.pl_manage_level,
                                    gender:"",
                                    agent:"",
                                    support:"",
                                    quick:"",
                                    follow:"",
                                    uid:getJson.nick,
                                    uname:getJson.nick,
                                    msg:getMsg
                                };
                                
                                sub[subType].add(starData);
                            }
                        } 
                        else if(getData.msg_type === 9999 && getJson.n_msg_type == 7) {
                            if(subType == "chat") {
                                sub[subType].cancelchat(getJson.nick);
                            }
                            else if(subType == "alert") {
                                sub.alert.cancelvoice("kick",getJson.nick);
                            }
                        }
                        else if(getData.msg_type === 9999 && getJson.n_msg_type == 9) {
                            if(subType == "alert") {
                                sub.alert.cancelvoice("dumb",getJson.nick);
                            }
                        }
                        else if(getData.msg_type === 9999 && getJson.n_msg_type == 6) {
                            if(subType == "alert") {
                                sub.alert.add({
                                    type:"gdup",
                                    uid:"",
                                    uname:[getJson.nick]
                                }, true);
                            }
                        }
                        else if(getData.msg_type === 2) {
                            if(subType == "chat") {
                                sub.chat.joinvoice({broad:"goldlive",uid:getJson.nick,uname:getJson.nick});
                            }
                        }
                        else if(getData.msg_type === 6) {
                            doTimeout("goldlive_close", function() {
                                location.reload(true);
                            }, randomRange(10, 200) * 10);
                            
                            if(subType == "goal") {
                                sub.goal.goalsetup("save", true);
                            }
                            else if(subType == "subtitle") {
                                sub.subtitle.starsetup("save",true);
                            }
                            return;
                        }
                    }
                    
                };
                
                player.goldlive.csocket.onclose = function () {
                    if(sub.debug) console.log("goldlive socket onclose");
                    player.goldlive.reconnect(3000);
                };
                
                player.goldlive.csocket.onerror = function() {
                    if(sub.debug) console.log("goldlive socket onerror");
                    player.goldlive.reconnect(1000);
                }
            }, 100);
        },
        reconnect: function(time) {
            doTimeout("goldlive_socket_reconnect", function() {
                player.goldlive.load("reconnect");
            }, time == undefined ? 1000 * 5 : time);
        }
    },
    
    //TODO 유틸
    tooltip: {
        init: function() {
            var tooltipInterval = null;
            var tooltipItemInterval = null;
            var tooltipBox = $("#tooltip_box").removeClass("load").on("mouseenter mousemove", function() {
                clearTimeout(tooltipInterval);
                
                if(sub[subType].data.mouseover == undefined || sub[subType].data.mouseover == true) {
                    tooltipBox.addClass("on");
                }
                else {
                    tooltipBox.addClass("off");
                }
                
                tooltipInterval = setTimeout(function() {
                    tooltipBox.removeClass("on");
                }, 3000);
            });
            $("#tooltip_box .item_tooltip").on("mouseenter mousemove", function() {
                clearTimeout(tooltipItemInterval);
                $(this).addClass("active");
                tooltipItemInterval = setTimeout(function() {
                    $("#tooltip_box .item_tooltip.active").removeClass("active");
                }, 10000);
            }).on("mouseleave", function() {
                $(this).removeClass("active");
            });
            
            $("#tooltip_box .toggle_onoff").on("change", function() {
                player.opt.use = this.checked;
                if(player.opt.use) {
                    $("#player .item_box").removeClass("nouse");
                }
                else {
                    $("#player .item_box").addClass("nouse");
                }
            });
            
            $("#tooltip_box .toggle_sound").on("change", function() {
                player.opt.sound = this.checked;
                // if(typeof soundManager !== "undefined" && typeof soundManager === "object" && sub[subType].opt.audio != undefined && sub[subType].opt.audio != null) {
                    // if(sub[subType].opt.audio.url != undefined && sub[subType].opt.audio.url != "") {
                        // if(this.checked) sub[subType].opt.audio.mute();
                        // else sub[subType].opt.audio.unmute();
                    // }
                // }
            });
            
            $("#tooltip_box .select_fontsize").on("change", function() {
                var getValue = $(this).find("option:selected").attr("value");
                if(getValue != "") {
                    player.opt.fontsize = getValue;
                    setCookie("tooltip_fontsize_" + subType + "_" + subPage, getValue, 365);
                    $(".item_box").css("fontSize", getValue + "px").attr("fontsize",getValue);
                }
                if(subType == "chat") {
                    setTimeout(function() {
                        sub.chat.scroll.bottom(true,true);
                    }, 1000);
                }
            });
            
            $("#tooltip_box .select_transparent").on("change", function() {
                var getValue = $(this).find("option:selected").attr("value");
                if(getValue != "") {
                    player.opt.opacity = getValue;
                    setCookie("tooltip_transparent_" + subType + "_" + subPage, getValue, 365);
                    $(".item_box").css("opacity", (100 - parseInt(getValue, 10)) / 100);
                }
            });
            
            $("#tooltip_box .btn_subtitle_delete").on("click", function() {
                if(sub.subtitle != undefined && sub.subtitle.data != undefined && (sub.subtitle.data.theme == "star" || sub.subtitle.data.theme == "ytstar" || sub.subtitle.data.theme == "kastar" || sub.subtitle.data.theme == "bits" || sub.subtitle.data.theme == "gdstar")) {
                    if(confirm("저장된 후원(선물)자막이 삭제 됩니다. 삭제 하시겠습니까?")) {
                        sub.subtitle.starsetup("reset");
                        // $("#item_subtitle .subtitle .text").empty();
                        // location.reload(true);
                    }
                }
                else {
                    $("#item_subtitle .subtitle .text").empty();
                } 
                return false;
            });
            
            $("#tooltip_box .btn_subtitle_modify").on("click", function() {
                if(sub.subtitle.data.theme != "normal") return false;
                $("#item_subtitle_modify").remove();
                $("#item_subtitle").append("<textarea id='item_subtitle_modify'></textarea>");
                var getModifyText = sub.subtitle.data.text;
                $("#item_subtitle_modify").css({
                    fontSize:sub.subtitle.data.fontsize,
                    fontFamily:sub.subtitle.data.font,
                    fontWeight:sub.subtitle.data.fontbold,
                    textAlign:sub.subtitle.data.align
                }).val(sub.subtitle.data.text).focus().on("change", function() {
                    var getText = $(this).val();
                    //console.log(getModifyText, getText);
                    if(getText != getModifyText) {
                        sub.subtitle.data.text = getText;
                        sub.subtitle.opt.textedit = getText;
                        sub.subtitle.add();
                    }
                }).on("focusout", function() {
                    $("#item_subtitle_modify").remove();
                });
                return false;
            });
            
            $("#tooltip_box .btn_goal_delete").on("click", function() {
                if(confirm("저장된 목표치 값이 삭제 됩니다. 삭제 하시겠습니까?")) {
                    sub.goal.goalsetup("reset");
                }
                return false;
            });
            
            $(".item_chat .btn_scroll_bottom").on("click", function() {
                sub.chat.scroll.bottom(true,true);
                return false;
            });
            
            //알림 리스트 관리
            $("#tooltip_box .btn_alert_listdel").on("click", function() {
                sub.alert.list.removeall();
                return false;
            });
            
            //별풍이미지 자막 줄
            // $("#tooltip_box .select_subtitle_line").on("change", function() {
                // setCookie("subtitle_line", this.value, 365);
                // $("#item_subtitle.giftimg .item_area").attr("class", "item_area starline_" + this.value);
            // });
            
        }
    },
    reset: function(data) {
        if(subType == data.type) {
            if(subType == "subtitle" && sub.subtitle.data != undefined && (sub.subtitle.data.theme == "star" || sub.subtitle.data.theme == "ytstar" || sub.subtitle.data.theme == "kastar" || sub.subtitle.data.theme == "bits" || sub.subtitle.data.theme == "gdstar")) {
                sub.subtitle.starsetup("reset");
                // $("#item_subtitle .subtitle .text").empty();
                // location.reload(true);
            }
        }
    },
    
    //TODO 위젯 설정
    widget: {
        target: null,
        stop: function() {
            //나중에 여기에 다 추가
        },
        user: {
            load: function(data) {
                if(subType == "chat") {
                    sub.chat.notice.resize();
                }
                
                var getChatWidth = $("#item_chat").removeClass("multiline").width();
                if(getChatWidth < 500 && $("#item_chat").hasClass("user6")) {
                    $("#item_chat").addClass("multiline");
                }
                else if(getChatWidth < 400 && $("#item_chat").hasClass("user5")) {
                    $("#item_chat").addClass("multiline");
                }
                
                player.widget.target = $("#item_chat .widget_user");
                
                doTimeout("widget_user", function() {
                    var getUserTotal = 0;
                    $.each(data, function(key, value) {
                        player.widget.user[value]();
                    });
                    
                    player.widget.user.load(data);
                }, comm.apiload.time("view"));
            },
            total: function() {
                var getUser1 = !isNaN(player.afreecatv.datainfo.view) ? parseInt(player.afreecatv.datainfo.view, 10) : 0;
                var getUser2 = !isNaN(player.twitch.datainfo.view) ? parseInt(player.twitch.datainfo.view, 10) : 0;
                var getUser3 = !isNaN(player.youtube.datainfo.view) ? parseInt(player.youtube.datainfo.view, 10) : 0;
                var getUser4 = !isNaN(player.kakaotv.datainfo.view) ? parseInt(player.kakaotv.datainfo.view, 10) : 0;
                var getUser5 = !isNaN(player.navertv.datainfo.view) ? parseInt(player.navertv.datainfo.view, 10) : 0;
                var getUser6 = !isNaN(player.facebook.datainfo.view) ? parseInt(player.facebook.datainfo.view, 10) : 0;
                var getUser7 = !isNaN(player.goldlive.datainfo.view) ? parseInt(player.goldlive.datainfo.view, 10) : 0; 
                player.widget.target.find(".user_box.total .value").html(numberWithCommas(getUser1 + getUser2 + getUser3 + getUser4 + getUser5 + getUser6 + getUser7));
            },
            afreecatv: function() {
                if(player.afreecatv.datainfo.id != "" && player.afreecatv.datainfo.connect == true) {
                    replace.apiload({
                        id:player.afreecatv.datainfo.id,
                        type:"viewer",
                        time:apiData.viewer.time
                    });
                }
                
                var getUser = parseInt(player.afreecatv.datainfo.view, 10);
                if(!isNaN(getUser)) {
                    player.widget.target.find(".user_box.afreecatv .value").html(numberWithCommas(getUser));
                    player.widget.user.total();
                }
            },
            twitch: function() {
                if(player.twitch.datainfo.id != "" && player.twitch.datainfo.connect == true) {
                    $.ajax({
                        url:"https://api.twitch.tv/kraken/streams/" + player.twitch.datainfo.id,
                        headers: {
                            "Client-ID":twitchClientId
                        },
                        timeout:5000,
                        success: function(data) {
                            //console.log("widget twitch", data);
                            if(data && data.stream && data.stream.viewers) {
                                player.twitch.datainfo.view = parseInt(data.stream.viewers, 10);
                            }
                            
                            var getUser = parseInt(player.twitch.datainfo.view, 10);
                            if(!isNaN(getUser)) {
                                player.widget.target.find(".user_box.twitch .value").html(numberWithCommas(getUser));
                                player.widget.user.total();
                            }
                        }
                    });
                }
            },
            youtube: function() {
                if(player.youtube.datainfo.viewid != "" && player.youtube.datainfo.connect == true) {
                    $.ajax({
                        url:"afreehp/api.php",
                        dataType:"json",
                        data:{
                            broad:"youtube",
                            type:"view",
                            id:player.youtube.datainfo.viewid
                        },
                        timeout:5000,
                        success:function(data) {
                            if(data && data.view) {
                                player.youtube.datainfo.view = parseInt(data.view, 10);
                            }
                            var getUser = parseInt(player.youtube.datainfo.view, 10);
                            if(!isNaN(getUser)) {
                                player.widget.target.find(".user_box.youtube .value").html(numberWithCommas(getUser));
                                player.widget.user.total();
                            }
                        }
                    });
                }
            },
            kakaotv: function() {
                if(player.kakaotv.datainfo.id != "" && player.kakaotv.datainfo.connect == true) {
                    replace.apiload({
                        id:player.kakaotv.datainfo.id,
                        type:"kakaotv",
                        time:apiData.kakaotv.time
                    });
                    
                    var getUser = parseInt(player.kakaotv.datainfo.view, 10);
                    if(!isNaN(getUser)) {
                        player.widget.target.find(".user_box.kakaotv .value").html(numberWithCommas(getUser));
                        player.widget.user.total();
                    }
                }
            },
            navertv: function() {
                if(player.navertv.datainfo.connect == true) {
                    var getUser = parseInt(player.navertv.datainfo.view, 10);
                    if(!isNaN(getUser)) {
                        player.widget.target.find(".user_box.navertv .value").html(numberWithCommas(getUser));
                        player.widget.user.total();
                    }
                }
            },
            facebook: function() {
                if(player.facebook.datainfo.connect == true && player.facebook.datainfo.id != "" && player.facebook.datainfo.videoid != "") {
                    
                    $.ajax({
                        url:"lib/facebooklive.php",
                        data:{
                            type:"view",
                            id:player.facebook.datainfo.videoid
                        },
                        timeout:5000,
                        success: function(data) {
                            if(sub.debug) console.log("facebook view", data);
                            
                            if(data && data.result && data.view && data.view != "") {
                                var getViewHtml = $(data.view).text();
                                player.facebook.datainfo.view = getViewHtml;
                            }
                        }
                    });
                    
                    var getUser = parseInt(player.facebook.datainfo.view, 10);
                    if(!isNaN(getUser)) {
                        player.widget.target.find(".user_box.facebook .value").html(numberWithCommas(getUser));
                        player.widget.user.total();
                    }
                }
            },
            goldlive: function() {
                var getUser = parseInt(player.goldlive.datainfo.view, 10);
                if(!isNaN(getUser)) {
                    player.widget.target.find(".user_box.goldlive .value").html(numberWithCommas(getUser));
                    player.widget.user.total();
                }
            }
        }
    }
}


//임시 테스트
function dispSampleMsg() {
    var sampleChatMsgs = [];

    // 일반메시지
    sampleChatMsgs[0] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":99,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":0,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":1,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : 손님\",\"prohibit_yn\":0}"
        })
    }
    sampleChatMsgs[1] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":99,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":1,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":0,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : 일반\",\"prohibit_yn\":0}"
        })
    }
    sampleChatMsgs[2] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":99,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":90,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":6,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : 매니저\",\"prohibit_yn\":0}"
        })
    }
    sampleChatMsgs[3] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":99,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":99,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":6,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : BJ\",\"prohibit_yn\":0}"
        })
    }
    sampleChatMsgs[4] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":0,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":0,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":0,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : 없음-없음\",\"prohibit_yn\":0}"
        })
    }
    sampleChatMsgs[5] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":1,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":1,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":1,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : 이등병-브론즈\",\"prohibit_yn\":0}"
        })
    }
    sampleChatMsgs[6] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":2,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":1,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":2,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : 하사-실버\",\"prohibit_yn\":0}"
        })
    }
    sampleChatMsgs[7] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":3,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":1,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":3,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : 소위-골드\",\"prohibit_yn\":0}"
        })
    }
    sampleChatMsgs[8] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":4,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":1,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":4,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : 소령-사파이어\",\"prohibit_yn\":0}"
        })
    }
    sampleChatMsgs[9] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":5,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":1,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":5,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : 준장-루비\",\"prohibit_yn\":0}"
        })
    }
    sampleChatMsgs[10] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":6,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":1,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":6,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"채팅메시지 : 대장-다이아\",\"prohibit_yn\":0}"
        })
    }

    // 골드 선물
    sampleChatMsgs[11] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{\"vod_key\":\"4612\",\"n_msg_type\":1,\"nick\":\"sasem2k10\",\"msg\":\"sasem2k10|\\uace8\\ub4dc|\\ubc1c\\uc0ac!\",\"pl_level_name\":\"\\ub300\\uc7a5\",\"pl_manage_level_name\":\"\\uc77c\\ubc18\",\"pl_level\":6,\"user_key\":40138,\"u_level\":6,\"pl_manage_level\":1,\"cumulative_cash\":1,\"sg_key\":\"1\",\"sg_name\":\"\\uace8\\ub4dc\",\"sg_effect_name\":\"CoinEffect1\",\"sg_effect_num\":6,\"sg_chat_img\":\"\\/asset\\/www\\/pangpang\\/images\\/chatimg\\/gold_1G.png\",\"send_gold\":1,\"gold_img\":\"asset\\/www\\/images\\/item01.png\",\"bj_nick\":\"sasem2k\",\"m_result\":false}"
        })
    }
    // 매니저 임명
    sampleChatMsgs[12] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"n_msg_type\":11,\"nick\":\"sasem2k10\",\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"sasem2k10\\ub2d8\\uc774 \\ub9e4\\ub2c8\\uc800\\ub85c \\uc784\\uba85\\ub418\\uc5c8\\uc2b5\\ub2c8\\ub2e4.\",\"pl_level_name\":\"\\ub300\\uc7a5\",\"pl_manage_level_name\":\"\\ub9e4\\ub2c8\\uc800\",\"pl_level\":6,\"cumulative_cash\":1,\"user_key\":40138,\"pl_manage_level\":90}"
        })
    }
    // 매니저 해임
    sampleChatMsgs[13] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"n_msg_type\":12,\"nick\":\"sasem2k10\",\"u_extra\":\"{\\\"evt_xmas\\\":{\\\"is_attainment\\\":true}}\",\"msg\":\"sasem2k10\\ub2d8\\uc774 \\ub9e4\\ub2c8\\uc800\\uc5d0\\uc11c \\ud574\\uc784\\ub418\\uc5c8\\uc2b5\\ub2c8\\ub2e4.\",\"pl_level_name\":\"\\ub300\\uc7a5\",\"pl_manage_level_name\":\"\\uc77c\\ubc18\",\"pl_level\":6,\"cumulative_cash\":1,\"user_key\":40138,\"pl_manage_level\":1}"
        })
    }
    // 귓속말 (받음)
    sampleChatMsgs[14] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 39470,
            "to_user_key": [40138],
            "json_str": "{\"n_msg_type\":3,\"nick\":\"sasem2k\",\"msg\":\"\\ubc1b\\uc740 \\uadd3\\uc18d\\ub9d0\\uc785\\ub2c8\\ub2e4.\",\"pl_level_name\":\"\\ube0c\\ub860\\uc988\",\"pl_manage_level_name\":\"\\uc77c\\ubc18\",\"pl_level\":1,\"user_key\":39470,\"pl_manage_level\":1}"
        })
    }
    // 귓속말 (보냄)
    sampleChatMsgs[15] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 40138,
            "to_user_key": [40138],
            "json_str": "{\"n_msg_type\":5,\"nick\":\"sasem2k\",\"msg\":\"\\ubcf4\\ub0b4\\ub294 \\uadd3\\uc18d\\ub9d0\\uc785\\ub2c8\\ub2e4.\",\"pl_level_name\":\"\\ube0c\\ub860\\uc988\",\"pl_manage_level_name\":\"\\uc77c\\ubc18\",\"pl_level\":1,\"user_key\":39470,\"pl_manage_level\":1}"
        })
    }
    // 입장
    sampleChatMsgs[16] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 2,
            "from_user_key": 40223,
            "user_total_count": 3,
            "to_user_key": [0],
            "json_str": "{\"user_key\":40223,\"site_key\":3,\"nick\":\"ticarustvn\",\"pl_level\":1,\"pl_level_name\":\"이등병\",\"pl_manage_level\":90,\"pl_manage_level_name\":\"매니저\",\"u_level\":1,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":1,\"u_adult\":0}"
        })
    }
    // 추천
    sampleChatMsgs[17] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{\"n_msg_type\":6,\"nick\":\"sasem2k10\",\"msg\":\"sasem2k10\\ub2d8\\uc774 \\ucd94\\ucc9c\\ud558\\uc600\\uc2b5\\ub2c8\\ub2e4.\",\"pl_level_name\":\"\\ub2e4\\uc774\\uc544\",\"pl_manage_level_name\":\"\\uc77c\\ubc18\",\"pl_level\":6,\"user_key\":40138,\"pl_manage_level\":1}"
        })
    }
    // 벙어리
    sampleChatMsgs[18] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"msg_type\":3,\"freeze_sec\":60,\"n_msg_type\":9,\"nick\":\"ticarustvn\",\"msg\":\"ticarustvn\\ub2d8\\uc774 \\ubc99\\uc5b4\\ub9ac\\uac00 \\ub418\\uc5c8\\uc2b5\\ub2c8\\ub2e4.\",\"pl_level_name\":\"\\ube0c\\ub860\\uc988\",\"pl_manage_level_name\":\"\\uc5c6\\uc74c\",\"pl_level\":1,\"user_key\":40223,\"pl_manage_level\":0}"
        })
    }
    // 강퇴
    sampleChatMsgs[19] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"msg_type\":1,\"freeze_sec\":0,\"n_msg_type\":7,\"nick\":\"ticarustvn\",\"msg\":\"ticarustvn\\ub2d8\\uc774 \\uac15\\uc81c \\ud1f4\\uc7a5 \\ub418\\uc5c8\\uc2b5\\ub2c8\\ub2e4.\",\"pl_level_name\":\"\\ube0c\\ub860\\uc988\",\"pl_manage_level_name\":\"\\uc5c6\\uc74c\",\"pl_level\":1,\"user_key\":40223,\"pl_manage_level\":0}"
        })
    }
    // 전체얼리기
    sampleChatMsgs[20] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{\"n_msg_type\":8,\"freeze_sec\":3600,\"msg\":\"\\ud3f4\\ub9ac\\uc2a4\\uac00 \\ubc29\\uc1a1\\uc744 \\uc5bc\\ub838\\uc2b5\\ub2c8\\ub2e4.\"}"
        })
    }
    // 전체얼리기해제
    sampleChatMsgs[21] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{\"n_msg_type\":14,\"freeze_sec\":0,\"msg\":\"\\ud3f4\\ub9ac\\uc2a4\\uac00 \\uc5bc\\ub9ac\\uae30\\ub97c \\ud480\\uc5c8\\uc2b5\\ub2c8\\ub2e4.\"}"
        })
    }

    sampleChatMsgs[22] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 1,
            "from_user_key": 39470,
            "to_user_key": [0],
            "json_str": "{\"user_key\":39470,\"site_key\":1,\"nick\":\"sasem2k\",\"pl_level\":6,\"pl_level_name\":\"최고관리자\",\"pl_manage_level\":1,\"pl_manage_level_name\":\"최고관리자\",\"u_level\":6,\"u_level_name\":\"브론즈\",\"cumulative_cash\":0,\"oneday_cash\":0,\"u_type\":2,\"u_adult\":1,\"msg\":\"위 채팅메시지는 스타일변경 테스트 메시지입니다.\",\"prohibit_yn\":0}"
        })
    }

    /* 팬등급승급 안내 창 (이등병) */
    sampleChatMsgs[39] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 61, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 0, \"u_level_name\": \"\", \"pl_level\": \"1\", \"pl_level_name\": \"이등병\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 팬등급승급 안내 창 (하사) */
    sampleChatMsgs[40] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 61, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 0, \"u_level_name\": \"\", \"pl_level\": \"2\", \"pl_level_name\": \"하사\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 팬등급승급 안내 창 (소위) */
    sampleChatMsgs[41] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 61, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 0, \"u_level_name\": \"\", \"pl_level\": \"3\", \"pl_level_name\": \"소위\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 팬등급승급 안내 창 (소령) */
    sampleChatMsgs[42] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 61, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 0, \"u_level_name\": \"\", \"pl_level\": \"4\", \"pl_level_name\": \"소령\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 팬등급승급 안내 창 (준장) */
    sampleChatMsgs[43] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 61, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 0, \"u_level_name\": \"\", \"pl_level\": \"5\", \"pl_level_name\": \"준장\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 팬등급승급 안내 창 (대장) */
    sampleChatMsgs[44] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 61, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 0, \"u_level_name\": \"\", \"pl_level\": \"6\", \"pl_level_name\": \"대장\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 전체등급승급 안내 창 (브론즈) */
    sampleChatMsgs[45] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 60, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 1, \"u_level_name\": \"브론즈\", \"pl_level\": \"1\", \"pl_level_name\": \"이등병\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 전체등급승급 안내 창 (실버) */
    sampleChatMsgs[46] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 60, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 2, \"u_level_name\": \"실버\", \"pl_level\": \"2\", \"pl_level_name\": \"하사\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 전체등급승급 안내 창 (골드) */
    sampleChatMsgs[47] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 60, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 3, \"u_level_name\": \"골드\", \"pl_level\": \"3\", \"pl_level_name\": \"소위\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 전체등급승급 안내 창 (사파이어) */
    sampleChatMsgs[48] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 60, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 4, \"u_level_name\": \"사파이어\", \"pl_level\": \"4\", \"pl_level_name\": \"소령\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 전체등급승급 안내 창 (루비) */
    sampleChatMsgs[49] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 60, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 5, \"u_level_name\": \"루비\", \"pl_level\": \"5\", \"pl_level_name\": \"준장\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }

    /* 전체등급승급 안내 창 (다이아몬드) */
    sampleChatMsgs[50] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{ \"vod_key\": 8227, \"n_msg_type\": 60, \"user_key\": \"41076\", \"nick\": \"ticarusmp\", \"u_level\": 6, \"u_level_name\": \"다이아몬드\", \"pl_level\": \"6\", \"pl_level_name\": \"대장\", \"pl_manage_level\": 0, \"pl_manage_level_name\": \"\", \"bj_nick\": \"심해탈출넘버\", \"msg\": \"ticarusmp님께서 심해탈출넘버의 이등병 등급 되셨어요~\" }"
        })
    }


    // 용쏠때
    sampleChatMsgs[51] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{\"vod_key\":\"4612\",\"n_msg_type\":1,\"nick\":\"sasem2k10\",\"msg\":\"sasem2k10|\\uace8\\ub4dc|\\ubc1c\\uc0ac!\",\"pl_level_name\":\"\\ub300\\uc7a5\",\"pl_manage_level_name\":\"\\uc77c\\ubc18\",\"pl_level\":6,\"user_key\":40138,\"u_level\":6,\"pl_manage_level\":1,\"cumulative_cash\":1,\"sg_key\":\"1\",\"sg_name\":\"\\uace8\\ub4dc\",\"sg_effect_name\":\"CoinEffect1\",\"sg_effect_num\":6,\"sg_chat_img\":\"\\/asset\\/www\\/pangpang\\/images\\/chatimg\\/item_88888G.png\",\"send_gold\":88888,\"gold_img\":\"asset\\/www\\/images\\/item01.png\",\"bj_nick\":\"sasem2k\",\"m_result\":false}"
        })
    }
    // 용쏠때
    sampleChatMsgs[51] = {
        "data": JSON.stringify({
            "idx": 0,
            "msg_type": 9999,
            "from_user_key": 0,
            "to_user_key": [0],
            "json_str": "{\"vod_key\":\"4612\",\"n_msg_type\":1,\"nick\":\"sasem2k10\",\"msg\":\"sasem2k10|\\uace8\\ub4dc|\\ubc1c\\uc0ac!\",\"pl_level_name\":\"\\ub300\\uc7a5\",\"pl_manage_level_name\":\"\\uc77c\\ubc18\",\"pl_level\":6,\"user_key\":40138,\"u_level\":6,\"pl_manage_level\":1,\"cumulative_cash\":1,\"sg_key\":\"1\",\"sg_name\":\"\\uace8\\ub4dc\",\"sg_effect_name\":\"CoinEffect1\",\"sg_effect_num\":6,\"sg_chat_img\":\"\\/asset\\/www\\/pangpang\\/images\\/chatimg\\/item_88888G.png\",\"send_gold\":88888,\"gold_img\":\"asset\\/www\\/images\\/item01.png\",\"bj_nick\":\"sasem2k\",\"m_result\":false}"
        })
    }
     sampleChatMsgs.forEach(
         function dispMsg(chatMsg) {
             player.goldlive.csocket.onmessage(chatMsg);
         }
     );
};

function afreehp_connect(type, data) {
    try{
        var url = "afreehp/stats.php?type=connect&broad=" + type + "&key=" + data.key + "&idx=" + data.idx + "&id=" + data.id;
        if(type == "youtube") url += "&viewid=" + data.viewid;
        $.ajax({
            url:url,
            timeout:5000,
            success:function(data) {
            }
        });
    }
    catch(error) {
        
    }
}